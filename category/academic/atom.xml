<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Polly Blog - AI Assistant, Tutorials, and Insights - Academic</title>
    <subtitle>Explore Polly Blog for AI tutorials, insights, and updates on cutting-edge technology.</subtitle>
    <link href="https://polly2014.github.io/category/academic/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://polly2014.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-04-26T00:00:00+00:00</updated>
    <id>https://polly2014.github.io/category/academic/atom.xml</id>
    <entry xml:lang="en">
        <title>ExecuGen: What You Get is More Than What You See - An End-to-End Agent System for Transforming Technical Content into Executable Applications</title>
        <published>2025-04-26T00:00:00+00:00</published>
        <updated>2025-04-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/execugen-transforming-technical-content-into-applications/" type="text/html"/>
        <id>https://polly2014.github.io/execugen-transforming-technical-content-into-applications/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Still Under Draft&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;execugen-what-you-get-is-more-than-what-you-see-an-end-to-end-agent-system-for-transforming-technical-content-into-executable-applications&quot;&gt;ExecuGen: What You Get is More Than What You See - An End-to-End Agent System for Transforming Technical Content into Executable Applications&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;Abstract:&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
We present ExecuGen, a novel end-to-end agent system that transforms technical blog content into executable applications. ExecuGen redefines the traditional &amp;quot;What You See Is What You Get&amp;quot; paradigm by enabling users to obtain functional implementations directly from technical documentation—providing more than what is merely visible on screen. The system consists of a browser extension (ExecuGen Extractor) that extracts content from technical blogs, a code generation component (ExecuGen Core) that understands and translates this content into executable code, and a distributed runtime environment (ExecuGen Runtime) that compiles, executes, and deploys the generated applications. To address performance challenges, we introduce an innovative Docker pool and container preheating mechanism within a Kubernetes cluster architecture. Comprehensive evaluation on 300 technical blog posts and 100 code repositories demonstrates that ExecuGen achieves higher completion rates and faster execution times compared to state-of-the-art systems. By bridging the gap between reading technical content and experiencing functional implementations, ExecuGen represents a significant advancement in intelligent agent systems for software development and technical education.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Keywords:&lt;&#x2F;strong&gt; Intelligent Agents, Code Generation, Container Orchestration, Technical Documentation, Software Automation&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;Software developers regularly consult technical blogs to learn about new technologies, algorithms, and programming techniques. However, understanding and implementing concepts from these articles often requires significant manual effort, creating a substantial gap between knowledge acquisition and practical implementation. This disconnect represents a fundamental limitation in how developers interact with technical content—requiring them to tediously translate written explanations into functional code.&lt;&#x2F;p&gt;
&lt;p&gt;Traditional approaches to software development involve reading documentation, understanding concepts, and manually implementing solutions. While recent advancements in code generation have improved this workflow, there remains a significant gap between content consumption and code execution. Existing tools often operate in isolation, requiring developers to switch between reading platforms and development environments, disrupting the learning flow and reducing productivity.&lt;&#x2F;p&gt;
&lt;p&gt;In this paper, we introduce ExecuGen, an end-to-end agent system that transforms technical blog content into executable applications. ExecuGen provides a seamless bridge between reading about technology and experiencing it firsthand. When browsing technical content, users can activate the ExecuGen Extractor browser extension to analyze the current page, extract relevant technical information, and transmit it to the ExecuGen Core. The Core component generates appropriate code, which is then compiled, executed, and deployed by the ExecuGen Runtime, ultimately providing the user with a functional implementation of the concepts described in the original content.&lt;&#x2F;p&gt;
&lt;p&gt;The key contributions of our work include:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;A novel end-to-end system architecture&lt;&#x2F;strong&gt; that seamlessly bridges technical content consumption and code execution&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A distributed agent-based design&lt;&#x2F;strong&gt; that separates content extraction, code generation, and execution into loosely coupled components&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;An innovative Docker pool and container preheating mechanism&lt;&#x2F;strong&gt; that significantly improves application startup and execution time&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A comprehensive evaluation&lt;&#x2F;strong&gt; on diverse datasets demonstrating ExecuGen&#x27;s effectiveness across various technical domains and content types&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;By transforming &amp;quot;what you see&amp;quot; (technical blog content) into &amp;quot;more than what you get&amp;quot; (functional applications), ExecuGen represents a significant advancement in how developers interact with technical information. We believe this approach has broad implications for technical education, documentation, and software development workflows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-related-work&quot;&gt;2. Related Work&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;2-1-code-generation-from-natural-language&quot;&gt;2.1 Code Generation from Natural Language&lt;&#x2F;h3&gt;
&lt;p&gt;Recent advances in large language models (LLMs) have enabled increasingly sophisticated code generation from natural language descriptions. Systems like GitHub Copilot [1] and other code-oriented LLMs have demonstrated impressive capabilities in translating natural language specifications into code snippets. However, these systems typically focus on generating code fragments rather than complete, executable applications.&lt;&#x2F;p&gt;
&lt;p&gt;Manus [2] represents a step toward more comprehensive code generation, offering an agent-based approach for creating applications from specifications. While effective for certain use cases, Manus lacks integration with existing technical content and requires users to explicitly formulate requirements. Other research has explored structured approaches to code generation [3, 4], but these typically require specialized inputs rather than working with arbitrary technical content.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-2-browser-extensions-for-developer-productivity&quot;&gt;2.2 Browser Extensions for Developer Productivity&lt;&#x2F;h3&gt;
&lt;p&gt;Browser extensions have become an important component of the modern developer toolset. Extensions like StackOverflow&#x27;s code snippet integration [5] and GitHub&#x27;s code navigation tools [6] enhance the browsing experience by providing contextual information and functionality. However, most existing extensions focus on augmenting the reading experience rather than transforming content into executable artifacts.&lt;&#x2F;p&gt;
&lt;p&gt;Some research has explored more interactive extensions [7, 8] that provide executable code snippets within documentation. These approaches typically rely on predefined examples rather than dynamically generating code from arbitrary content. ExecuGen builds upon this research by creating a more comprehensive and flexible system for content-to-code transformation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-3-container-orchestration-and-runtime-environments&quot;&gt;2.3 Container Orchestration and Runtime Environments&lt;&#x2F;h3&gt;
&lt;p&gt;Container orchestration platforms such as Kubernetes [9] have revolutionized application deployment and management. Research in this area has explored automated scaling [10], service mesh architectures [11], and efficient resource allocation [12]. However, few studies have addressed the specific challenges of container management for dynamically generated applications.&lt;&#x2F;p&gt;
&lt;p&gt;The concept of container preheating has been explored in different contexts [13, 14], particularly for serverless computing environments. These approaches typically focus on reducing cold-start latency for predetermined function types rather than supporting dynamically generated applications. Our Docker pool and preheating mechanism extends these concepts to support the diverse and unpredictable nature of applications generated from technical content.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-4-end-to-end-agent-systems&quot;&gt;2.4 End-to-End Agent Systems&lt;&#x2F;h3&gt;
&lt;p&gt;Agent-based systems have been applied to various software engineering tasks, including requirements analysis [15], testing [16], and deployment [17]. These systems typically focus on specific phases of the software lifecycle rather than providing an integrated solution across content consumption, code generation, and execution.&lt;&#x2F;p&gt;
&lt;p&gt;Recent work on autonomous coding agents [18, 19] has demonstrated the potential for more integrated approaches. However, these systems generally assume a development-focused workflow rather than bridging technical content consumption with code execution. ExecuGen builds upon this research by providing a more comprehensive agent-based solution that spans the entire workflow from content consumption to application execution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-execugen-system-architecture&quot;&gt;3. ExecuGen System Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;ExecuGen is designed as a distributed, agent-based system that seamlessly transforms technical content into executable applications. The architecture consists of three primary components: ExecuGen Extractor, ExecuGen Core, and ExecuGen Runtime, orchestrated within a Kubernetes cluster environment. Figure 1 provides an overview of the system architecture.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-1-overall-architecture&quot;&gt;3.1 Overall Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;The ExecuGen system follows an agent-based architecture where distinct components collaborate to transform technical content into executable applications. The workflow proceeds as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The user activates the ExecuGen Extractor while viewing a technical blog&lt;&#x2F;li&gt;
&lt;li&gt;The Extractor analyzes and extracts relevant content, transmitting it to the ExecuGen Core&lt;&#x2F;li&gt;
&lt;li&gt;The Core component processes the content, generating appropriate code&lt;&#x2F;li&gt;
&lt;li&gt;The ExecuGen Runtime compiles, executes, and deploys the generated code&lt;&#x2F;li&gt;
&lt;li&gt;The user receives a URL to access the deployed application&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This agent-based design allows each component to focus on specific responsibilities while maintaining loose coupling through well-defined interfaces. Communication between components occurs via secure API endpoints, with message queues handling asynchronous processing for improved scalability.&lt;&#x2F;p&gt;
&lt;p&gt;The entire system is deployed within a Kubernetes cluster, which provides robust orchestration, scaling, and failure recovery capabilities. The cluster architecture enables efficient resource allocation across components, particularly for the computationally intensive code generation and execution processes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-2-execugen-extractor&quot;&gt;3.2 ExecuGen Extractor&lt;&#x2F;h3&gt;
&lt;p&gt;The ExecuGen Extractor is implemented as a browser extension compatible with major browsers (Chrome, Firefox, Edge). It consists of three main modules:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content Analysis Module&lt;&#x2F;strong&gt;: Identifies and extracts relevant technical content from the current webpage, including code snippets, algorithms, technical descriptions, and contextual information.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content Transformation Module&lt;&#x2F;strong&gt;: Processes the extracted content into a structured format suitable for transmission to the ExecuGen Core. This includes identifying programming languages, separating code from explanatory text, and preserving important contextual information.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User Interface Module&lt;&#x2F;strong&gt;: Provides an intuitive sidebar interface that allows users to initiate the extraction process, monitor progress, and access the resulting application.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The Extractor employs several techniques to accurately identify and extract relevant content:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DOM traversal and analysis to identify content structure&lt;&#x2F;li&gt;
&lt;li&gt;Language detection for code snippets&lt;&#x2F;li&gt;
&lt;li&gt;Semantic analysis of surrounding text to establish context&lt;&#x2F;li&gt;
&lt;li&gt;Metadata extraction from the webpage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After processing, the structured content is securely transmitted to the ExecuGen Core via authenticated API calls.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-3-execugen-core&quot;&gt;3.3 ExecuGen Core&lt;&#x2F;h3&gt;
&lt;p&gt;The ExecuGen Core serves as the central intelligence of the system, transforming extracted content into executable code. It consists of four primary modules:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content Understanding Module&lt;&#x2F;strong&gt;: Analyzes the structured content received from the Extractor, identifying key concepts, requirements, and implementation details.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Generation Module&lt;&#x2F;strong&gt;: Utilizes advanced language models to generate appropriate code based on the understood content. This module selects appropriate programming languages, frameworks, and libraries based on the content analysis.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Verification Module&lt;&#x2F;strong&gt;: Performs static analysis and validation of the generated code to ensure correctness, completeness, and security.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Orchestration Module&lt;&#x2F;strong&gt;: Manages the overall workflow, including communication with the Extractor and Runtime components, handling error conditions, and providing status updates.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The Core component employs a multi-stage processing pipeline that progressively refines the understanding of the content and the corresponding code generation:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Initial content analysis to identify core concepts and requirements&lt;&#x2F;li&gt;
&lt;li&gt;Generation of high-level architecture and component design&lt;&#x2F;li&gt;
&lt;li&gt;Detailed implementation of individual components&lt;&#x2F;li&gt;
&lt;li&gt;Integration of components into a cohesive application&lt;&#x2F;li&gt;
&lt;li&gt;Verification and optimization of the generated code&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This progressive refinement approach helps ensure that the generated application accurately reflects the concepts presented in the original content while maintaining code quality and security.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-4-execugen-runtime&quot;&gt;3.4 ExecuGen Runtime&lt;&#x2F;h3&gt;
&lt;p&gt;The ExecuGen Runtime handles the compilation, execution, and deployment of applications generated by the Core component. It consists of three primary modules:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build System&lt;&#x2F;strong&gt;: Compiles and packages the generated code, managing dependencies and build configurations for various programming languages and frameworks.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Execution Environment&lt;&#x2F;strong&gt;: Provides containerized environments for running the compiled applications, ensuring isolation, security, and resource management.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deployment Manager&lt;&#x2F;strong&gt;: Configures networking, routes, and access control for deployed applications, providing users with accessible URLs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The Runtime leverages container technology to provide isolated execution environments for generated applications. Each application is deployed within its own container, with appropriate resource limits and security constraints to ensure safe execution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-5-resource-scheduling-and-docker-pool&quot;&gt;3.5 Resource Scheduling and Docker Pool&lt;&#x2F;h3&gt;
&lt;p&gt;A key innovation in ExecuGen is our Docker pool and container preheating mechanism, which significantly improves application startup and execution time. Traditional container-based approaches suffer from cold start issues, where container initialization introduces significant latency. Our approach addresses this challenge through several techniques:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Docker Pool Management&lt;&#x2F;strong&gt;: We maintain a pool of pre-initialized container images for common runtime environments (Python, JavaScript, Java, etc.). These base images include frequently used libraries and frameworks, reducing initialization time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Container Preheating&lt;&#x2F;strong&gt;: Based on content analysis in the early stages of processing, we predict the likely runtime requirements and proactively initialize appropriate containers from the pool. This preheating occurs concurrently with code generation, ensuring that a suitable environment is ready when code execution is required.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Prediction&lt;&#x2F;strong&gt;: We employ machine learning techniques to predict the resource requirements (CPU, memory, disk) for generated applications based on content characteristics. This enables more efficient resource allocation and container placement within the Kubernetes cluster.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Adaptive Scaling&lt;&#x2F;strong&gt;: The system continuously monitors resource utilization and adjusts the size and composition of the Docker pool based on observed usage patterns. This ensures efficient resource utilization while maintaining responsive performance.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Figure 2 illustrates the Docker pool and preheating mechanism, highlighting how containers are managed throughout the application lifecycle.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-implementation&quot;&gt;4. Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;This section describes the implementation details of the ExecuGen system, focusing on key algorithms, optimization techniques, and integration approaches.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-1-content-extraction-and-understanding&quot;&gt;4.1 Content Extraction and Understanding&lt;&#x2F;h3&gt;
&lt;p&gt;The content extraction process involves several steps to accurately identify and process technical content from blog posts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DOM Analysis&lt;&#x2F;strong&gt;: The Extractor employs a hierarchical DOM traversal algorithm to identify content sections, distinguishing between explanatory text, code snippets, images, and other elements. This analysis considers HTML structure, class names, and common patterns used in technical blogs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Identification&lt;&#x2F;strong&gt;: Code snippets are identified through a combination of HTML markup (e.g., &lt;code&gt;&amp;lt;pre&amp;gt;&lt;&#x2F;code&gt;, &lt;code&gt;&amp;lt;code&amp;gt;&lt;&#x2F;code&gt; tags), syntax highlighting elements, and text pattern analysis. For unmarked code, we employ a language identification model that achieves 94% accuracy across 15 common programming languages.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Context Association&lt;&#x2F;strong&gt;: To maintain relationships between explanatory text and code snippets, we implement a proximity-based association algorithm that links related content elements. This contextual information is critical for accurate code generation, as it provides intent and explanation for code fragments.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Knowledge Graph Construction&lt;&#x2F;strong&gt;: The extracted content is organized into a knowledge graph that represents concepts, relationships, and implementation details. This structured representation facilitates more accurate code generation by providing a coherent view of the technical concepts.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The content understanding algorithm employs a multi-pass approach:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;analyze_content&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extracted_content&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# First pass: Identify major components and their relationships
&lt;&#x2F;span&gt;&lt;span&gt;    components = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;identify_components&lt;&#x2F;span&gt;&lt;span&gt;(extracted_content)
&lt;&#x2F;span&gt;&lt;span&gt;    relationships = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extract_relationships&lt;&#x2F;span&gt;&lt;span&gt;(components, extracted_content)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Second pass: Extract implementation details
&lt;&#x2F;span&gt;&lt;span&gt;    implementation_details = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extract_implementation_details&lt;&#x2F;span&gt;&lt;span&gt;(components, relationships, extracted_content)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Third pass: Validate consistency and completeness
&lt;&#x2F;span&gt;&lt;span&gt;    issues = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validate_consistency&lt;&#x2F;span&gt;&lt;span&gt;(components, relationships, implementation_details)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;issues:
&lt;&#x2F;span&gt;&lt;span&gt;        components, relationships, implementation_details = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve_issues&lt;&#x2F;span&gt;&lt;span&gt;(issues, extracted_content)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Construct knowledge graph
&lt;&#x2F;span&gt;&lt;span&gt;    knowledge_graph = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;construct_knowledge_graph&lt;&#x2F;span&gt;&lt;span&gt;(components, relationships, implementation_details)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;knowledge_graph
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This algorithm achieves 89% accuracy in correctly identifying key technical concepts and their relationships across our test dataset.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-2-code-generation-strategies&quot;&gt;4.2 Code Generation Strategies&lt;&#x2F;h3&gt;
&lt;p&gt;The code generation process leverages advanced language models with domain-specific optimizations for software development. The generation strategy follows these steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Architecture Planning&lt;&#x2F;strong&gt;: Based on the knowledge graph, the system first generates a high-level architecture plan that outlines major components, their responsibilities, and interactions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Progressive Implementation&lt;&#x2F;strong&gt;: Components are implemented in order of dependency, starting with core data structures and utilities, then moving to business logic and finally user interfaces.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency Enforcement&lt;&#x2F;strong&gt;: A dedicated consistency checker ensures naming conventions, coding standards, and architectural patterns are maintained throughout the generated code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Testing Logic Generation&lt;&#x2F;strong&gt;: For each component, appropriate unit tests are generated to verify correctness and document expected behavior.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The code generation employs a specialized prompting technique that we term &amp;quot;Layered Contextual Prompting&amp;quot;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_code&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;knowledge_graph&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;framework&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Generate high-level architecture
&lt;&#x2F;span&gt;&lt;span&gt;    architecture_prompt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;construct_architecture_prompt&lt;&#x2F;span&gt;&lt;span&gt;(knowledge_graph)
&lt;&#x2F;span&gt;&lt;span&gt;    architecture = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_with_model&lt;&#x2F;span&gt;&lt;span&gt;(architecture_prompt)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Generate individual components
&lt;&#x2F;span&gt;&lt;span&gt;    components = []
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extract_components&lt;&#x2F;span&gt;&lt;span&gt;(architecture):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Create component-specific prompt with architectural context
&lt;&#x2F;span&gt;&lt;span&gt;        component_prompt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;construct_component_prompt&lt;&#x2F;span&gt;&lt;span&gt;(component, architecture, knowledge_graph)
&lt;&#x2F;span&gt;&lt;span&gt;        component_code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_with_model&lt;&#x2F;span&gt;&lt;span&gt;(component_prompt)
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Refine with consistency enforcement
&lt;&#x2F;span&gt;&lt;span&gt;        component_code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enforce_consistency&lt;&#x2F;span&gt;&lt;span&gt;(component_code, components, architecture)
&lt;&#x2F;span&gt;&lt;span&gt;        components.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(component_code)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Generate integration code
&lt;&#x2F;span&gt;&lt;span&gt;    integration_prompt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;construct_integration_prompt&lt;&#x2F;span&gt;&lt;span&gt;(components, architecture, knowledge_graph)
&lt;&#x2F;span&gt;&lt;span&gt;    integration_code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_with_model&lt;&#x2F;span&gt;&lt;span&gt;(integration_prompt)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Generate tests
&lt;&#x2F;span&gt;&lt;span&gt;    test_code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_tests&lt;&#x2F;span&gt;&lt;span&gt;(components, integration_code, knowledge_graph)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assemble_application&lt;&#x2F;span&gt;&lt;span&gt;(components, integration_code, test_code)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach ensures that each generated component maintains awareness of the overall architecture and other components, resulting in more coherent and integrated applications.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-3-docker-pool-management&quot;&gt;4.3 Docker Pool Management&lt;&#x2F;h3&gt;
&lt;p&gt;The Docker pool management subsystem is implemented as a custom Kubernetes operator that manages the lifecycle of preheated containers. The key components include:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pool Manager&lt;&#x2F;strong&gt;: Maintains pools of pre-initialized containers based on runtime type (Python, Node.js, Java, etc.) and common library combinations.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Predictive Initializer&lt;&#x2F;strong&gt;: Analyzes incoming content to predict required runtime environments and proactively initializes appropriate containers.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Monitor&lt;&#x2F;strong&gt;: Tracks resource utilization across the cluster and adjusts pool sizes accordingly.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The container preheating algorithm operates as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;manage_container_pool&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;current_workload&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource_availability&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Analyze current workload patterns
&lt;&#x2F;span&gt;&lt;span&gt;    language_distribution = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;analyze_language_distribution&lt;&#x2F;span&gt;&lt;span&gt;(current_workload)
&lt;&#x2F;span&gt;&lt;span&gt;    resource_usage = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;analyze_resource_usage&lt;&#x2F;span&gt;&lt;span&gt;(current_workload)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Predict future needs based on historical patterns
&lt;&#x2F;span&gt;&lt;span&gt;    predicted_needs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;predict_container_needs&lt;&#x2F;span&gt;&lt;span&gt;(language_distribution, historical_patterns)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Adjust pool sizes based on predictions and available resources
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;container_type, predicted_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;predicted_needs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        current_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_current_pool_size&lt;&#x2F;span&gt;&lt;span&gt;(container_type)
&lt;&#x2F;span&gt;&lt;span&gt;        target_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculate_target_count&lt;&#x2F;span&gt;&lt;span&gt;(predicted_count, resource_availability)
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;current_count &amp;lt; target_count:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Warm up additional containers
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialize_containers&lt;&#x2F;span&gt;&lt;span&gt;(container_type, target_count - current_count)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;current_count &amp;gt; target_count:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Reduce pool size
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decommission_containers&lt;&#x2F;span&gt;&lt;span&gt;(container_type, current_count - target_count)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Return updated pool status
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_pool_status&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To optimize container initialization, we implement a layered approach where base images contain commonly used libraries, and additional libraries are dynamically installed based on specific application requirements. This balances the benefits of pre-initialization with the flexibility needed for diverse applications.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-4-inter-component-communication&quot;&gt;4.4 Inter-Component Communication&lt;&#x2F;h3&gt;
&lt;p&gt;Communication between ExecuGen components is implemented using a combination of synchronous REST APIs and asynchronous message queues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extractor to Core&lt;&#x2F;strong&gt;: Uses authenticated REST API calls to transmit extracted content and receive status updates.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Core to Runtime&lt;&#x2F;strong&gt;: Uses a combination of message queues for task distribution and REST APIs for status queries and control operations.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Runtime to Core&lt;&#x2F;strong&gt;: Reports execution status and results via callback APIs and status streams.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;All communication is secured using TLS encryption and token-based authentication, with rate limiting and circuit breakers to ensure system stability under load.&lt;&#x2F;p&gt;
&lt;p&gt;The message format uses a standardized JSON schema that includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Content metadata (source URL, extraction timestamp)&lt;&#x2F;li&gt;
&lt;li&gt;Structured content representation (knowledge graph)&lt;&#x2F;li&gt;
&lt;li&gt;Processing directives and preferences&lt;&#x2F;li&gt;
&lt;li&gt;System-generated identifiers for tracking&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This structured communication approach enables loose coupling between components while maintaining end-to-end traceability of processing tasks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-evaluation&quot;&gt;5. Evaluation&lt;&#x2F;h2&gt;
&lt;p&gt;We conducted extensive evaluations to assess ExecuGen&#x27;s effectiveness, performance, and reliability across diverse technical content and runtime environments.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-1-datasets-and-methodology&quot;&gt;5.1 Datasets and Methodology&lt;&#x2F;h3&gt;
&lt;p&gt;Our evaluation utilized two primary datasets:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blog Dataset&lt;&#x2F;strong&gt;: 300 technical blog posts from CSDN, covering web development, data science, mobile development, systems programming, and DevOps topics. Posts were selected to represent varying levels of complexity, from introductory tutorials to advanced technical discussions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Repository Dataset&lt;&#x2F;strong&gt;: 100 open-source code repositories from GitHub, selected across similar domains as the blog dataset. These repositories provided real-world code examples for comparison with ExecuGen-generated applications.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For each evaluation, we measured:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Completion Rate&lt;&#x2F;strong&gt;: Percentage of content items successfully transformed into running applications&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Functional Correctness&lt;&#x2F;strong&gt;: Degree to which generated applications properly implemented the described functionality&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Execution Time&lt;&#x2F;strong&gt;: Time from content extraction to deployed application&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Resource Utilization&lt;&#x2F;strong&gt;: CPU, memory, and storage requirements during processing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Tests were conducted in a Kubernetes cluster consisting of 8 nodes, each with 16 vCPUs and 64GB RAM, running across three geographic regions for latency evaluation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-2-content-transformation-results&quot;&gt;5.2 Content Transformation Results&lt;&#x2F;h3&gt;
&lt;p&gt;Table 1 presents the completion rates and functional correctness scores across different technical domains.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Domain&lt;&#x2F;th&gt;&lt;th&gt;Completion Rate&lt;&#x2F;th&gt;&lt;th&gt;Functional Correctness&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Web Development&lt;&#x2F;td&gt;&lt;td&gt;92%&lt;&#x2F;td&gt;&lt;td&gt;87%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Data Science&lt;&#x2F;td&gt;&lt;td&gt;88%&lt;&#x2F;td&gt;&lt;td&gt;82%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Mobile Development&lt;&#x2F;td&gt;&lt;td&gt;84%&lt;&#x2F;td&gt;&lt;td&gt;79%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Systems Programming&lt;&#x2F;td&gt;&lt;td&gt;76%&lt;&#x2F;td&gt;&lt;td&gt;72%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DevOps&lt;&#x2F;td&gt;&lt;td&gt;89%&lt;&#x2F;td&gt;&lt;td&gt;84%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Overall&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;86%&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;81%&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Analysis of failure cases revealed that most incompletions were due to:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Highly specialized dependencies not available in standard repositories (38%)&lt;&#x2F;li&gt;
&lt;li&gt;Ambiguous or incomplete technical descriptions (31%)&lt;&#x2F;li&gt;
&lt;li&gt;Complex multi-stage build processes (19%)&lt;&#x2F;li&gt;
&lt;li&gt;Other issues (12%)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Functional correctness was evaluated through a combination of automated test suite execution and manual verification by domain experts. The results demonstrate that ExecuGen successfully transforms most technical content into working applications, with particularly strong performance in web development and DevOps domains.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-3-performance-analysis&quot;&gt;5.3 Performance Analysis&lt;&#x2F;h3&gt;
&lt;p&gt;Figure 3 illustrates the end-to-end processing time for applications of varying complexity, comparing standard container initialization with our Docker pool and preheating approach.&lt;&#x2F;p&gt;
&lt;p&gt;The results demonstrate that our Docker pool and preheating mechanism reduces average application deployment time by 72% compared to standard container initialization. This improvement is particularly pronounced for complex applications, where preheating provides up to 86% reduction in deployment time.&lt;&#x2F;p&gt;
&lt;p&gt;Resource utilization measurements showed that the Docker pool consumes approximately 18% additional cluster resources during idle periods, but this overhead is justified by the significant performance improvements during active use.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-4-comparison-with-existing-systems&quot;&gt;5.4 Comparison with Existing Systems&lt;&#x2F;h3&gt;
&lt;p&gt;We compared ExecuGen with two state-of-the-art systems:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Manus&lt;&#x2F;strong&gt;: A popular agent-based code generation system&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A popular open-source code generation framework&lt;&#x2F;strong&gt; (which we&#x27;ll refer to as Framework-X)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Table 2 presents the comparative results across key metrics.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Metric&lt;&#x2F;th&gt;&lt;th&gt;ExecuGen&lt;&#x2F;th&gt;&lt;th&gt;Manus&lt;&#x2F;th&gt;&lt;th&gt;Framework-X&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Completion Rate&lt;&#x2F;td&gt;&lt;td&gt;86%&lt;&#x2F;td&gt;&lt;td&gt;74%&lt;&#x2F;td&gt;&lt;td&gt;69%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Avg. Execution Time (s)&lt;&#x2F;td&gt;&lt;td&gt;42&lt;&#x2F;td&gt;&lt;td&gt;118&lt;&#x2F;td&gt;&lt;td&gt;95&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Resource Efficiency*&lt;&#x2F;td&gt;&lt;td&gt;0.76&lt;&#x2F;td&gt;&lt;td&gt;0.65&lt;&#x2F;td&gt;&lt;td&gt;0.72&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Multi-file Support&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;td&gt;Limited&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Container Integration&lt;&#x2F;td&gt;&lt;td&gt;Native&lt;&#x2F;td&gt;&lt;td&gt;Manual&lt;&#x2F;td&gt;&lt;td&gt;Limited&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;*Resource Efficiency: Applications successfully deployed per GB of RAM-hour&lt;&#x2F;p&gt;
&lt;p&gt;ExecuGen outperformed both comparison systems across all metrics, with particularly significant advantages in execution time (64% faster than Manus) and completion rate (17% higher than Manus, 25% higher than Framework-X).&lt;&#x2F;p&gt;
&lt;p&gt;The most substantial differences were observed for complex applications requiring multi-file codebases and sophisticated runtime environments, where ExecuGen&#x27;s container preheating and comprehensive code generation approach provided significant advantages.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-5-model-performance-analysis&quot;&gt;5.5 Model Performance Analysis&lt;&#x2F;h3&gt;
&lt;p&gt;We evaluated ExecuGen&#x27;s performance with different language models to understand the impact of model selection on generation quality and resource requirements. Table 3 presents the results for three different model configurations.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Model Configuration&lt;&#x2F;th&gt;&lt;th&gt;Completion Rate&lt;&#x2F;th&gt;&lt;th&gt;Functional Correctness&lt;&#x2F;th&gt;&lt;th&gt;Avg. Generation Time (s)&lt;&#x2F;th&gt;&lt;th&gt;Cost per Application ($)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Small (7B parameters)&lt;&#x2F;td&gt;&lt;td&gt;78%&lt;&#x2F;td&gt;&lt;td&gt;73%&lt;&#x2F;td&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;0.04&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Medium (13B parameters)&lt;&#x2F;td&gt;&lt;td&gt;84%&lt;&#x2F;td&gt;&lt;td&gt;79%&lt;&#x2F;td&gt;&lt;td&gt;36&lt;&#x2F;td&gt;&lt;td&gt;0.09&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Large (70B parameters)&lt;&#x2F;td&gt;&lt;td&gt;86%&lt;&#x2F;td&gt;&lt;td&gt;81%&lt;&#x2F;td&gt;&lt;td&gt;45&lt;&#x2F;td&gt;&lt;td&gt;0.22&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;These results demonstrate a clear correlation between model size and generation quality, but with diminishing returns as model size increases. The medium configuration provides an attractive balance between performance and cost, achieving 84% completion rate at less than half the cost of the large configuration.&lt;&#x2F;p&gt;
&lt;p&gt;Our analysis suggests that domain-specific fine-tuning of smaller models may be a more cost-effective approach than simply using larger general-purpose models. This represents an important direction for future work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;6-discussion-and-future-work&quot;&gt;6. Discussion and Future Work&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;6-1-current-limitations&quot;&gt;6.1 Current Limitations&lt;&#x2F;h3&gt;
&lt;p&gt;Despite ExecuGen&#x27;s strong performance, several limitations remain:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ambiguity Handling&lt;&#x2F;strong&gt;: The system sometimes struggles with highly ambiguous or incomplete technical descriptions, requiring human intervention to resolve uncertainties.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Specialized Domains&lt;&#x2F;strong&gt;: Performance is lower for highly specialized technical domains with complex dependencies or non-standard development practices.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User Customization&lt;&#x2F;strong&gt;: The current implementation offers limited opportunities for users to customize the generated applications according to their preferences or requirements.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Intensity&lt;&#x2F;strong&gt;: The system requires significant computational resources, particularly for the language model components, which may limit deployment options.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Long-Term Maintenance&lt;&#x2F;strong&gt;: Generated applications may require ongoing maintenance and updates, which is currently beyond the scope of ExecuGen.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These limitations highlight important areas for future research and development.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-2-future-directions&quot;&gt;6.2 Future Directions&lt;&#x2F;h3&gt;
&lt;p&gt;Several promising directions for future work include:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interactive Refinement&lt;&#x2F;strong&gt;: Developing mechanisms for users to provide feedback and guidance during the generation process, enabling collaborative refinement of generated applications.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Incremental Updates&lt;&#x2F;strong&gt;: Extending ExecuGen to support updating generated applications when the source content changes, maintaining synchronization between documentation and implementation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cross-Source Integration&lt;&#x2F;strong&gt;: Enhancing the system to combine information from multiple content sources, enabling more comprehensive application generation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Efficiency Optimizations&lt;&#x2F;strong&gt;: Investigating techniques to reduce computational requirements, such as distilled models, caching of common generation patterns, and more efficient container management.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Expanded Content Types&lt;&#x2F;strong&gt;: Extending support to additional content formats, including academic papers, video tutorials, and interactive documentation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enterprise Integration&lt;&#x2F;strong&gt;: Developing features for integration with enterprise development workflows, including CI&#x2F;CD pipelines, code review processes, and governance frameworks.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;6-3-broader-implications&quot;&gt;6.3 Broader Implications&lt;&#x2F;h3&gt;
&lt;p&gt;ExecuGen represents a significant step toward bridging the gap between technical documentation and functional implementation. This approach has several broader implications:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Educational Impact&lt;&#x2F;strong&gt;: By enabling immediate experimentation with described techniques, ExecuGen can enhance technical education and reduce barriers to learning new technologies.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation Practices&lt;&#x2F;strong&gt;: The system may influence how technical content is created, encouraging more precise and implementation-focused documentation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Developer Productivity&lt;&#x2F;strong&gt;: By automating the translation from concept to implementation, ExecuGen could significantly enhance developer productivity, particularly for exploration and prototyping activities.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Knowledge Transfer&lt;&#x2F;strong&gt;: The system facilitates more effective knowledge transfer within organizations by making it easier to implement techniques described in internal documentation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These implications suggest that systems like ExecuGen may play an increasingly important role in the software development ecosystem, complementing traditional development approaches with automated content-to-code transformation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;7-conclusion&quot;&gt;7. Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this paper, we presented ExecuGen, an end-to-end agent system that transforms technical blog content into executable applications. By bridging the gap between technical documentation and functional implementation, ExecuGen redefines the traditional &amp;quot;What You See Is What You Get&amp;quot; paradigm—providing users with more than what they initially see.&lt;&#x2F;p&gt;
&lt;p&gt;Our comprehensive evaluation demonstrated ExecuGen&#x27;s effectiveness across diverse technical domains, achieving an 86% completion rate and 81% functional correctness score on a dataset of 300 technical blog posts. The system&#x27;s innovative Docker pool and container preheating mechanism significantly improves performance, reducing application deployment time by 72% compared to standard approaches.&lt;&#x2F;p&gt;
&lt;p&gt;ExecuGen represents a significant advancement in how developers interact with technical content, transforming passive reading into active experimentation and learning. While limitations remain, the system demonstrates the potential for agent-based approaches to bridge the gap between documentation and implementation, enhancing both technical education and developer productivity.&lt;&#x2F;p&gt;
&lt;p&gt;As the line between natural language and code continues to blur, systems like ExecuGen point toward a future where the boundary between reading about technology and implementing it becomes increasingly seamless—a future where what you get is indeed much more than what you see.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;[1] Chen, M., Tworek, J., Jun, H., et al. (2023). &amp;quot;Evaluating Large Language Models Trained on Code.&amp;quot; arXiv preprint arXiv:2107.03374.&lt;&#x2F;p&gt;
&lt;p&gt;[2] Davies, A., Wang, L., Zhang, K., et al. (2024). &amp;quot;Manus: Continuous Integration for AI-Generated Software.&amp;quot; In Proceedings of the 46th International Conference on Software Engineering (ICSE &#x27;24).&lt;&#x2F;p&gt;
&lt;p&gt;[3] Li, Y., Choi, D., Chung, J., et al. (2023). &amp;quot;Structured Code Generation using Large Language Models.&amp;quot; In Proceedings of the 38th IEEE&#x2F;ACM International Conference on Automated Software Engineering.&lt;&#x2F;p&gt;
&lt;p&gt;[4] Nijkamp, E., Pang, B., Hayashi, H., et al. (2023). &amp;quot;CodeGen: An Open Large Language Model for Code with Multi-Turn Program Synthesis.&amp;quot; In International Conference on Learning Representations.&lt;&#x2F;p&gt;
&lt;p&gt;[5] Bragdon, A., Zeleznik, R., et al. (2023). &amp;quot;Code, Query, and Annotations: A Unified Approach to Developer Productivity.&amp;quot; In CHI Conference on Human Factors in Computing Systems.&lt;&#x2F;p&gt;
&lt;p&gt;[6] Miller, G., Zheng, K., Gupta, R. (2024). &amp;quot;Seamless Navigation in Software Documentation using Browser Extensions.&amp;quot; In Web Conference 2024 (WWW &#x27;24).&lt;&#x2F;p&gt;
&lt;p&gt;[7] Johnson, T., Hassan, S., Gibson, P. (2023). &amp;quot;Interactive Code Examples in Technical Documentation.&amp;quot; In 2023 IEEE Symposium on Visual Languages and Human-Centric Computing.&lt;&#x2F;p&gt;
&lt;p&gt;[8] Wang, X., Chang, S., Peng, M. (2024). &amp;quot;Living Documentation: Embedding Executable Examples in Technical Content.&amp;quot; In Proceedings of the 2024 CHI Conference on Human Factors in Computing Systems.&lt;&#x2F;p&gt;
&lt;p&gt;[9] Burns, B., Grant, B., Oppenheimer, D., et al. (2016). &amp;quot;Borg, Omega, and Kubernetes: Lessons Learned from Three Container-Management Systems Over a Decade.&amp;quot; ACM Queue, 14(1), 70-93.&lt;&#x2F;p&gt;
&lt;p&gt;[10] Kim, Y., Lin, J., Park, Y. (2023). &amp;quot;Predictive Autoscaling in Kubernetes Using Machine Learning.&amp;quot; IEEE Transactions on Cloud Computing.&lt;&#x2F;p&gt;
&lt;p&gt;[11] Williams, P., Jamshidi, P., Shahin, M. (2024). &amp;quot;Service Mesh Architecture Patterns for Microservice Communication.&amp;quot; IEEE Software.&lt;&#x2F;p&gt;
&lt;p&gt;[12] Zhang, T., Chen, L., Liu, X. (2023). &amp;quot;Resource-Aware Container Scheduling in Kubernetes Clusters.&amp;quot; In IEEE International Conference on Cloud Computing.&lt;&#x2F;p&gt;
&lt;p&gt;[13] Martinez, J., Clement, M., Kistijantoro, A. (2023). &amp;quot;Container Preheating for Serverless Computing: A Predictive Approach.&amp;quot; In Proceedings of the 14th ACM Symposium on Cloud Computing.&lt;&#x2F;p&gt;
&lt;p&gt;[14] Nguyen, H., Wang, Z., Chang, R. (2024). &amp;quot;Reducing Cold Start Latency in Serverless Computing through Container Pool Management.&amp;quot; IEEE Transactions on Services Computing.&lt;&#x2F;p&gt;
&lt;p&gt;[15] Thompson, C., Zhu, M., Li, Y. (2023). &amp;quot;Agent-Based Requirements Analysis for Software Systems.&amp;quot; In 2023 IEEE International Requirements Engineering Conference.&lt;&#x2F;p&gt;
&lt;p&gt;[16] Adams, J., Xiao, S., White, T. (2024). &amp;quot;Autonomous Testing Agents for Complex Software Systems.&amp;quot; In 2024 IEEE&#x2F;ACM International Conference on Software Testing.&lt;&#x2F;p&gt;
&lt;p&gt;[17] Garcia, R., Patel, N., Kumar, S. (2023). &amp;quot;Deployment Agents for Continuous Delivery Pipelines.&amp;quot; In 2023 IEEE International Conference on Software Architecture.&lt;&#x2F;p&gt;
&lt;p&gt;[18] Wilson, K., Tan, M., Zhong, V. (2023). &amp;quot;Autonomous Coding Agents: A Framework for Self-Improving Code Generation.&amp;quot; In Advances in Neural Information Processing Systems 36.&lt;&#x2F;p&gt;
&lt;p&gt;[19] Peterson, A., Singh, R., Gupta, N. (2024). &amp;quot;Multi-Agent Collaboration for Software Development Tasks.&amp;quot; In 2024 IEEE&#x2F;ACM International Conference on Automated Software Engineering.&lt;&#x2F;p&gt;
&lt;p&gt;[20] Chen, X., Brown, J., Patel, S. (2024). &amp;quot;Understanding Documentation-to-Implementation Gaps in Software Development.&amp;quot; In 2024 IEEE Symposium on Visual Languages and Human-Centric Computing.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>让AI成为你的分身：Polly AI Agent的诞生</title>
        <published>2025-02-27T00:00:00+00:00</published>
        <updated>2025-02-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/build-ai-agent-polly-with-ai-tools/" type="text/html"/>
        <id>https://polly2014.github.io/build-ai-agent-polly-with-ai-tools/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;build-ai-agent-polly-with-ai-tools&#x2F;AI_Agent_Polly_Done.png&quot; alt=&quot;AI_Agent_Polly_Done&quot; &#x2F;&gt;
在人工智能快速发展的今天，如何高效构建自己的AI Agent成为了开发者们关注的焦点。本文将详细介绍如何利用GitHub Copilot和OpenHands工具快速构建一个基于DeepSeek的AI助手 - Polly。整个过程不仅高效，而且能够体验到 AI 辅助编程的强大能力。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yi-shi-yong-openhands-fang-an-jia-gou-she-ji&quot;&gt;一、使用 OpenHands 方案架构设计&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-1-cong-ideadao-planbu-dao-yi-fen-zhong&quot;&gt;1.1 从Idea到Plan不到一分钟&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;build-ai-agent-polly-with-ai-tools&#x2F;AI_Agent_Polly_Idea_To_Plan.png&quot; alt=&quot;AI_Agent_Polly&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;关于界面:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;你的设计思路非常清晰，以下是我的一些建议和扩展想法：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 基本设计
&lt;&#x2F;span&gt;&lt;span&gt;1. **标题**：`&amp;quot;You can talk with Polly&amp;quot;` 是一个很好的标题，简洁明了。
&lt;&#x2F;span&gt;&lt;span&gt;2. **输入框和发送按钮**：用户可以通过输入框输入问题，点击发送按钮后，向后端的 LLM Service 发送请求并展示回复。
&lt;&#x2F;span&gt;&lt;span&gt;3. **回复展示**：在输入框下方动态展示 Polly 的回复。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 更加 Fancy 的想法
&lt;&#x2F;span&gt;&lt;span&gt;1. **对话气泡**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 将用户输入和 Polly 的回复以对话气泡的形式展示，类似于聊天应用的界面。
&lt;&#x2F;span&gt;&lt;span&gt;   - 用户的输入在右侧显示，Polly 的回复在左侧显示。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;2. **Polly 的头像**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 在每条 Polly 的回复旁边显示一个虚拟数字人的头像，增加互动感。
&lt;&#x2F;span&gt;&lt;span&gt;   - 头像可以是一个动态的 3D 模型或 GIF，模拟 Polly 的表情变化。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;3. **语音交互**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 增加语音输入功能，用户可以通过语音与 Polly 交流。
&lt;&#x2F;span&gt;&lt;span&gt;   - Polly 的回复可以通过语音合成（TTS）播放出来。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;4. **动画效果**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 在 Polly 回复时，显示一个“正在输入...”的动画，增加真实感。
&lt;&#x2F;span&gt;&lt;span&gt;   - Polly 的头像可以在回复时做出一些动态效果，比如眨眼或点头。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;5. **主题切换**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 提供一个按钮，用户可以切换 Polly 的主题，比如“专业模式”、“幽默模式”或“科幻模式”，以改变 Polly 的回复风格。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;6. **知识图谱展示**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 如果 Polly 的回复涉及到某些知识点，可以在右侧动态生成一个知识图谱，帮助用户更直观地理解。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;7. **多语言支持**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 提供语言切换功能，用户可以选择与 Polly 用不同的语言交流。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;8. **历史记录**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 在页面上保留对话历史，用户可以随时回顾之前的对话。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;9. **个性化设置**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 用户可以自定义 Polly 的名字、头像、语音风格等，增加个性化体验。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 技术实现
&lt;&#x2F;span&gt;&lt;span&gt;- **前端**：
&lt;&#x2F;span&gt;&lt;span&gt;  - 使用 JavaScript（如 Vue.js 或 React）动态更新对话内容。
&lt;&#x2F;span&gt;&lt;span&gt;  - 使用 CSS 实现对话气泡和动画效果。
&lt;&#x2F;span&gt;&lt;span&gt;- **后端**：
&lt;&#x2F;span&gt;&lt;span&gt;  - 通过 AJAX 或 WebSocket 与 LLM Service 通信，实时获取 Polly 的回复。
&lt;&#x2F;span&gt;&lt;span&gt;- **LLM Service**：
&lt;&#x2F;span&gt;&lt;span&gt;  - Polly 的回复可以通过调用 LLM Service 的 API 实现，支持上下文对话。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;如果你觉得这些想法不错，我可以帮你实现基础功能，或者进一步设计和实现更 Fancy 的功能！你怎么看？
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;关于Agent设计：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;你的想法非常有创意！通过构建一个 **Polly Profile**，结合 DeepSeek 的服务，可以实现一个高度个性化的数字人。以下是一些改进和扩展的建议，帮助你打造一个更智能、更真实的数字人 Polly：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 1. **Polly Profile 的设计**
&lt;&#x2F;span&gt;&lt;span&gt;Polly Profile 是数字人的核心，应该包含以下几个方面的信息：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **1.1 基础信息**
&lt;&#x2F;span&gt;&lt;span&gt;- **身份**: Polly 的背景信息，例如职业、兴趣、技能等。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;我是Polly，一个热爱技术的博主，擅长编程、写作和摄影。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;- **语气和风格**: 定义 Polly 的说话风格（幽默、正式、友好等）。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;我喜欢用轻松幽默的方式与人交流。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **1.2 知识领域**
&lt;&#x2F;span&gt;&lt;span&gt;- **专业知识**: 定义 Polly 擅长的领域，例如编程、设计、心理学等。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;我对Python编程、前端开发和人工智能有深入了解。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;- **个性化知识**: 包括你的个人经历、观点和兴趣。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;我喜欢旅行，尤其是探索自然风光。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **1.3 行为规则**
&lt;&#x2F;span&gt;&lt;span&gt;- **回答策略**: 定义 Polly 如何回答问题。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;如果我不知道答案，我会坦诚告诉你，并尝试提供相关资源。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;- **情感模拟**: Polly 如何表现情感，例如高兴、同情、幽默等。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **1.4 动态学习**
&lt;&#x2F;span&gt;&lt;span&gt;- **记忆功能**: Polly 可以记住用户的偏好和历史对话。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;记住用户喜欢的主题，下次对话时主动提及。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;- **实时更新**: 通过 DeepSeek 的服务，动态获取最新知识。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 2. **技术实现建议**
&lt;&#x2F;span&gt;&lt;span&gt;为了让 Polly 更加智能和真实，可以从以下几个方面优化技术实现：
&lt;&#x2F;span&gt;&lt;span&gt;#### **2.1 Prompt Engineering**
&lt;&#x2F;span&gt;&lt;span&gt;- **多层Prompt设计**: 
&lt;&#x2F;span&gt;&lt;span&gt;  - **背景Prompt**: 定义 Polly 的身份和行为规则。
&lt;&#x2F;span&gt;&lt;span&gt;  - **上下文Prompt**: 根据用户的输入动态生成上下文。
&lt;&#x2F;span&gt;&lt;span&gt;  - **任务Prompt**: 针对特定任务（如技术支持、写作建议）生成专用Prompt。
&lt;&#x2F;span&gt;&lt;span&gt;- **示例Prompt**:
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;gt; [毛坯版]你是Polly，一个热爱技术的数字人。你擅长编程、写作和摄影。用友好和幽默的语气回答问题。如果你不知道答案，请坦诚告知并提供相关资源。 用户问题: {用户输入}. Polly的回答:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **2.2 DeepSeek 服务集成**
&lt;&#x2F;span&gt;&lt;span&gt;- **知识扩展**: 利用 DeepSeek 的服务，实时获取最新的知识和数据。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: 用户提问 &amp;quot;最近的AI技术趋势是什么？&amp;quot;，Polly 可以通过 DeepSeek 获取最新的技术文章并总结回答。
&lt;&#x2F;span&gt;&lt;span&gt;- **多模态支持**: 如果 DeepSeek 支持图片、视频等多模态数据，可以让 Polly 提供更丰富的回答形式。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **2.3 个性化记忆**
&lt;&#x2F;span&gt;&lt;span&gt;- **用户偏好存储**: 使用数据库或文件系统存储用户的偏好和历史对话。
&lt;&#x2F;span&gt;&lt;span&gt;- **动态调整**: 根据用户的反馈调整 Polly 的行为和回答风格。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **2.4 多轮对话**
&lt;&#x2F;span&gt;&lt;span&gt;- **上下文管理**: 通过对话历史，保持多轮对话的连贯性。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: 用户问 &amp;quot;你喜欢什么电影？&amp;quot; 后，接着问 &amp;quot;为什么？&amp;quot;，Polly 能理解上下文并回答。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 3. **用户体验优化**
&lt;&#x2F;span&gt;&lt;span&gt;为了让用户与 Polly 的互动更加自然，可以从以下方面优化用户体验：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **3.1 视觉呈现**
&lt;&#x2F;span&gt;&lt;span&gt;- **数字人形象**: 使用 3D 模型或动画，打造一个可视化的 Polly。
&lt;&#x2F;span&gt;&lt;span&gt;- **表情和动作**: 根据对话内容动态调整 Polly 的表情和动作。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **3.2 多渠道支持**
&lt;&#x2F;span&gt;&lt;span&gt;- **跨平台交互**: 将 Polly 集成到多个平台，例如网站、移动应用、社交媒体等。
&lt;&#x2F;span&gt;&lt;span&gt;- **语音交互**: 支持语音输入和输出，让用户可以通过语音与 Polly 交流。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **3.3 个性化推荐**
&lt;&#x2F;span&gt;&lt;span&gt;- **内容推荐**: 根据用户的兴趣，主动推荐文章、视频或工具。
&lt;&#x2F;span&gt;&lt;span&gt;- **互动游戏**: 提供一些轻松的互动功能，例如问答游戏、心理测试等。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 4. **扩展功能**
&lt;&#x2F;span&gt;&lt;span&gt;- **情感分析**: 根据用户的语气和内容，判断用户的情绪，并做出相应的回应。
&lt;&#x2F;span&gt;&lt;span&gt;- **知识图谱**: 构建一个知识图谱，帮助 Polly 理解复杂问题并提供更准确的回答。
&lt;&#x2F;span&gt;&lt;span&gt;- **社区互动**: 让用户可以与其他 Polly 用户互动，形成一个社区。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 5. **示例场景**
&lt;&#x2F;span&gt;&lt;span&gt;以下是一些 Polly 的实际应用场景：
&lt;&#x2F;span&gt;&lt;span&gt;1. **技术支持**: 用户提问 &amp;quot;如何用Python实现一个爬虫？&amp;quot;，Polly 提供代码示例和解释。
&lt;&#x2F;span&gt;&lt;span&gt;2. **生活助手**: 用户问 &amp;quot;周末有什么好玩的活动推荐？&amp;quot;，Polly 根据用户位置和兴趣推荐活动。
&lt;&#x2F;span&gt;&lt;span&gt;3. **学习伙伴**: 用户学习新知识时，Polly 提供相关资源和练习题。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 总结
&lt;&#x2F;span&gt;&lt;span&gt;通过构建一个详细的 Polly Profile，并结合 DeepSeek 的服务，你可以打造一个高度个性化、智能化的数字人 Polly。他不仅可以模拟你的知识和个性，还能通过动态学习和实时更新，持续提升自己的能力。希望这些建议对你有所帮助！如果需要进一步的技术支持，我可以协助你实现具体功能。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;1-2-jia-gou-gai-shu&quot;&gt;1.2 架构概述&lt;&#x2F;h3&gt;
&lt;p&gt;Polly AI Agent 采用了前后端分离的架构设计，主要包括以下几个部分：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;前端：基于 OpenHands 构建的聊天界面&lt;&#x2F;li&gt;
&lt;li&gt;后端：FastAPI 服务&lt;&#x2F;li&gt;
&lt;li&gt;大模型：DeepSeek API&lt;&#x2F;li&gt;
&lt;li&gt;部署：Azure Ubuntu 系统服务&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-3-ji-zhu-zhan-xuan-ze&quot;&gt;1.3 技术栈选择&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;前端：HTML&#x2F;CSS&#x2F;JavaScript&lt;&#x2F;li&gt;
&lt;li&gt;后端：Python + FastAPI&lt;&#x2F;li&gt;
&lt;li&gt;API 集成：DeepSeek API&lt;&#x2F;li&gt;
&lt;li&gt;开发工具：GitHub Copilot、VS Code、OpenHands&lt;&#x2F;li&gt;
&lt;li&gt;部署环境：Ubuntu + Systemd&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;er-openhands-gou-zao-wang-ye-qian-duan-liao-tian-gong-neng&quot;&gt;二、OpenHands 构造网页前端聊天功能&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;2-1-openhands-jie-shao&quot;&gt;2.1 OpenHands 介绍&lt;&#x2F;h3&gt;
&lt;p&gt;OpenHands 是一个开源的 AI 开发工具集，专注于帮助开发者从想法到实现的全过程。通过其强大的功能，帮助我细化了从 Idea 到 Plan 的过程，明确了前端和后端的架构设计，并丰富了 Agent Profile 的内容。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-2-qian-duan-ye-mian-gou-jian&quot;&gt;2.2 前端页面构建&lt;&#x2F;h3&gt;
&lt;p&gt;首先，我们创建一个基本的 HTML 结构：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;zh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;viewport&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;width=device-width, initial-scale=1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Polly AI 助手&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stylesheet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;openhands&#x2F;dist&#x2F;openhands.min.css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            font-family: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Arial&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, sans-serif;
&lt;&#x2F;span&gt;&lt;span&gt;            margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            background-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#f5f5f5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;chat-container &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;800px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;auto;
&lt;&#x2F;span&gt;&lt;span&gt;            padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 更多样式... *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chat-container&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Polly AI 助手&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chat-window&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;oh-chat-window&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;oh-input-container&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user-input&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;输入您的问题...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;send-button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;发送&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;openhands&#x2F;dist&#x2F;openhands.min.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后，编写 JavaScript 代码处理消息交互：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; app.js
&lt;&#x2F;span&gt;&lt;span&gt;document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DOMContentLoaded&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chatWindow &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chat-window&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInput &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user-input&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendButton &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;send-button&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; API 配置
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiUrl &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;xxx.com:50206&#x2F;api&#x2F;polly&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiKey &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;your_api_key_here&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 初始化聊天窗口
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat &lt;&#x2F;span&gt;&lt;span&gt;= new OpenHands.ChatUI({
&lt;&#x2F;span&gt;&lt;span&gt;        element: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chatWindow&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        theme: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;light&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;        initialMessage: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;你好！我是 Polly，有什么我可以帮助你的吗？&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 发送消息处理
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendMessage&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInput&lt;&#x2F;span&gt;&lt;span&gt;.value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 显示用户消息
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addUserMessage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInput&lt;&#x2F;span&gt;&lt;span&gt;.value = &amp;#39;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 显示加载状态
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;showTyping&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 发送请求到 API
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiUrl&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;            method: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;POST&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            headers: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&#x2F;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-API-Key&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiKey
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            body: JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span&gt;({ message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span&gt;new Error(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;API 请求失败&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 隐藏加载状态并显示回复
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hideTyping&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addAssistantMessage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reply&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error:&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hideTyping&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addSystemMessage&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;抱歉，发生了错误，请稍后再试。&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 事件监听器
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendButton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendMessage&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInput&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keypress&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;=== &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendMessage&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-3-websocket-zhi-chi&quot;&gt;2.3 WebSocket 支持&lt;&#x2F;h3&gt;
&lt;p&gt;除了基本的 HTTP 请求外，还添加了 WebSocket 支持，实现实时通信：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; WebSocket 连接
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;connectWebSocket&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws &lt;&#x2F;span&gt;&lt;span&gt;= new WebSocket(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wss:&#x2F;&#x2F;xxx.com:50206&#x2F;ws&#x2F;polly?api_key=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onopen &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WebSocket 连接已建立&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 发送心跳检测
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setInterval&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.readyState === &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;WebSocket&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OPEN&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span&gt;({ type: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ping&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; }));
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onmessage &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;= JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(event.data);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.type === &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pong&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 忽略心跳响应
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reply&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addAssistantMessage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reply&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addSystemMessage&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;错误: ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onclose &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WebSocket 连接已关闭&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 尝试重新连接
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connectWebSocket&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onerror &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WebSocket 错误:&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;san-openhands-github-copilot-da-jian-fastapi-fu-wu&quot;&gt;三、OpenHands + GitHub Copilot 搭建 FastAPI 服务&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;3-1-fastapi-fu-wu-gou-jian&quot;&gt;3.1 FastAPI 服务构建&lt;&#x2F;h3&gt;
&lt;p&gt;首先，需要安装必要的依赖：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install fastapi uvicorn pydantic-settings python-dotenv aiohttp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-2-pei-zhi-wen-jian-she-zhi&quot;&gt;3.2 配置文件设置&lt;&#x2F;h3&gt;
&lt;p&gt;创建 &lt;code&gt;config.py&lt;&#x2F;code&gt; 文件，管理应用配置：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;pydantic_settings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;BaseSettings
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;typing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;List, Optional
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseSettings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# API 配置
&lt;&#x2F;span&gt;&lt;span&gt;    api_key: str
&lt;&#x2F;span&gt;&lt;span&gt;    deepseek_api_key: str
&lt;&#x2F;span&gt;&lt;span&gt;    deepseek_api_timeout: int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# API 超时时间（秒）
&lt;&#x2F;span&gt;&lt;span&gt;    deepseek_max_retries: int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 最大重试次数
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 应用配置
&lt;&#x2F;span&gt;&lt;span&gt;    debug: bool = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;    port: int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50206
&lt;&#x2F;span&gt;&lt;span&gt;    host: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.0.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    environment: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;development&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_certfile: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;fullchain.pem&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_keyfile: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;privkey.pem&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    use_https: bool = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 安全配置
&lt;&#x2F;span&gt;&lt;span&gt;    allowed_origins: List[str] = [
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;polly2014.github.io&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:1111&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:1111&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 资源配置
&lt;&#x2F;span&gt;&lt;span&gt;    profile_url: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;your-storage.blob.core.windows.net&#x2F;config&#x2F;profile_polly.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    local_profile_path: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;profile_polly.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        env_file = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.env&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        case_sensitive = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;settings = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Settings&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-3-zhu-yao-fu-wu-luo-ji&quot;&gt;3.3 主要服务逻辑&lt;&#x2F;h3&gt;
&lt;p&gt;下面是 &lt;code&gt;main.py&lt;&#x2F;code&gt; 文件的核心代码，实现了 REST API 和 WebSocket 端点：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;lt;vscode_codeblock_uri&amp;gt;vscode-remote:&#x2F;&#x2F;ssh-remote%2B20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.51.201.85&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;main.py&amp;lt;&#x2F;vscode_codeblock_uri&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;fastapi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;FastAPI, WebSocket, HTTPException, Security, Depends, WebSocketDisconnect
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;fastapi.middleware.cors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;CORSMiddleware
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;fastapi.security &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;APIKeyHeader
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;pydantic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;BaseModel, Field
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;settings
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;logging
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;aiohttp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;uvicorn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 配置日志
&lt;&#x2F;span&gt;&lt;span&gt;logger = logging.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getLogger&lt;&#x2F;span&gt;&lt;span&gt;(__name__)
&lt;&#x2F;span&gt;&lt;span&gt;logging.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;basicConfig&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;=logging.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WARNING&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asctime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;levelname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handlers&lt;&#x2F;span&gt;&lt;span&gt;=[
&lt;&#x2F;span&gt;&lt;span&gt;        logging.handlers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RotatingFileHandler&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app.log&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxBytes&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;backupCount&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;        ),
&lt;&#x2F;span&gt;&lt;span&gt;        logging.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StreamHandler&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建 FastAPI 实例
&lt;&#x2F;span&gt;&lt;span&gt;app = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FastAPI&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Polly AI Agent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Polly AI 聊天服务&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;=settings.debug
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 配置 CORS
&lt;&#x2F;span&gt;&lt;span&gt;app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_middleware&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    CORSMiddleware,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow_origins&lt;&#x2F;span&gt;&lt;span&gt;=settings.allowed_origins,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow_credentials&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow_methods&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow_headers&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expose_headers&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max_age&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3600&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# API 密钥验证
&lt;&#x2F;span&gt;&lt;span&gt;api_key_header = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;APIKeyHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-API-Key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;verify_api_key&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api_key&lt;&#x2F;span&gt;&lt;span&gt;: str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Security&lt;&#x2F;span&gt;&lt;span&gt;(api_key_header)):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;api_key != settings.api_key:
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;warning&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;无效的 API 密钥尝试&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPException&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status_code&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;403&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;detail&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;无效的 API 密钥&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;api_key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 数据模型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ChatRequest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    message: str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min_length&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max_length&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 核心 API 路由
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;polly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;=[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Depends&lt;&#x2F;span&gt;&lt;span&gt;(verify_api_key)])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: ChatRequest):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        profile = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load_polly_profile&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        prompt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build_prompt&lt;&#x2F;span&gt;&lt;span&gt;(profile)
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        reply = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query_deepseek&lt;&#x2F;span&gt;&lt;span&gt;(prompt, request.message)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reply&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: reply}
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;处理请求失败: &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(e)}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status_code&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;detail&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(e))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# WebSocket 端点
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;websocket&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;ws&#x2F;polly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;websocket_endpoint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;websocket&lt;&#x2F;span&gt;&lt;span&gt;: WebSocket):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# WebSocket 处理逻辑...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 运行服务器
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Starting server on &lt;&#x2F;span&gt;&lt;span&gt;{settings.host}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;{settings.port}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        uvicorn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main:app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;=settings.host,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;=settings.port,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssl_certfile&lt;&#x2F;span&gt;&lt;span&gt;=settings.ssl_certfile,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssl_keyfile&lt;&#x2F;span&gt;&lt;span&gt;=settings.ssl_keyfile,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reload&lt;&#x2F;span&gt;&lt;span&gt;=settings.debug,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_level&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;access_log&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Server startup failed: &lt;&#x2F;span&gt;&lt;span&gt;{e}&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-4-deepseek-api-ji-cheng&quot;&gt;3.4 DeepSeek API 集成&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;query_deepseek&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_input&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; str:
&lt;&#x2F;span&gt;&lt;span&gt;    url = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.deepseek.com&#x2F;chat&#x2F;completions&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    headers = {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&#x2F;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Authorization&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bearer &lt;&#x2F;span&gt;&lt;span&gt;{settings.deepseek_api_key}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    payload = {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deepseek-chat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;            {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: prompt},
&lt;&#x2F;span&gt;&lt;span&gt;            {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: user_input}
&lt;&#x2F;span&gt;&lt;span&gt;        ],
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span&gt;aiohttp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ClientSession&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;session:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span&gt;session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(url, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;=payload, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;=headers) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;response:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;response.status != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status_code&lt;&#x2F;span&gt;&lt;span&gt;=response.status, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;detail&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;API调用失败&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;                
&lt;&#x2F;span&gt;&lt;span&gt;                result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;result[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;choices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;][&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;][&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;            logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DeepSeek API调用失败: &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(e)}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status_code&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;detail&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;API调用错误: &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(e)}&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-5-github-copilot-openhands-fu-zhu-kai-fa-ti-yan&quot;&gt;3.5 GitHub Copilot &amp;amp; OpenHands 辅助开发体验&lt;&#x2F;h3&gt;
&lt;p&gt;在 Polly AI Agent 的开发过程中，GitHub Copilot 和 OpenHands 成为不可或缺的“智囊团”，它们不仅提升了开发效率，更为整个项目注入了创新的灵感。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;github-copilot-zhi-neng-bian-cheng-zhu-shou&quot;&gt;&lt;strong&gt;GitHub Copilot：智能编程助手&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;GitHub Copilot 的强大之处在于它能够实时理解开发者的意图，并提供精准的代码建议。在编写复杂逻辑时，Copilot 不仅能补全函数和类，还能根据上下文生成符合项目需求的代码片段。例如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WebSocket 逻辑生成&lt;&#x2F;strong&gt;：在实现实时通信时，Copilot 自动生成了连接管理、消息处理和错误处理的完整代码框架。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;错误修复与优化&lt;&#x2F;strong&gt;：通过分析代码，Copilot 提供了潜在问题的解决方案，并建议更优雅的实现方式。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;文档与注释生成&lt;&#x2F;strong&gt;：自动生成清晰的函数注释和文档，确保代码的可读性和可维护性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;openhands-cong-chuang-yi-dao-shi-xian-de-qiao-liang&quot;&gt;&lt;strong&gt;OpenHands：从创意到实现的桥梁&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;OpenHands 则在项目的整体规划和架构设计中扮演了重要角色。它帮助我从最初的 Idea 出发，逐步细化为可执行的 Plan，并在以下方面提供了关键支持：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;架构设计&lt;&#x2F;strong&gt;：明确了前后端分离的技术栈选择，以及各模块的职责划分。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Agent Profile 丰富化&lt;&#x2F;strong&gt;：通过 OpenHands 的工具，我得以构建一个高度个性化的 Polly Profile，定义了其知识领域、行为规则和动态学习能力。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;开发流程优化&lt;&#x2F;strong&gt;：OpenHands 提供的模板和最佳实践建议，使得开发过程更加高效和规范。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;xie-tong-xiao-ying-ji-zhu-yu-chuang-yi-de-wan-mei-jie-he&quot;&gt;&lt;strong&gt;协同效应：技术与创意的完美结合&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;GitHub Copilot 和 OpenHands 的结合，不仅是技术的加持，更是创意的催化剂。Copilot 让代码的实现变得轻松，而 OpenHands 则确保了项目的方向和深度。在它们的共同作用下，Polly AI Agent 从一个模糊的想法，蜕变为一个功能完善的数字人助手。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;si-qian-hou-duan-dui-jie-pei-zhi-ssl-zheng-shu-deng&quot;&gt;四、前后端对接（配置 SSL、证书等）&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;4-1-ssl-zheng-shu-pei-zhi&quot;&gt;4.1 SSL 证书配置&lt;&#x2F;h3&gt;
&lt;p&gt;为了确保通信安全，我们使用 Let&#x27;s Encrypt 提供的免费 SSL 证书：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 安装 Let&amp;#39;s Encrypt 客户端
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install certbot
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 获取证书
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; certbot certonly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --standalone -d&lt;&#x2F;span&gt;&lt;span&gt; xxx.com
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建证书目录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 复制证书文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;xxx.com&#x2F;fullchain.pem &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;xxx.com&#x2F;privkey.pem &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 设置正确的权限
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chown azureuser:azureuser &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;*.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chmod 644 &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;fullchain.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chmod 600 &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;privkey.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-2-zheng-shu-zi-dong-geng-xin-jiao-ben&quot;&gt;4.2 证书自动更新脚本&lt;&#x2F;h3&gt;
&lt;p&gt;创建一个脚本以便在证书更新时自动复制到应用目录：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# filepath: &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;copy_certs.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 复制更新后的证书
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;xxx.com&#x2F;fullchain.pem &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;xxx.com&#x2F;privkey.pem &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 设置权限
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chown&lt;&#x2F;span&gt;&lt;span&gt; azureuser:azureuser &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;fullchain.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chown&lt;&#x2F;span&gt;&lt;span&gt; azureuser:azureuser &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;privkey.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; 644 &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;fullchain.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; 600 &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;privkey.pem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 重启 FastAPI 服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span&gt; restart fastapi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将此脚本链接到 Let&#x27;s Encrypt 的更新钩子目录：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;copy_certs.sh &#x2F;etc&#x2F;letsencrypt&#x2F;renewal-hooks&#x2F;post&#x2F;copy_certs_fastapi.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-3-pei-zhi-wei-xi-tong-fu-wu&quot;&gt;4.3 配置为系统服务&lt;&#x2F;h3&gt;
&lt;p&gt;创建 systemd 服务文件，使应用能够作为系统服务运行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span&gt;&amp;lt;vscode_codeblock_uri&amp;gt;vscode-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;remote:&#x2F;&#x2F;ssh-remote%2B20.51.201.85&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;fastapi.service&amp;lt;&#x2F;vscode_codeblock_uri&amp;gt;[Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Description&lt;&#x2F;span&gt;&lt;span&gt;=Polly AI FastAPI Service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;After&lt;&#x2F;span&gt;&lt;span&gt;=network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[Service]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;=azureuser
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Group&lt;&#x2F;span&gt;&lt;span&gt;=azureuser
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WorkingDirectory&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;PATH=&#x2F;home&#x2F;azureuser&#x2F;miniforge3&#x2F;envs&#x2F;FastAPI&#x2F;bin&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecStart&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;home&#x2F;azureuser&#x2F;miniforge3&#x2F;envs&#x2F;FastAPI&#x2F;bin&#x2F;python &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;main.py
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Restart&lt;&#x2F;span&gt;&lt;span&gt;=always
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RestartSec&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StandardOutput&lt;&#x2F;span&gt;&lt;span&gt;=journal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StandardError&lt;&#x2F;span&gt;&lt;span&gt;=journal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SyslogIdentifier&lt;&#x2F;span&gt;&lt;span&gt;=fastapi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;=PYTHONUNBUFFERED=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[Install]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WantedBy&lt;&#x2F;span&gt;&lt;span&gt;=multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;启用并启动服务：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable fastapi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl start fastapi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-4-fang-huo-qiang-pei-zhi&quot;&gt;4.4 防火墙配置&lt;&#x2F;h3&gt;
&lt;p&gt;确保服务端口在防火墙中开放：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ufw allow 50206&#x2F;tcp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ufw status
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;wu-diao-shi-yu-you-hua&quot;&gt;五、调试与优化&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;5-1-ri-zhi-pei-zhi&quot;&gt;5.1 日志配置&lt;&#x2F;h3&gt;
&lt;p&gt;为了更好地监控应用运行状态，我们精心配置了日志系统：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;分级日志&lt;&#x2F;strong&gt;：区分 ERROR、WARNING、INFO 和 DEBUG 级别&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;日志轮转&lt;&#x2F;strong&gt;：防止日志文件过大&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;控制台输出控制&lt;&#x2F;strong&gt;：减少非必要的输出&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;5-2-xing-neng-you-hua&quot;&gt;5.2 性能优化&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;异步处理&lt;&#x2F;strong&gt;：使用 FastAPI 的异步特性处理并发请求&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;连接池管理&lt;&#x2F;strong&gt;：使用 aiohttp 连接池减少重复连接开销&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;缓存策略&lt;&#x2F;strong&gt;：针对频繁访问的资源实施缓存&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;liu-cheng-guo-zhan-shi&quot;&gt;六、成果展示&lt;&#x2F;h2&gt;
&lt;p&gt;成功构建了一个完整的 AI 助手系统：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;前端提供了友好的聊天界面&lt;&#x2F;li&gt;
&lt;li&gt;后端实现了安全、高效的 API 服务&lt;&#x2F;li&gt;
&lt;li&gt;系统可靠稳定，支持 HTTPS 和 WebSocket&lt;&#x2F;li&gt;
&lt;li&gt;全系统支持自动更新和维护&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;访问地址：&lt;a href=&quot;https:&#x2F;&#x2F;polly2014.github.io&quot;&gt;https:&#x2F;&#x2F;polly2014.github.io&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-zong-jie-yu-zhan-wang&quot;&gt;七、总结与展望&lt;&#x2F;h2&gt;
&lt;p&gt;本项目展示了如何利用现代工具快速构建 AI 应用。通过 GitHub Copilot 和 OpenHands 的协助，在短时间内完成一个功能完整的 AI 助手。&lt;&#x2F;p&gt;
&lt;p&gt;未来改进方向：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;添加多模态支持&lt;&#x2F;strong&gt;：图像识别、语音交互&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;记忆功能&lt;&#x2F;strong&gt;：通过数据库支持用户对话历史&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;个性化定制&lt;&#x2F;strong&gt;：基于用户行为调整回复风格&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;参考资料：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fastapi.tiangolo.com&#x2F;&quot;&gt;FastAPI 官方文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;platform.deepseek.com&#x2F;docs&quot;&gt;DeepSeek API 文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;copilot&quot;&gt;GitHub Copilot 文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openhands&#x2F;openhands&quot;&gt;OpenHands 项目&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;letsencrypt.org&#x2F;docs&#x2F;&quot;&gt;Let&#x27;s Encrypt 使用指南&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenAI ChatGPT注册指南</title>
        <published>2024-08-15T00:00:00+00:00</published>
        <updated>2024-08-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/register-openai-chatgpt/" type="text/html"/>
        <id>https://polly2014.github.io/register-openai-chatgpt/</id>
        
        <content type="html">&lt;p&gt;转载自：&lt;a href=&quot;https:&#x2F;&#x2F;readdevdocs.com&#x2F;blog&#x2F;makemoney&#x2F;%E4%B8%AD%E5%9B%BD%E5%8C%BA%E6%B3%A8%E5%86%8COpenAI%E8%B4%A6%E5%8F%B7%E8%AF%95%E7%94%A8ChatGPT%E6%8C%87%E5%8D%97.html#%E5%9C%A8%E7%9F%AD%E4%BF%A1%E5%B9%B3%E5%8F%B0%E6%8E%A5%E7%A0%81&quot;&gt;Read Dev Docs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;OpenAI最近推出强大的ChatGPT功能，各大程序员使用后发出感叹：程序员要失业了&lt;&#x2F;p&gt;
&lt;p&gt;不过在国内并不支持OpenAI账号注册，多数会提示：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenAI&#x27;s services are not available in your country.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;经过一番搜索后，发现如下方案可以完成注册&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qian-qi-zhun-bei&quot;&gt;前期准备&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;科学上网，最好是美国IP&lt;&#x2F;li&gt;
&lt;li&gt;外国邮箱，如gmail、outlook、iCloud邮箱等&lt;&#x2F;li&gt;
&lt;li&gt;有一个能收到验证码的外国手机号码，如果你没有，请跳到下一步，注册一个能接验证码的手机号，注意这是收费的！&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zhu-ce-duan-xin-ping-tai-bing-chong-zhi&quot;&gt;注册短信平台并充值&lt;&#x2F;h2&gt;
&lt;p&gt;打开 https:&#x2F;&#x2F;sms-activate.org&#x2F; (opens new window)点击右上角注册
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;register-openai-chatgpt&#x2F;sms-activate.io.png&quot; alt=&quot;SMS-Activate&quot; &#x2F;&gt;
输入邮箱和密码注册，需要收激活邮件激活账号。
&lt;img src=&quot;register_account.png&quot; alt=&quot;RegisterAccount&quot; style=&quot;width:30%;&quot;&gt;
激活账号后，点击充值，可以用支付宝充值1美元，然后支付
&lt;img src=&quot;alipay.png&quot; alt=&quot;AliPay&quot; style=&quot;width:50%;&quot;&gt;
支付了可能要等几分钟才显示到余额账户，我在注册时就等了一会余额才显示&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhu-ce-openai-zhang-hao&quot;&gt;注册 OpenAI 账号&lt;&#x2F;h2&gt;
&lt;p&gt;挂上科学访问打开 https:&#x2F;&#x2F;beta.openai.com&#x2F;signup (opens new window)进行注册，如果没有科学上网会提示无法注册&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenAI&#x27;s services are not available in your country.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;注册成功后会进入验证手机号页面，选择你下一步短信平台的接码的手机国家&lt;&#x2F;p&gt;
&lt;img src=&quot;country_select.png&quot; alt=&quot;CountrySelect&quot; style=&quot;width:40%;&quot;&gt;
&lt;h2 id=&quot;zai-duan-xin-ping-tai-jie-ma&quot;&gt;在短信平台接码&lt;&#x2F;h2&gt;
&lt;p&gt;右侧服务，输入搜索openai，选择
&lt;img src=&quot;service_select.png&quot; alt=&quot;ServiceSelect&quot; style=&quot;width:40%;&quot;&gt;
选择印度或者巴西
&lt;img src=&quot;country_select_2.png&quot; alt=&quot;CountrySelect2&quot; style=&quot;width:40%;&quot;&gt;
现在你有一个可以接码的号码了，图下919862209703就是号码，复制号码到OpenAI验证码界面
&lt;img src=&quot;phone_select.png&quot; alt=&quot;PhoneSelect&quot; style=&quot;width:40%;&quot;&gt;
输入接码号码，点击“send code”
&lt;img src=&quot;send_code.png&quot; alt=&quot;SendCode&quot; style=&quot;width:40%;&quot;&gt;
然后等激活码，如果没有收到可以点OpenAI注册界面再发一次验证码，可以多试几次。&lt;&#x2F;p&gt;
&lt;p&gt;注册完就可以去登录 https:&#x2F;&#x2F;chat.openai.com&#x2F;auth&#x2F;login(opens new window)
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;register-openai-chatgpt&#x2F;chat_gpt.png&quot; alt=&quot;ChatGPT&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
