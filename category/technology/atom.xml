<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Polly Blog - AI Assistant, Tutorials, and Insights - Technology</title>
    <subtitle>Explore Polly Blog for AI tutorials, insights, and updates on cutting-edge technology.</subtitle>
    <link href="https://polly2014.github.io/category/technology/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://polly2014.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-05-12T00:00:00+00:00</updated>
    <id>https://polly2014.github.io/category/technology/atom.xml</id>
    <entry xml:lang="en">
        <title>AI工程师的田园梦：用AI重塑舅舅的丽江古城客栈</title>
        <published>2025-05-12T00:00:00+00:00</published>
        <updated>2025-05-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/ai-engineer-renovates-lijiang-guesthouse/" type="text/html"/>
        <id>https://polly2014.github.io/ai-engineer-renovates-lijiang-guesthouse/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;ai-engineer-renovates-lijiang-guesthouse&#x2F;LiJiang_Designer.jpg&quot; alt=&quot;LiJiang GuestHouse Designer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;!--
# 博文插图的DALL-E提示词

为&quot;AI工程师的田园梦：用AI重塑舅舅的丽江古城客栈&quot;博文创建一张完美的开篇插图，以下是精心设计的DALL-E提示词：

```
A split-screen digital illustration showing the juxtaposition of technology and tradition. On the left side, a modern AI engineer with glasses working on holographic displays showing Naxi architectural designs. On the right side, a traditional Lijiang guesthouse with wooden beams, courtyard, and Eastern Asian architectural elements. In the center where the images merge, digital wireframes transform into actual wooden structures. Include Jade Dragon Snow Mountain in the background, soft evening lighting, some Dongba symbols subtly integrated into the design. Photorealistic style with vibrant colors. Top-down view perspective.
```

这个提示词的设计思路：

1. **风格对比**：通过分屏效果展现科技与传统的碰撞，呼应&quot;AI工程师外甥 × 丽江客栈舅舅&quot;的核心定位

2. **人物元素**：一侧展示代表你的AI工程师形象，另一侧展示传统客栈，体现双主角设定

3. **融合点**：中间的转变区域（数字框架变为实际木结构）暗示AI技术如何实际应用于传统建筑

4. **文化元素**：
   - 纳西族建筑特色
   - 东巴符号的巧妙融入
   - 玉龙雪山背景增添丽江标志性景观

5. **艺术处理**：
   - 照片级逼真风格，增强专业感
   - 鲜艳色彩提高视觉吸引力
   - 傍晚柔和光线营造温馨氛围

这张插图将完美体现文章的核心理念：技术与传统的和谐融合，以及AI如何赋能传统行业的创新发展，非常适合作为博文的开篇视觉元素。
--&gt;
&lt;h2 id=&quot;xin-zhang-hao-ding-wei-yu-feng-ge&quot;&gt;新账号定位与风格&lt;&#x2F;h2&gt;
&lt;p&gt;以&amp;quot;AI工程师外甥 × 丽江客栈舅舅&amp;quot;为核心，打造一个科技与传统碰撞的特色账号。这种差异化定位能在众多丽江客栈账号中脱颖而出。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhang-hao-ming-cheng-jing-xuan&quot;&gt;账号名称精选&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;「AI工程师的田园梦」&lt;&#x2F;li&gt;
&lt;li&gt;「码农外甥与客栈舅舅」&lt;&#x2F;li&gt;
&lt;li&gt;「AI助手×丽江客栈：科技改造传统」&lt;&#x2F;li&gt;
&lt;li&gt;「代码与木梁：微软工程师重建舅舅的古城客栈」&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ren-she-zhong-gou&quot;&gt;人设重构&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;我（外甥）&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;微软中国（北京）的AI 工程师，专注AI Agent开发&lt;&#x2F;li&gt;
&lt;li&gt;将前沿AI技术应用到传统行业的实践者&lt;&#x2F;li&gt;
&lt;li&gt;擅长AI内容创作、设计生成和智能助手开发&lt;&#x2F;li&gt;
&lt;li&gt;特点：理性分析与创意结合，技术与人文并重&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;舅舅&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;经验丰富的丽江客栈主，对传统文化有独到理解&lt;&#x2F;li&gt;
&lt;li&gt;对AI技术既好奇又保持健康怀疑&lt;&#x2F;li&gt;
&lt;li&gt;代表传统行业面对数字化转型的真实态度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;nei-rong-kuang-jia-sheng-ji&quot;&gt;内容框架升级&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-ai-agentzhu-li-ke-zhan-zhong-jian-xi-lie&quot;&gt;1. 「AI Agent助力客栈重建」系列&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;视频标题&lt;&#x2F;th&gt;&lt;th&gt;核心内容&lt;&#x2F;th&gt;&lt;th&gt;技术亮点&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;《我为舅舅开发的AI客栈助手，让他震惊了》&lt;&#x2F;td&gt;&lt;td&gt;展示客栈AI助手功能与舅舅反应&lt;&#x2F;td&gt;&lt;td&gt;AI Agent自动规划功能&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《用AI Agent解决丽江客栈最难的3个设计难题》&lt;&#x2F;td&gt;&lt;td&gt;针对古城建筑限制的AI解决方案&lt;&#x2F;td&gt;&lt;td&gt;多约束条件下的空间优化&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《舅舅第一次用AI Agent规划客房布局，结果太惊艳》&lt;&#x2F;td&gt;&lt;td&gt;记录舅舅使用AI工具的过程与成果&lt;&#x2F;td&gt;&lt;td&gt;用户友好的AI交互界面设计&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;2-aichuang-yi-she-ji-xi-lie&quot;&gt;2. 「AI创意设计」系列&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;视频标题&lt;&#x2F;th&gt;&lt;th&gt;核心内容&lt;&#x2F;th&gt;&lt;th&gt;技术亮点&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;《我用Midjourney设计了10种客栈风格，舅舅选了最意外的那个》&lt;&#x2F;td&gt;&lt;td&gt;多风格设计方案生成与选择&lt;&#x2F;td&gt;&lt;td&gt;Prompt精确控制风格技巧&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《如何用Prompt技术生成完美的纳西族风格室内设计》&lt;&#x2F;td&gt;&lt;td&gt;纳西族元素的AI设计指南&lt;&#x2F;td&gt;&lt;td&gt;文化元素提取与Prompt编写&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《当AI遇见传统工艺：我为舅舅生成的木雕图案被当地匠人采用了》&lt;&#x2F;td&gt;&lt;td&gt;AI设计与传统工艺结合案例&lt;&#x2F;td&gt;&lt;td&gt;传统与现代审美的AI融合&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;3-aigong-cheng-shi-de-shi-yong-ji-neng-fen-xiang-xi-lie&quot;&gt;3. 「AI工程师的实用技能分享」系列&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;视频标题&lt;&#x2F;th&gt;&lt;th&gt;核心内容&lt;&#x2F;th&gt;&lt;th&gt;技术亮点&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;《教舅舅用AI写出爆款民宿文案，订单暴增》&lt;&#x2F;td&gt;&lt;td&gt;AI文案写作实战教程&lt;&#x2F;td&gt;&lt;td&gt;行业垂直领域Prompt优化&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《用GPT-4优化客栈运营流程，效率提升300%》&lt;&#x2F;td&gt;&lt;td&gt;AI流程优化实例展示&lt;&#x2F;td&gt;&lt;td&gt;系统思维的AI应用&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《我开发的AI定价助手如何帮舅舅制定最优房价策略》&lt;&#x2F;td&gt;&lt;td&gt;AI定价算法与应用&lt;&#x2F;td&gt;&lt;td&gt;数据驱动决策的AI工具&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;4-ke-ji-xchuan-tong-wen-hua-si-kao-xi-lie&quot;&gt;4. 「科技×传统」文化思考系列&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;视频标题&lt;&#x2F;th&gt;&lt;th&gt;核心内容&lt;&#x2F;th&gt;&lt;th&gt;思考维度&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;《AI能理解纳西东巴文化吗？一次有趣的实验》&lt;&#x2F;td&gt;&lt;td&gt;AI对传统文化的理解实验&lt;&#x2F;td&gt;&lt;td&gt;技术与文化传承&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《从北京写代码到丽江砌墙：两种生活的思考》&lt;&#x2F;td&gt;&lt;td&gt;不同生活方式的对比与反思&lt;&#x2F;td&gt;&lt;td&gt;现代与传统生活的平衡&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《当微软工程师爱上古城：我对数字游民生活的新理解》&lt;&#x2F;td&gt;&lt;td&gt;数字游民生活方式探索&lt;&#x2F;td&gt;&lt;td&gt;技术人的生活方式变革&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;nei-rong-cheng-xian-xing-shi&quot;&gt;内容呈现形式&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;shi-pin-biao-zhun-hua-jie-gou&quot;&gt;视频标准化结构&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;开场白：&amp;quot;我是微软的AI工程师，这是我用AI技术帮舅舅重建客栈的第X天...&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;核心环节：AI工具操作演示 + 实际应用效果对比&lt;&#x2F;li&gt;
&lt;li&gt;互动钩子：&amp;quot;你想让AI为你的传统行业解决什么问题？&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zhuan-ye-wen-an-shi-li&quot;&gt;专业文案示例&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;【视频标题】我用100个Prompt设计出舅舅心目中完美的丽江客栈
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;【开场】&amp;quot;作为微软的AI工程师，我从没想过有一天我会用这项技能来帮舅舅重建他的丽江古城客栈...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;【展开】&amp;quot;我为舅舅定制的这个AI设计助手能根据纳西族建筑特点、客流量预测和预算限制，自动生成最优的空间方案...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;【高潮】&amp;quot;当地设计师看到AI生成的方案后说：&amp;#39;这比我见过的大部分手工设计都要合理，而且保留了纳西族的灵魂&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;aiji-zhu-zhan-shi-huan-jie&quot;&gt;AI技术展示环节&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;aigong-cheng-shi-gong-ju-xiang-xi-lie&quot;&gt;&amp;quot;AI工程师工具箱&amp;quot;系列&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;技术类型&lt;&#x2F;th&gt;&lt;th&gt;展示内容&lt;&#x2F;th&gt;&lt;th&gt;受众价值&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Prompt工程展示&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;编写高效Prompt技巧、模板库分享、结果对比&lt;&#x2F;td&gt;&lt;td&gt;可立即应用的实用技能&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI Agent开发演示&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;客栈专用AI助手构建、自动规划流程、文化理解训练&lt;&#x2F;td&gt;&lt;td&gt;垂直领域AI应用思路&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI设计工具实操&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;Midjourney&#x2F;DALL-E使用、照片修复转化、3D空间规划&lt;&#x2F;td&gt;&lt;td&gt;视觉创意实现方法&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;jing-pin-nei-rong-qi-hua&quot;&gt;精品内容企划&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-kai-pian-xi-lie-wei-ruan-aigong-cheng-shi-de-xiang-cun-ji-hua&quot;&gt;1. 开篇系列：《微软AI工程师的乡村计划》&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一集：《我告诉微软同事要用AI技术重建舅舅的客栈，他们的反应太真实了》
&lt;ul&gt;
&lt;li&gt;介绍你的AI工程师背景和整体计划&lt;&#x2F;li&gt;
&lt;li&gt;展示技术与传统的碰撞点&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-aishe-ji-xi-lie-aiyan-zhong-de-li-jiang-gu-cheng&quot;&gt;2. AI设计系列：《AI眼中的丽江古城》&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一集：《我用10个不同Prompt让AI设计客栈外观，结果惊艳了整条古街》
&lt;ul&gt;
&lt;li&gt;详细展示Prompt编写技巧&lt;&#x2F;li&gt;
&lt;li&gt;对比不同AI设计工具的效果&lt;&#x2F;li&gt;
&lt;li&gt;记录舅舅和当地人的真实反应&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-ai-agentxi-lie-wei-jiu-jiu-da-zao-de-zhi-neng-zhu-shou&quot;&gt;3. AI Agent系列：《为舅舅打造的智能助手》&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一集：《我为舅舅开发的客栈AI助手能做这些事，连他都不敢相信》
&lt;ul&gt;
&lt;li&gt;展示如何构建垂直领域AI助手&lt;&#x2F;li&gt;
&lt;li&gt;演示AI如何帮助决策和解决问题&lt;&#x2F;li&gt;
&lt;li&gt;分享开发过程中的技巧和坑&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-shi-yong-gong-ju-xi-lie-aigong-cheng-shi-de-zhuang-xiu-mi-ji&quot;&gt;4. 实用工具系列：《AI工程师的装修秘籍》&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一集：《用AI生成完美客栈平面图，比设计师省钱还高效》
&lt;ul&gt;
&lt;li&gt;分享AI空间设计工具使用方法&lt;&#x2F;li&gt;
&lt;li&gt;提供实用的Prompt模板&lt;&#x2F;li&gt;
&lt;li&gt;展示从生成到实施的全过程&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-wen-hua-rong-he-xi-lie-airu-he-li-jie-na-xi-wen-hua&quot;&gt;5. 文化融合系列：《AI如何理解纳西文化》&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一集：《我训练AI理解东巴文化，结果超出预期》
&lt;ul&gt;
&lt;li&gt;展示如何引导AI学习传统文化元素&lt;&#x2F;li&gt;
&lt;li&gt;分享AI创作带有文化底蕴的设计&lt;&#x2F;li&gt;
&lt;li&gt;探讨技术如何传承和创新传统&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bian-xian-fang-xiang-zhong-gou&quot;&gt;变现方向重构&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;aifu-neng-fu-wu&quot;&gt;AI赋能服务&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;服务类型&lt;&#x2F;th&gt;&lt;th&gt;具体产品&lt;&#x2F;th&gt;&lt;th&gt;目标客户&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI助手定制服务&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;客栈AI运营助手、智能管理系统、AI设计顾问&lt;&#x2F;td&gt;&lt;td&gt;民宿客栈主、旅游行业从业者&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI培训课程&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI客栈经营指南、AI民宿设计工作坊、Prompt工程训练营&lt;&#x2F;td&gt;&lt;td&gt;行业从业者、AI爱好者&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;数字产品&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI工具包订阅、Prompt模板库、云南特色AI设计素材&lt;&#x2F;td&gt;&lt;td&gt;设计师、内容创作者、旅游业主&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;yun-ying-ce-lue-you-hua&quot;&gt;运营策略优化&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;chuang-xin-hu-dong-fang-shi&quot;&gt;创新互动方式&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;活动类型&lt;&#x2F;th&gt;&lt;th&gt;活动内容&lt;&#x2F;th&gt;&lt;th&gt;预期效果&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI共创活动&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;一句话生成梦想客栈&amp;quot;、&amp;quot;AI×传统设计PK赛&amp;quot;、&amp;quot;训练AI理解家乡文化&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;提高用户参与度、获得UGC内容&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;技术社区链接&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;案例分享、线上沙龙、连接微软&#x2F;AI社区资源&lt;&#x2F;td&gt;&lt;td&gt;扩大技术圈影响力、获取专业认可&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;双圈层运营&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;技术实现分享、实用性展示、跨界话题创造&lt;&#x2F;td&gt;&lt;td&gt;构建多元受众群体、促进跨界交流&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;xi-hua-shi-shi-shi-jian-biao&quot;&gt;细化实施时间表&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;阶段&lt;&#x2F;th&gt;&lt;th&gt;时间&lt;&#x2F;th&gt;&lt;th&gt;重点任务&lt;&#x2F;th&gt;&lt;th&gt;目标&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;启动与概念验证&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第1-4周&lt;&#x2F;td&gt;&lt;td&gt;账号建设、工具准备、首批内容发布、验证调整&lt;&#x2F;td&gt;&lt;td&gt;初步形成账号定位，获得首批粉丝&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;深度内容开发&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第5-8周&lt;&#x2F;td&gt;&lt;td&gt;AI设计展示、AI Agent功能开发、互动活动、商业合作&lt;&#x2F;td&gt;&lt;td&gt;内容体系完善，粉丝互动增强&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;扩展影响力&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第9-12周&lt;&#x2F;td&gt;&lt;td&gt;付费课程推出、KOL合作、工作坊、服务测试&lt;&#x2F;td&gt;&lt;td&gt;影响力扩大，初步变现&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;开业准备与商业化&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第13-16周&lt;&#x2F;td&gt;&lt;td&gt;商业模式完善、系统优化、预售活动、长期规划&lt;&#x2F;td&gt;&lt;td&gt;形成稳定商业模式，为客栈开业助力&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;shu-ju-zhi-biao-jian-kong&quot;&gt;数据指标监控&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;fen-si-zeng-chang-zhi-biao&quot;&gt;粉丝增长指标&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;阶段&lt;&#x2F;th&gt;&lt;th&gt;时间段&lt;&#x2F;th&gt;&lt;th&gt;粉丝目标&lt;&#x2F;th&gt;&lt;th&gt;日均增长&lt;&#x2F;th&gt;&lt;th&gt;重点指标&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;启动期&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第1-4周&lt;&#x2F;td&gt;&lt;td&gt;1万+&lt;&#x2F;td&gt;&lt;td&gt;250-350人&#x2F;日&lt;&#x2F;td&gt;&lt;td&gt;关注转化率&amp;gt;5%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;成长期&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第5-8周&lt;&#x2F;td&gt;&lt;td&gt;3万+&lt;&#x2F;td&gt;&lt;td&gt;500-700人&#x2F;日&lt;&#x2F;td&gt;&lt;td&gt;互动率&amp;gt;8%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;加速期&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第9-12周&lt;&#x2F;td&gt;&lt;td&gt;7万+&lt;&#x2F;td&gt;&lt;td&gt;800-1000人&#x2F;日&lt;&#x2F;td&gt;&lt;td&gt;完播率&amp;gt;60%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;成熟期&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第13-16周&lt;&#x2F;td&gt;&lt;td&gt;10万+&lt;&#x2F;td&gt;&lt;td&gt;700-900人&#x2F;日&lt;&#x2F;td&gt;&lt;td&gt;转发率&amp;gt;3%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;nei-rong-xiao-guo-ping-gu-zhi-biao&quot;&gt;内容效果评估指标&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;内容类型&lt;&#x2F;th&gt;&lt;th&gt;互动率目标&lt;&#x2F;th&gt;&lt;th&gt;完播率目标&lt;&#x2F;th&gt;&lt;th&gt;转化率目标&lt;&#x2F;th&gt;&lt;th&gt;关键评估方式&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AI Agent系列&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;10%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;65%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;2%技术咨询&lt;&#x2F;td&gt;&lt;td&gt;技术问题咨询量&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;设计创意系列&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;12%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;70%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;3%模板下载&lt;&#x2F;td&gt;&lt;td&gt;Prompt模板使用量&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;实用技能系列&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;15%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;75%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;4%课程转化&lt;&#x2F;td&gt;&lt;td&gt;课程注册量&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;文化思考系列&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;8%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;55%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;1%深度互动&lt;&#x2F;td&gt;&lt;td&gt;长评论与讨论量&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;shang-ye-zhuan-hua-zhi-biao&quot;&gt;商业转化指标&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;变现产品&lt;&#x2F;th&gt;&lt;th&gt;第一阶段目标&lt;&#x2F;th&gt;&lt;th&gt;最终转化率目标&lt;&#x2F;th&gt;&lt;th&gt;客单价目标&lt;&#x2F;th&gt;&lt;th&gt;评估周期&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AI助手定制服务&lt;&#x2F;td&gt;&lt;td&gt;10次咨询&#x2F;周&lt;&#x2F;td&gt;&lt;td&gt;转化率&amp;gt;20%&lt;&#x2F;td&gt;&lt;td&gt;3000-5000元&lt;&#x2F;td&gt;&lt;td&gt;双周评估&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;线上课程销售&lt;&#x2F;td&gt;&lt;td&gt;50次浏览&#x2F;日&lt;&#x2F;td&gt;&lt;td&gt;转化率&amp;gt;3%&lt;&#x2F;td&gt;&lt;td&gt;299-599元&lt;&#x2F;td&gt;&lt;td&gt;周评估&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Prompt模板库&lt;&#x2F;td&gt;&lt;td&gt;100次下载&#x2F;周&lt;&#x2F;td&gt;&lt;td&gt;付费转化&amp;gt;5%&lt;&#x2F;td&gt;&lt;td&gt;99-199元&lt;&#x2F;td&gt;&lt;td&gt;周评估&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;客栈预订引流&lt;&#x2F;td&gt;&lt;td&gt;30次咨询&#x2F;周&lt;&#x2F;td&gt;&lt;td&gt;转化率&amp;gt;15%&lt;&#x2F;td&gt;&lt;td&gt;因季节浮动&lt;&#x2F;td&gt;&lt;td&gt;月度评估&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;ping-tai-biao-xian-chai-yi-hua-zhi-biao&quot;&gt;平台表现差异化指标&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;平台&lt;&#x2F;th&gt;&lt;th&gt;粉丝增长占比&lt;&#x2F;th&gt;&lt;th&gt;互动率预期&lt;&#x2F;th&gt;&lt;th&gt;转化特点&lt;&#x2F;th&gt;&lt;th&gt;重点优化方向&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;抖音&lt;&#x2F;td&gt;&lt;td&gt;占总目标的65%&lt;&#x2F;td&gt;&lt;td&gt;点赞率&amp;gt;8%&lt;&#x2F;td&gt;&lt;td&gt;流量转化快&lt;&#x2F;td&gt;&lt;td&gt;前15秒吸引力&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;小红书&lt;&#x2F;td&gt;&lt;td&gt;占总目标的35%&lt;&#x2F;td&gt;&lt;td&gt;收藏率&amp;gt;12%&lt;&#x2F;td&gt;&lt;td&gt;种草效果好&lt;&#x2F;td&gt;&lt;td&gt;图文质量与标签&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;微信视频号&lt;&#x2F;td&gt;&lt;td&gt;辅助平台&lt;&#x2F;td&gt;&lt;td&gt;留存率&amp;gt;30%&lt;&#x2F;td&gt;&lt;td&gt;忠实粉丝多&lt;&#x2F;td&gt;&lt;td&gt;深度内容与社群引导&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;hu-dong-yu-she-qu-jian-she&quot;&gt;互动与社区建设&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;zhuan-ye-she-qun-yun-ying&quot;&gt;专业社群运营&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;双层社群结构&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;公开群：AI与传统行业爱好者&lt;&#x2F;li&gt;
&lt;li&gt;付费社群：AI民宿设计与运营深度交流&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定期活动&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;每周AI工具更新分享会&lt;&#x2F;li&gt;
&lt;li&gt;月度&amp;quot;我的AI设计&amp;quot;展示会&lt;&#x2F;li&gt;
&lt;li&gt;季度线上技术沙龙&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源共享&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;建立Prompt模板共享库&lt;&#x2F;li&gt;
&lt;li&gt;开发AI工具使用指南&lt;&#x2F;li&gt;
&lt;li&gt;创建行业特定AI应用案例集&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;ying-dui-tiao-zhan-ce-lue&quot;&gt;应对挑战策略&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-ji-zhu-shi-shi-yu-xian-shi-luo-di-de-chai-ju&quot;&gt;1. 技术实施与现实落地的差距&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;潜在挑战&lt;&#x2F;th&gt;&lt;th&gt;具体表现&lt;&#x2F;th&gt;&lt;th&gt;应对策略&lt;&#x2F;th&gt;&lt;th&gt;责任人&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;设计方案不可行&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI生成设计不符合建筑规范&lt;&#x2F;td&gt;&lt;td&gt;• 建立本地设计师审核机制&lt;br&gt;• 提前收集丽江建筑限制条例&lt;br&gt;• 为AI设计增加现实约束参数&lt;&#x2F;td&gt;&lt;td&gt;我+当地设计师&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;施工技术限制&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;当地工匠无法实现AI设计效果&lt;&#x2F;td&gt;&lt;td&gt;• 邀请工匠提前参与设计评审&lt;br&gt;• 准备设计方案的简化版本&lt;br&gt;• 记录落地过程的妥协与创新&lt;&#x2F;td&gt;&lt;td&gt;舅舅+工程队&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;预算超支风险&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI方案实施成本超出预期&lt;&#x2F;td&gt;&lt;td&gt;• 每个设计标注成本估算&lt;br&gt;• 设定20%应急预算&lt;br&gt;• 优先实施投资回报率高的设计&lt;&#x2F;td&gt;&lt;td&gt;我+舅舅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;2-nei-rong-chuang-zuo-yu-yun-ying-tiao-zhan&quot;&gt;2. 内容创作与运营挑战&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;潜在挑战&lt;&#x2F;th&gt;&lt;th&gt;具体表现&lt;&#x2F;th&gt;&lt;th&gt;应对策略&lt;&#x2F;th&gt;&lt;th&gt;应急预案&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;内容同质化&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;与其他装修账号区分度不够&lt;&#x2F;td&gt;&lt;td&gt;• 强化&amp;quot;AI工程师&amp;quot;独特视角&lt;br&gt;• 每周至少1个创新型内容实验&lt;br&gt;• 建立内容差异化评估机制&lt;&#x2F;td&gt;&lt;td&gt;调整内容比例，增加技术深度&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;技术内容过于专业&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;普通观众理解困难&lt;&#x2F;td&gt;&lt;td&gt;• 建立三层解释模型&lt;br&gt;• 使用生动比喻和可视化&lt;br&gt;• 测试不同专业度的内容效果&lt;&#x2F;td&gt;&lt;td&gt;增加内容前测，收集5-10人反馈&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;算法推荐波动&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;单个平台流量突然下降&lt;&#x2F;td&gt;&lt;td&gt;• 多平台并行运营&lt;br&gt;• 建立自有流量池&lt;br&gt;• 储备3-5个爆款内容应对&lt;&#x2F;td&gt;&lt;td&gt;启动紧急互动活动，刺激算法&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;3-wen-hua-chong-tu-yu-ping-heng&quot;&gt;3. 文化冲突与平衡&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;潜在挑战&lt;&#x2F;th&gt;&lt;th&gt;具体表现&lt;&#x2F;th&gt;&lt;th&gt;应对策略&lt;&#x2F;th&gt;&lt;th&gt;文化顾问&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;传统与现代平衡&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;当地人对现代设计反感&lt;&#x2F;td&gt;&lt;td&gt;• 邀请纳西族文化顾问参与&lt;br&gt;• 举办社区意见征集活动&lt;br&gt;• 分阶段温和引入现代元素&lt;&#x2F;td&gt;&lt;td&gt;当地文化学者或年长居民&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;符号使用不当&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;东巴文化元素使用引发争议&lt;&#x2F;td&gt;&lt;td&gt;• 提前研究文化禁忌&lt;br&gt;• 尊重符号原意&lt;br&gt;• 请当地文化专家审核&lt;&#x2F;td&gt;&lt;td&gt;东巴文化研究者&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;游客与本地需求冲突&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;设计无法同时满足双方&lt;&#x2F;td&gt;&lt;td&gt;• 明确区分游客区与本地体验区&lt;br&gt;• 创建文化过渡空间&lt;br&gt;• 记录并展示平衡过程&lt;&#x2F;td&gt;&lt;td&gt;有经验的客栈主+游客代表&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;4-fu-mian-ping-lun-yu-wei-ji-guan-li&quot;&gt;4. 负面评论与危机管理&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;评论类型&lt;&#x2F;th&gt;&lt;th&gt;可能触发点&lt;&#x2F;th&gt;&lt;th&gt;应对原则&lt;&#x2F;th&gt;&lt;th&gt;反应时间&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;技术质疑&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;AI只是噱头，没有实际价值&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;• 展示具体技术效果对比&lt;br&gt;• 分享实际成本节约数据&lt;br&gt;• 邀请质疑者参与线下体验&lt;&#x2F;td&gt;&lt;td&gt;12小时内回应&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;文化批评&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;破坏传统文化，过度商业化&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;• 展示文化保护措施&lt;br&gt;• 分享与当地匠人合作案例&lt;br&gt;• 邀请文化专家进行客观评价&lt;&#x2F;td&gt;&lt;td&gt;6小时内回应&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;商业质疑&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;纯粹为了卖课&#x2F;引流&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;• 保持内容高质量与实用性&lt;br&gt;• 限制商业信息比例&amp;lt;10%&lt;br&gt;• 提供免费高价值资源&lt;&#x2F;td&gt;&lt;td&gt;24小时内调整&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;5-ji-zhu-shi-shi-feng-xian-guan-kong&quot;&gt;5. 技术实施风险管控&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;风险点&lt;&#x2F;th&gt;&lt;th&gt;风险级别&lt;&#x2F;th&gt;&lt;th&gt;预防措施&lt;&#x2F;th&gt;&lt;th&gt;应急预案&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;数据安全隐患&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;高风险&lt;&#x2F;td&gt;&lt;td&gt;• 客人信息脱敏处理&lt;br&gt;• 不在公开内容中展示系统细节&lt;br&gt;• 使用企业级安全解决方案&lt;&#x2F;td&gt;&lt;td&gt;立即下线相关内容，发布澄清&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;系统稳定性问题&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;中风险&lt;&#x2F;td&gt;&lt;td&gt;• 线下备份管理系统&lt;br&gt;• 关键功能冗余设计&lt;br&gt;• 分阶段部署，先小规模测试&lt;&#x2F;td&gt;&lt;td&gt;激活备用系统，人工接管&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI生成内容争议&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;中风险&lt;&#x2F;td&gt;&lt;td&gt;• 明确标注AI生成内容&lt;br&gt;• 设立内容审核机制&lt;br&gt;• 尊重原创权，引用需授权&lt;&#x2F;td&gt;&lt;td&gt;迅速删除有争议内容，道歉并更正&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;chai-yi-hua-you-shi-zong-jie&quot;&gt;差异化优势总结&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;优势点&lt;&#x2F;th&gt;&lt;th&gt;具体表现&lt;&#x2F;th&gt;&lt;th&gt;价值&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;独特专业交叉&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI技术×传统客栈的稀缺视角&lt;&#x2F;td&gt;&lt;td&gt;填补市场空白，创造独特价值&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;双重身份&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;微软AI工程师+客栈改造实践者&lt;&#x2F;td&gt;&lt;td&gt;增强专业可信度与内容真实性&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;工具实用性&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供即学即用的AI应用方法&lt;&#x2F;td&gt;&lt;td&gt;满足用户实际需求，提高粘性&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;真实记录&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;展示真实项目进展与效果对比&lt;&#x2F;td&gt;&lt;td&gt;增强内容代入感与说服力&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;技术普惠&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;将前沿AI技术转化为大众可理解内容&lt;&#x2F;td&gt;&lt;td&gt;扩大受众面，促进技术民主化&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;你对AI技术在传统行业的应用有什么想法？欢迎在评论区分享&lt;&#x2F;p&gt;
&lt;!--
这一全新定位将你微软AI工程师的专业身份和传统客栈改造的实践完美结合。通过AI Agent开发、Prompt工程和AI设计等核心技能展示，打造专业性与趣味性兼具的内容矩阵。这不仅能吸引传统旅游民宿圈粉丝，也能引来技术爱好者和数字化转型关注者，形成独特而广泛的受众群体。该方案充分发挥你的AI技术专长，同时保持项目的真实性和情感温度，为传统行业数字化转型提供可复制的范例。
--&gt;
&lt;!--

# 第一篇小红书文章规划

## 选定主题
我为您选择的主题是：**《纳西族东巴符号×现代设计：AI重塑丽江古城客栈接待区》**

这个主题很适合作为第一篇小红书文章，因为它:
1. 结合了文化传统与现代科技的碰撞点
2. 有视觉冲击力，适合小红书图文展示
3. 可以展现您作为AI工程师的专业能力
4. 触及丽江旅游爱好者和设计爱好者双重圈层

## 文案创作

```
【当东巴符号遇见AI设计，微软工程师的舅舅惊呆了】

作为微软AI工程师，我用一周时间帮舅舅重新设计了他丽江古城客栈的接待区，结果连本地纳西族老人都说：「这比专业设计师做得还有文化感」🤯

✨ 过程超简单：我只用了Midjourney+GPT-4，就把传统东巴符号与现代设计元素完美融合

📝 首先让AI分析了42个东巴经典符号的文化含义
🏮 然后设计了三种风格：现代简约、复古文艺、传统创新
🪑 最后为每个角落都匹配了最适合的家具与装饰品

舅舅最喜欢的是接待台背后的那面墙：AI把&quot;水&quot;、&quot;山&quot;、&quot;人&quot;三个东巴符号重新演绎，配上柔和灯光投影，远看是玉龙雪山轮廓，近看是东巴文字韵律。

💡小贴士：用AI设计传统元素时，记得先让AI学习文化背景，这样生成的内容才有灵魂！

有没有住过带有民族特色的精品客栈？你最喜欢哪些设计元素？👇🏻

#丽江旅行 #AI设计 #民宿改造 #东巴文化 #数字游民 #设计灵感
```

## Midjourney提示词

```
A reception area of a boutique guesthouse in Lijiang Ancient Town, featuring modern interpretation of Dongba symbols on the feature wall, natural wood materials, soft ambient lighting highlighting the wooden carved patterns, view of Jade Dragon Snow Mountain through window, clean minimalist furniture with Naxi ethnic textiles, high ceiling with exposed wooden beams, muted earth tones with touches of indigo blue, wide angle view, architectural photography style, realistic lighting, 8k resolution --ar 4:5
```

这个提示词包含了:
1. 基本场景：丽江古城精品客栈的接待区
2. 文化元素：东巴符号的现代演绎，纳西族纺织品
3. 建筑特点：高天花板，露出的木梁
4. 色调氛围：低调的大地色系，点缀靛蓝色
5. 拍摄风格：建筑摄影风格，宽角度视图
6. 技术参数：真实照明，8K分辨率，4:5的比例(适合小红书展示)

这个提示词将生成一张极具视觉冲击力且兼具传统文化与现代设计的接待区图片，完美配合您的文案内容。

--&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Claude 3.7 Sonnet模型使用成本分析：基于OpenHands实际案例</title>
        <published>2025-04-11T00:00:00+00:00</published>
        <updated>2025-04-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/claude-37-cost-analysis/" type="text/html"/>
        <id>https://polly2014.github.io/claude-37-cost-analysis/</id>
        
        <content type="html">&lt;h2 id=&quot;yi-yin-yan&quot;&gt;一、引言&lt;&#x2F;h2&gt;
&lt;p&gt;随着大语言模型(LLM)在生产环境中的广泛应用，其使用成本已成为企业关注的焦点。本文通过分析OpenHands平台的实际使用日志，深入解析Claude 3.7 Sonnet模型的收费模式和成本结构，并提出相应的优化策略。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;er-claude-3-7-sonnetmo-xing-gai-lan&quot;&gt;二、Claude 3.7 Sonnet模型概览&lt;&#x2F;h2&gt;
&lt;p&gt;从日志中可以看出，Claude 3.7 Sonnet模型具有以下关键参数：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;key&amp;quot;: &amp;quot;claude-3-7-sonnet-20250219&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;max_tokens&amp;quot;: 128000,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;max_input_tokens&amp;quot;: 200000,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;max_output_tokens&amp;quot;: 128000,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;input_cost_per_token&amp;quot;: 3e-06,  &#x2F;&#x2F; 每输入token $0.000003
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;cache_creation_input_token_cost&amp;quot;: 3.75e-06,  &#x2F;&#x2F; 缓存创建的成本为每token $0.00000375
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;cache_read_input_token_cost&amp;quot;: 3e-07,  &#x2F;&#x2F; 缓存读取的成本为每token $0.0000003
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;output_cost_per_token&amp;quot;: 1.5e-05,  &#x2F;&#x2F; 每输出token $0.000015
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这些参数揭示了Claude 3.7 Sonnet的基础定价结构，输入token比输出token便宜5倍，并且模型支持高达20万输入token的超长上下文。此外，模型还支持以下功能：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;视觉能力&lt;&#x2F;strong&gt;: 支持图像输入和处理&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;工具调用&lt;&#x2F;strong&gt;: 支持函数调用和工具选择&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;PDF输入&lt;&#x2F;strong&gt;: 原生支持PDF文档处理&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;提示缓存&lt;&#x2F;strong&gt;: 支持提示缓存以优化性能和成本&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;响应格式控制&lt;&#x2F;strong&gt;: 支持结构化输出格式控制&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;san-shi-ji-ren-wu-zhong-de-cheng-ben-gou-cheng&quot;&gt;三、实际任务中的成本构成&lt;&#x2F;h2&gt;
&lt;p&gt;我们以一个杭州三天旅游规划任务为例，分析整个过程中的成本构成。此任务需要生成一个基于Flask的旅游规划网页。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hui-hua-jiao-hu-cheng-ben-wan-zheng-fen-xi-biao&quot;&gt;会话交互成本完整分析表&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;调用序号&lt;&#x2F;th&gt;&lt;th&gt;输入令牌&lt;&#x2F;th&gt;&lt;th&gt;输出令牌&lt;&#x2F;th&gt;&lt;th&gt;缓存命中&lt;&#x2F;th&gt;&lt;th&gt;缓存写入&lt;&#x2F;th&gt;&lt;th&gt;成本(USD)&lt;&#x2F;th&gt;&lt;th&gt;累计成本(USD)&lt;&#x2F;th&gt;&lt;th&gt;响应时间(秒)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;5,411&lt;&#x2F;td&gt;&lt;td&gt;4,202&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;5,407&lt;&#x2F;td&gt;&lt;td&gt;0.10&lt;&#x2F;td&gt;&lt;td&gt;0.10&lt;&#x2F;td&gt;&lt;td&gt;58.89&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;9,639&lt;&#x2F;td&gt;&lt;td&gt;102&lt;&#x2F;td&gt;&lt;td&gt;5,407&lt;&#x2F;td&gt;&lt;td&gt;4,226&lt;&#x2F;td&gt;&lt;td&gt;0.03&lt;&#x2F;td&gt;&lt;td&gt;0.13&lt;&#x2F;td&gt;&lt;td&gt;3.06&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;10,457&lt;&#x2F;td&gt;&lt;td&gt;99&lt;&#x2F;td&gt;&lt;td&gt;9,633&lt;&#x2F;td&gt;&lt;td&gt;818&lt;&#x2F;td&gt;&lt;td&gt;0.01&lt;&#x2F;td&gt;&lt;td&gt;0.14&lt;&#x2F;td&gt;&lt;td&gt;2.35&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;10,753&lt;&#x2F;td&gt;&lt;td&gt;419&lt;&#x2F;td&gt;&lt;td&gt;10,451&lt;&#x2F;td&gt;&lt;td&gt;296&lt;&#x2F;td&gt;&lt;td&gt;0.01&lt;&#x2F;td&gt;&lt;td&gt;0.15&lt;&#x2F;td&gt;&lt;td&gt;8.07&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;1-chu-ci-qing-qiu-yu-gui-hua-jie-duan&quot;&gt;1. 初次请求与规划阶段&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:09:37 - openhands:DEBUG: llm.py:561 - Cost: 0.10 USD | Accumulated Cost: 0.10 USD
&lt;&#x2F;span&gt;&lt;span&gt;Response Latency: 58.893 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens: 5411 | Output tokens: 4202
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens (cache write): 5407
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;第一次调用是成本最高的，分析如下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;输入成本：5411 tokens × $0.000003 = $0.0162&lt;&#x2F;li&gt;
&lt;li&gt;输出成本：4202 tokens × $0.000015 = $0.0630&lt;&#x2F;li&gt;
&lt;li&gt;缓存写入成本：5407 tokens × $0.00000375 - 5411 tokens × $0.000003 = $0.0001&lt;&#x2F;li&gt;
&lt;li&gt;总成本：约$0.10&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-wen-jian-chuang-jian-hou-de-zhi-ling-gui-hua&quot;&gt;2. 文件创建后的指令规划&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:09:40 - openhands:DEBUG: llm.py:561 - Cost: 0.03 USD | Accumulated Cost: 0.13 USD
&lt;&#x2F;span&gt;&lt;span&gt;Response Latency: 3.062 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens: 9639 | Output tokens: 102
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens (cache hit): 5407
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens (cache write): 4226
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;第二次调用成本大幅降低：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;缓存命中节省：5407 tokens (使用缓存，成本为 5407 × $0.0000003 = $0.0016，比正常输入节省了97%)&lt;&#x2F;li&gt;
&lt;li&gt;新增输入成本：4232 tokens × $0.000003 = $0.0127&lt;&#x2F;li&gt;
&lt;li&gt;输出成本：102 tokens × $0.000015 = $0.0015&lt;&#x2F;li&gt;
&lt;li&gt;缓存写入成本：4226 tokens × ($0.00000375 - $0.000003) = $0.0003&lt;&#x2F;li&gt;
&lt;li&gt;总成本：约$0.03&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-yi-lai-an-zhuang-hou-de-zhi-ling-gui-hua&quot;&gt;3. 依赖安装后的指令规划&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:09:45 - openhands:DEBUG: llm.py:561 - Cost: 0.01 USD | Accumulated Cost: 0.14 USD
&lt;&#x2F;span&gt;&lt;span&gt;Response Latency: 2.354 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens: 10457 | Output tokens: 99
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens (cache hit): 9633
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens (cache write): 818
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;第三次调用成本进一步降低：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;缓存命中节省：9633 tokens (缓存成本 $0.0029，比正常输入节省了97%)&lt;&#x2F;li&gt;
&lt;li&gt;新增输入成本：824 tokens × $0.000003 = $0.0025&lt;&#x2F;li&gt;
&lt;li&gt;输出成本：99 tokens × $0.000015 = $0.0015&lt;&#x2F;li&gt;
&lt;li&gt;缓存写入成本：818 tokens × ($0.00000375 - $0.000003) = $0.0001&lt;&#x2F;li&gt;
&lt;li&gt;总成本：约$0.01&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-ying-yong-qi-dong-hou-de-zui-zhong-hui-fu&quot;&gt;4. 应用启动后的最终回复&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:10:24 - openhands:DEBUG: llm.py:561 - Cost: 0.01 USD | Accumulated Cost: 0.15 USD
&lt;&#x2F;span&gt;&lt;span&gt;Response Latency: 8.065 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens: 10753 | Output tokens: 419
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens (cache hit): 10451
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens (cache write): 296
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最终调用：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;缓存命中节省：10451 tokens (缓存成本 $0.0031，比正常输入节省了97%)&lt;&#x2F;li&gt;
&lt;li&gt;新增输入成本：302 tokens × $0.000003 = $0.0009&lt;&#x2F;li&gt;
&lt;li&gt;输出成本：419 tokens × $0.000015 = $0.0063&lt;&#x2F;li&gt;
&lt;li&gt;缓存写入成本：296 tokens × ($0.00000375 - $0.000003) = $0.0000&lt;&#x2F;li&gt;
&lt;li&gt;总成本：约$0.01&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-ren-wu-zong-cheng-ben&quot;&gt;5. 任务总成本&lt;&#x2F;h3&gt;
&lt;p&gt;整个任务的累计成本为$0.15259，共处理了：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;输入tokens：36,260 tokens (含重复)&lt;&#x2F;li&gt;
&lt;li&gt;缓存命中：25,491 tokens (占70.3%)&lt;&#x2F;li&gt;
&lt;li&gt;实际计费输入令牌：10,769 (未命中缓存的部分)&lt;&#x2F;li&gt;
&lt;li&gt;输出tokens：4,822 tokens&lt;&#x2F;li&gt;
&lt;li&gt;实际编码工作：创建了一个完整的Flask网页应用&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;平均每1000个输出令牌成本&lt;&#x2F;strong&gt;: $0.03164&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;si-cheng-ben-xiao-lu-fen-xi&quot;&gt;四、成本效率分析&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-huan-cun-ji-zhi-de-xian-zhu-xiao-yi&quot;&gt;1. 缓存机制的显著效益&lt;&#x2F;h3&gt;
&lt;p&gt;通过对日志的分析，我们发现缓存机制极大地降低了API调用成本：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;调用序号&lt;&#x2F;th&gt;&lt;th&gt;缓存命中率&lt;&#x2F;th&gt;&lt;th&gt;成本降低比例&lt;&#x2F;th&gt;&lt;th&gt;延迟时间&lt;&#x2F;th&gt;&lt;th&gt;处理速率(tokens&#x2F;秒)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0%&lt;&#x2F;td&gt;&lt;td&gt;0%&lt;&#x2F;td&gt;&lt;td&gt;58.89秒&lt;&#x2F;td&gt;&lt;td&gt;163&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;56.1%&lt;&#x2F;td&gt;&lt;td&gt;75.4%&lt;&#x2F;td&gt;&lt;td&gt;3.06秒&lt;&#x2F;td&gt;&lt;td&gt;3,142&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;92.1%&lt;&#x2F;td&gt;&lt;td&gt;92.3%&lt;&#x2F;td&gt;&lt;td&gt;2.35秒&lt;&#x2F;td&gt;&lt;td&gt;4,398&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;97.2%&lt;&#x2F;td&gt;&lt;td&gt;93.9%&lt;&#x2F;td&gt;&lt;td&gt;8.07秒&lt;&#x2F;td&gt;&lt;td&gt;1,380&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;随着会话进行，缓存命中率不断提高，第四次API调用的缓存命中率达到了惊人的97.2%，这不仅降低了成本，也显著提高了响应速度。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-ling-ren-zhu-mu-de-cheng-ben-xiao-lu&quot;&gt;2. 令人瞩目的成本效率&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;首次调用成本占总成本的67%&lt;&#x2F;li&gt;
&lt;li&gt;后续三次调用虽包含大量token，但总共仅占33%的成本&lt;&#x2F;li&gt;
&lt;li&gt;平均每个输出token的综合成本为$0.000031（考虑输入成本）&lt;&#x2F;li&gt;
&lt;li&gt;对比未使用缓存的情况，节省了约65%的成本&lt;&#x2F;li&gt;
&lt;li&gt;平均每次调用成本仅为$0.03814&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;下图展示了每次调用的成本分布：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;调用成本分布 (总计 $0.15)
&lt;&#x2F;span&gt;&lt;span&gt;[█████████████████████████████████████] 67% - 首次调用 ($0.10)
&lt;&#x2F;span&gt;&lt;span&gt;[███████████] 20% - 第二次调用 ($0.03)
&lt;&#x2F;span&gt;&lt;span&gt;[████] 7% - 第三次调用 ($0.01)
&lt;&#x2F;span&gt;&lt;span&gt;[████] 7% - 第四次调用 ($0.01)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-mo-xing-yan-chi-yu-tokenguan-xi&quot;&gt;3. 模型延迟与token关系&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;处理速率分析：
&lt;&#x2F;span&gt;&lt;span&gt;第一次: 58.9秒处理9,613 tokens，处理速率163 tokens&#x2F;秒
&lt;&#x2F;span&gt;&lt;span&gt;第二次: 3.1秒处理9,741 tokens，处理速率3,142 tokens&#x2F;秒
&lt;&#x2F;span&gt;&lt;span&gt;第三次: 2.4秒处理10,556 tokens，处理速率4,398 tokens&#x2F;秒
&lt;&#x2F;span&gt;&lt;span&gt;第四次: 8.1秒处理11,172 tokens，处理速率1,380 tokens&#x2F;秒
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;从上述数据可以看出，缓存命中显著提高了处理速度，但最终回复较长时可能导致延迟增加。值得注意的是，当缓存命中率提高时，处理速率可以提升到初次请求的27倍之多。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wu-cheng-ben-you-hua-ce-lue&quot;&gt;五、成本优化策略&lt;&#x2F;h2&gt;
&lt;p&gt;基于对Claude 3.7 Sonnet模型使用成本的分析，我们提出以下优化策略：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-chong-fen-li-yong-huan-cun-ji-zhi&quot;&gt;1. 充分利用缓存机制&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;设计对话流程时保持上下文连贯性，增加缓存命中率&lt;&#x2F;li&gt;
&lt;li&gt;在系统设计中考虑缓存策略，如本例中的&lt;code&gt;caching_prompt=True&lt;&#x2F;code&gt;配置&lt;&#x2F;li&gt;
&lt;li&gt;监控缓存命中指标，识别优化机会&lt;&#x2F;li&gt;
&lt;li&gt;构建缓存预热机制，对于常见问题提前构建缓存&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-he-li-kong-zhi-shu-chu-tokenshu-liang&quot;&gt;2. 合理控制输出token数量&lt;&#x2F;h3&gt;
&lt;p&gt;由于输出token的成本是输入token的5倍，控制输出长度尤为重要：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用明确的指令限制回复长度&lt;&#x2F;li&gt;
&lt;li&gt;对于生成型任务，可以分步骤生成，减少冗余输出&lt;&#x2F;li&gt;
&lt;li&gt;在适当场景使用temperature=0，减少不必要的创意输出&lt;&#x2F;li&gt;
&lt;li&gt;针对特定场景使用&lt;code&gt;response_format&lt;&#x2F;code&gt;参数限制输出格式&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-you-hua-shang-xia-wen-chuang-kou-da-xiao&quot;&gt;3. 优化上下文窗口大小&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;定期清理不必要的上下文内容，避免无效信息占用token&lt;&#x2F;li&gt;
&lt;li&gt;使用总结代替完整历史，在保留关键信息的同时减少token用量&lt;&#x2F;li&gt;
&lt;li&gt;针对不同任务类型选择合适的上下文管理策略&lt;&#x2F;li&gt;
&lt;li&gt;实现智能上下文裁剪算法，优先保留重要内容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-mo-xing-xuan-ze-fen-ceng-ce-lue&quot;&gt;4. 模型选择分层策略&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;对于简单任务使用更轻量的模型，如Claude 3 Haiku&lt;&#x2F;li&gt;
&lt;li&gt;复杂任务才使用Claude 3.7 Sonnet等高级模型&lt;&#x2F;li&gt;
&lt;li&gt;建立模型使用成本&#x2F;效果评估矩阵，指导选型决策&lt;&#x2F;li&gt;
&lt;li&gt;实现级联调用架构，由简单模型决定是否需要调用高级模型&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;liu-mo-xing-biao-xian-yu-jie-zhi-ping-gu&quot;&gt;六、模型表现与价值评估&lt;&#x2F;h2&gt;
&lt;p&gt;从日志中可以看出，Claude 3.7 Sonnet在以下方面表现出色：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;技术理解能力&lt;&#x2F;strong&gt;：正确识别了需要使用Flask框架创建网页应用&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;编程能力&lt;&#x2F;strong&gt;：生成了可直接运行的代码，包括正确的语法和逻辑&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;依赖推理&lt;&#x2F;strong&gt;：自主判断并安装了必要的依赖包&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;问题解决能力&lt;&#x2F;strong&gt;：完成了从简单指令到实际可用应用的转换&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这些能力在$0.15美元的成本下交付，相比人工开发的时间成本和机会成本，呈现出显著的经济价值。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cheng-ben-yu-xiao-yi-dui-bi-fen-xi&quot;&gt;成本与效益对比分析&lt;&#x2F;h3&gt;
&lt;p&gt;如果由人类开发者完成同样的任务：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;资源类型&lt;&#x2F;th&gt;&lt;th&gt;人工开发&lt;&#x2F;th&gt;&lt;th&gt;Claude 3.7 Sonnet&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;开发时间&lt;&#x2F;td&gt;&lt;td&gt;1-2小时&lt;&#x2F;td&gt;&lt;td&gt;2分钟&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;成本&lt;&#x2F;td&gt;&lt;td&gt;$50-$200&lt;&#x2F;td&gt;&lt;td&gt;$0.15&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;迭代周期&lt;&#x2F;td&gt;&lt;td&gt;长&lt;&#x2F;td&gt;&lt;td&gt;即时&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;可扩展性&lt;&#x2F;td&gt;&lt;td&gt;需要更多人力&lt;&#x2F;td&gt;&lt;td&gt;可无限扩展&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;从这个对比可以看出，即使考虑到人工复核和调整的时间，使用Claude 3.7 Sonnet进行开发仍然具有显著的成本优势。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-jie-lun-yu-zhan-wang&quot;&gt;七、结论与展望&lt;&#x2F;h2&gt;
&lt;p&gt;通过分析Claude 3.7 Sonnet模型在实际应用场景中的成本构成，我们可以得出以下结论：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Claude 3.7 Sonnet的定价结构设计合理，通过缓存机制能够有效降低成本&lt;&#x2F;li&gt;
&lt;li&gt;连续多轮对话具有明显的成本效率，初次调用后成本显著下降&lt;&#x2F;li&gt;
&lt;li&gt;通过策略优化，可以在保持或提高模型效用的同时，大幅降低使用成本&lt;&#x2F;li&gt;
&lt;li&gt;模型性能表现良好：除首次调用外，其他响应时间均较短，用户体验良好&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;wei-lai-qu-shi-yu-ce&quot;&gt;未来趋势预测&lt;&#x2F;h3&gt;
&lt;p&gt;随着大语言模型技术的不断发展，我们预计将看到以下趋势：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;定价结构更加精细化&lt;&#x2F;strong&gt;：根据不同类型的操作和任务调整价格&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;缓存技术进一步增强&lt;&#x2F;strong&gt;：更智能的缓存策略将进一步降低运行成本&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;多层级模型架构普及&lt;&#x2F;strong&gt;：根据任务复杂度自动选择适当的模型层级&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;本地与云混合部署&lt;&#x2F;strong&gt;：结合本地运行和云服务的优势，进一步优化成本结构&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;如果您正在使用Claude等大模型进行业务开发，希望本文的数据分析和优化建议能为您提供参考。欢迎在评论区分享您的使用经验和成本优化策略！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 运行流程分析：杭州三天旅游案例</title>
        <published>2025-04-11T00:00:00+00:00</published>
        <updated>2025-04-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-running-logic-analysis/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-running-logic-analysis/</id>
        
        <content type="html">&lt;h2 id=&quot;yi-zheng-ti-jia-gou-gai-shu&quot;&gt;一、整体架构概述&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 是一个基于 Agent Hub 的智能端到端编码平台，通过多个组件的协同工作来完成用户任务。从日志可以看出，系统主要包括以下核心部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;会话管理器 (Conversation Manager)&lt;&#x2F;strong&gt;：负责创建、管理和跟踪对话&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;代理控制器 (Agent Controller)&lt;&#x2F;strong&gt;：协调各组件的工作流程&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;大模型组件 (LLM)&lt;&#x2F;strong&gt;：使用 Claude 3.7 Sonnet 进行核心推理&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;运行时环境 (Runtime)&lt;&#x2F;strong&gt;：在 Docker 容器中提供安全的执行环境&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Agent工具集 (Agent Tools)&lt;&#x2F;strong&gt;：包括文件操作、命令执行等各种工具&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;事件流系统 (Event Stream)&lt;&#x2F;strong&gt;：所有组件通过事件流进行通信&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;details&gt;
&lt;summary&gt;OpenHands执行流程日志 (点击展开)&lt;&#x2F;summary&gt;
&lt;h2 id=&quot;12-08-07-openhands-info-manage-conversations-py-148-initializing-new-conversation12-08-07-openhands-info-manage-conversations-py-54-creating-conversation12-08-07-openhands-info-manage-conversations-py-58-loading-settings12-08-07-openhands-info-manage-conversations-py-61-settings-loaded12-08-07-openhands-info-manage-conversations-py-85-loading-conversation-store12-08-07-openhands-info-manage-conversations-py-87-conversation-store-loaded12-08-07-openhands-info-manage-conversations-py-93-new-conversation-id-740715d40a3c4be385b644a20b0fdfaf12-08-07-openhands-info-manage-conversations-py-103-saving-metadata-for-conversation-740715d40a3c4be385b644a20b0fdfaf12-08-07-openhands-info-manage-conversations-py-115-starting-agent-loop-for-conversation-740715d40a3c4be385b644a20b0fdfaf12-08-07-openhands-info-standalone-conversation-manager-py-259-maybe-start-agent-loop-740715d40a3c4be385b644a20b0fdfaf12-08-07-openhands-info-standalone-conversation-manager-py-262-start-agent-loop-740715d40a3c4be385b644a20b0fdfaf12-08-07-openhands-debug-stream-py-96-no-events-found-for-session-740715d40a3c4be385b644a20b0fdfaf12-08-07-openhands-info-standalone-conversation-manager-py-312-get-event-stream-740715d40a3c4be385b644a20b0fdfaf12-08-07-openhands-info-standalone-conversation-manager-py-315-found-local-agent-loop-740715d40a3c4be385b644a20b0fdfaf12-08-07-openhands-info-manage-conversations-py-136-finished-initializing-conversation-740715d40a3c4be385b644a20b0fdfaf12-08-07-openhands-debug-stream-py-273-adding-agentstatechangedobservation-id-0-from-environment12-08-07-openhands-debug-llm-py-126-llm-model-has-vision-enabled12-08-07-openhands-debug-llm-py-128-llm-caching-prompt-enabled12-08-07-openhands-debug-llm-py-130-llm-model-supports-function-calling12-08-07-openhands-info-session-py-121-enabling-default-condenser-type-llm-llm-config-llmconfig-model-anthropic-claude-3-7-sonnet-20250219-api-key-base-url-none-api-version-none-aws-access-key-id-aws-secret-access-key-aws-region-name-none-openrouter-site-url-https-docs-all-hands-dev-openrouter-app-name-openhands-num-retries-4-retry-multiplier-2-retry-min-wait-5-retry-max-wait-30-timeout-none-max-message-chars-30000-temperature-0-0-top-p-1-0-custom-llm-provider-none-max-input-tokens-200000-max-output-tokens-64000-input-cost-per-token-none-output-cost-per-token-none-ollama-base-url-none-drop-params-true-modify-params-true-disable-vision-none-caching-prompt-true-log-completions-false-log-completions-folder-home-ubuntu-github-workspace-pro-agent-logs-completions-custom-tokenizer-none-native-tool-calling-none-reasoning-effort-high-keep-first-3-max-size-4012-08-07-openhands-debug-codeact-agent-py-75-tools-loaded-for-codeactagent-execute-bash-think-finish-web-read-browser-execute-ipython-cell-str-replace-editor12-08-07-openhands-debug-llm-py-385-model-info-key-claude-3-7-sonnet-20250219-max-tokens-128000-max-input-tokens-200000-max-output-tokens-128000-input-cost-per-token-3e-06-cache-creation-input-token-cost-3-75e-06-cache-read-input-token-cost-3e-07-input-cost-per-character-null-input-cost-per-token-above-128k-tokens-null-input-cost-per-query-null-input-cost-per-second-null-input-cost-per-audio-token-null-input-cost-per-token-batches-null-output-cost-per-token-batches-null-output-cost-per-token-1-5e-05-output-cost-per-audio-token-null-output-cost-per-character-null-output-cost-per-token-above-128k-tokens-null-output-cost-per-character-above-128k-tokens-null-output-cost-per-second-null-output-cost-per-image-null-output-vector-size-null-litellm-provider-anthropic-mode-chat-supports-system-messages-null-supports-response-schema-true-supports-vision-true-supports-function-calling-true-supports-tool-choice-true-supports-assistant-prefill-true-supports-prompt-caching-true-supports-audio-input-false-supports-audio-output-false-supports-pdf-input-true-supports-embedding-image-input-false-supports-native-streaming-null-tpm-null-rpm-null-supported-openai-params-stream-stop-temperature-top-p-max-tokens-max-completion-tokens-tools-tool-choice-extra-headers-parallel-tool-calls-response-format-user-thinking-12-08-07-openhands-debug-llm-py-126-llm-model-has-vision-enabled12-08-07-openhands-debug-llm-py-128-llm-caching-prompt-enabled12-08-07-openhands-debug-llm-py-130-llm-model-supports-function-calling12-08-07-openhands-debug-codeact-agent-py-86-using-condenser-class-openhands-memory-condenser-impl-llm-summarizing-condenser-llmsummarizingcondenser-12-08-07-openhands-warning-app-config-py-99-llm-config-group-gpt3-not-found-using-default-config12-08-07-openhands-debug-agent-session-py-232-initializing-runtime-docker-now-12-08-08-openhands-info-runtime-build-py-182-building-image-ghcr-io-all-hands-ai-runtime-oh-v0-29-1-05sp9yfx3qcxs36a-glqmvuuklhkqib9w12-08-08-openhands-debug-docker-py-254-checking-if-image-exists-locally-ghcr-io-all-hands-ai-runtime-oh-v0-29-1-05sp9yfx3qcxs36a-glqmvuuklhkqib9w12-08-08-openhands-debug-docker-py-256-image-found-locally-12-08-08-openhands-debug-runtime-build-py-211-reusing-image-ghcr-io-all-hands-ai-runtime-oh-v0-29-1-05sp9yfx3qcxs36a-glqmvuuklhkqib9w-12-08-08-openhands-info-docker-runtime-py-140-runtime-740715d40a3c4be385b644a20b0fdfaf-starting-runtime-with-image-ghcr-io-all-hands-ai-runtime-oh-v0-29-1-05sp9yfx3qcxs36a-glqmvuuklhkqib9w12-08-08-openhands-debug-docker-runtime-py-186-runtime-740715d40a3c4be385b644a20b0fdfaf-preparing-to-start-container-12-08-08-openhands-debug-docker-runtime-py-244-runtime-740715d40a3c4be385b644a20b0fdfaf-workspace-base-home-ubuntu-github-workspace-pro-agent-workspace12-08-08-openhands-debug-docker-runtime-py-256-mount-dir-home-ubuntu-github-workspace-pro-agent-workspace12-08-08-openhands-debug-docker-runtime-py-262-runtime-740715d40a3c4be385b644a20b0fdfaf-sandbox-workspace-workspace12-08-08-openhands-info-listen-socket-py-32-sio-connect-srjs3cbdfcdebgmoaaad12-08-08-openhands-info-standalone-conversation-manager-py-116-join-conversation-740715d40a3c4be385b644a20b0fdfaf-srjs3cbdfcdebgmoaaad12-08-08-openhands-info-standalone-conversation-manager-py-312-get-event-stream-740715d40a3c4be385b644a20b0fdfaf12-08-08-openhands-info-standalone-conversation-manager-py-315-found-local-agent-loop-740715d40a3c4be385b644a20b0fdfaf12-08-08-openhands-debug-docker-runtime-py-291-runtime-740715d40a3c4be385b644a20b0fdfaf-container-started-server-url-http-localhost-3995512-08-08-openhands-info-docker-runtime-py-144-runtime-740715d40a3c4be385b644a20b0fdfaf-container-started-openhands-runtime-740715d40a3c4be385b644a20b0fdfaf-vscode-url-none12-08-08-openhands-info-docker-runtime-py-155-runtime-740715d40a3c4be385b644a20b0fdfaf-waiting-for-client-to-become-ready-at-http-localhost-39955-12-08-38-openhands-info-docker-runtime-py-161-runtime-740715d40a3c4be385b644a20b0fdfaf-runtime-is-ready-12-08-38-openhands-debug-base-py-141-adding-env-vars-dict-keys-12-08-38-openhands-debug-base-py-183-added-env-vars-to-ipython12-08-38-openhands-debug-docker-runtime-py-166-runtime-740715d40a3c4be385b644a20b0fdfaf-container-initialized-with-plugins-agent-skills-jupyter-vscode-vscode-url-none12-08-38-openhands-debug-agent-session-py-281-runtime-initialized-with-plugins-agent-skills-jupyter-vscode-12-08-38-openhands-debug-agent-session-py-325-openhands-configuration-llm-anthropic-claude-3-7-sonnet-20250219base-url-noneagent-codeactagentruntime-dockerruntimeplugins-agentskillsrequirement-name-agent-skills-documentation-open-file-path-str-line-number-int-none-1-context-lines-int-none-100-none-n-opens-a-file-in-the-editor-and-optionally-positions-at-a-specific-line-n-the-function-displays-a-limited-window-of-content-centered-around-the-specified-line-n-number-if-provided-to-view-the-complete-file-content-the-agent-should-use-scroll-down-and-scroll-up-n-commands-iteratively-n-args-n-path-the-path-to-the-file-to-open-absolute-path-is-recommended-n-line-number-the-target-line-number-to-center-the-view-on-if-possible-n-defaults-to-1-n-context-lines-maximum-number-of-lines-to-display-in-the-view-window-n-limited-to-100-lines-defaults-to-100-n-ngoto-line-line-number-int-none-n-moves-the-window-to-show-the-specified-line-number-n-args-n-line-number-int-the-line-number-to-move-to-n-nscroll-down-none-n-moves-the-window-down-by-100-lines-n-args-n-none-n-nscroll-up-none-n-moves-the-window-up-by-100-lines-n-args-n-none-n-nsearch-dir-search-term-str-dir-path-str-none-n-searches-for-search-term-in-all-files-in-dir-if-dir-is-not-provided-searches-in-the-current-directory-n-args-n-search-term-str-the-term-to-search-for-n-dir-path-str-the-path-to-the-directory-to-search-n-nsearch-file-search-term-str-file-path-str-none-none-none-n-searches-for-search-term-in-file-if-file-is-not-provided-searches-in-the-current-open-file-n-args-n-search-term-the-term-to-search-for-n-file-path-the-path-to-the-file-to-search-n-nfind-file-file-name-str-dir-path-str-none-n-finds-all-files-with-the-given-name-in-the-specified-directory-n-args-n-file-name-str-the-name-of-the-file-to-find-n-dir-path-str-the-path-to-the-directory-to-search-n-nparse-pdf-file-path-str-none-n-parses-the-content-of-a-pdf-file-and-prints-it-n-args-n-file-path-str-the-path-to-the-file-to-open-n-nparse-docx-file-path-str-none-n-parses-the-content-of-a-docx-file-and-prints-it-n-args-n-file-path-str-the-path-to-the-file-to-open-n-nparse-latex-file-path-str-none-n-parses-the-content-of-a-latex-file-and-prints-it-n-args-n-file-path-str-the-path-to-the-file-to-open-n-nparse-pptx-file-path-str-none-n-parses-the-content-of-a-pptx-file-and-prints-it-n-args-n-file-path-str-the-path-to-the-file-to-open-n-n-jupyterrequirement-name-jupyter&quot;&gt;12:08:07 - openhands:INFO: manage_conversations.py:148 - Initializing new conversation
12:08:07 - openhands:INFO: manage_conversations.py:54 - Creating conversation
12:08:07 - openhands:INFO: manage_conversations.py:58 - Loading settings
12:08:07 - openhands:INFO: manage_conversations.py:61 - Settings loaded
12:08:07 - openhands:INFO: manage_conversations.py:85 - Loading conversation store
12:08:07 - openhands:INFO: manage_conversations.py:87 - Conversation store loaded
12:08:07 - openhands:INFO: manage_conversations.py:93 - New conversation ID: 740715d40a3c4be385b644a20b0fdfaf
12:08:07 - openhands:INFO: manage_conversations.py:103 - Saving metadata for conversation 740715d40a3c4be385b644a20b0fdfaf
12:08:07 - openhands:INFO: manage_conversations.py:115 - Starting agent loop for conversation 740715d40a3c4be385b644a20b0fdfaf
12:08:07 - openhands:INFO: standalone_conversation_manager.py:259 - maybe_start_agent_loop:740715d40a3c4be385b644a20b0fdfaf
12:08:07 - openhands:INFO: standalone_conversation_manager.py:262 - start_agent_loop:740715d40a3c4be385b644a20b0fdfaf
12:08:07 - openhands:DEBUG: stream.py:96 - No events found for session 740715d40a3c4be385b644a20b0fdfaf
12:08:07 - openhands:INFO: standalone_conversation_manager.py:312 - _get_event_stream:740715d40a3c4be385b644a20b0fdfaf
12:08:07 - openhands:INFO: standalone_conversation_manager.py:315 - found_local_agent_loop:740715d40a3c4be385b644a20b0fdfaf
12:08:07 - openhands:INFO: manage_conversations.py:136 - Finished initializing conversation 740715d40a3c4be385b644a20b0fdfaf
12:08:07 - openhands:DEBUG: stream.py:273 - Adding AgentStateChangedObservation id=0 from ENVIRONMENT
12:08:07 - openhands:DEBUG: llm.py:126 - LLM: model has vision enabled
12:08:07 - openhands:DEBUG: llm.py:128 - LLM: caching prompt enabled
12:08:07 - openhands:DEBUG: llm.py:130 - LLM: model supports function calling
12:08:07 - openhands:INFO: session.py:121 - Enabling default condenser: type=&#x27;llm&#x27; llm_config=LLMConfig(model=&#x27;anthropic&#x2F;claude-3-7-sonnet-20250219&#x27;, api_key=&#x27;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&#x27;(&#x27;&lt;&#x2F;strong&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;strong&gt;&lt;strong&gt;&lt;strong&gt;&#x27;), base_url=None, api_version=None, aws_access_key_id=&#x27;&lt;&#x2F;strong&gt;&lt;&#x2F;strong&gt;&lt;strong&gt;&#x27;, aws_secret_access_key=&#x27;&lt;&#x2F;strong&gt;****&#x27;, aws_region_name=None, openrouter_site_url=&#x27;https:&#x2F;&#x2F;docs.all-hands.dev&#x2F;&#x27;, openrouter_app_name=&#x27;OpenHands&#x27;, num_retries=4, retry_multiplier=2, retry_min_wait=5, retry_max_wait=30, timeout=None, max_message_chars=30000, temperature=0.0, top_p=1.0, custom_llm_provider=None, max_input_tokens=200000, max_output_tokens=64000, input_cost_per_token=None, output_cost_per_token=None, ollama_base_url=None, drop_params=True, modify_params=True, disable_vision=None, caching_prompt=True, log_completions=False, log_completions_folder=&#x27;&#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;logs&#x2F;completions&#x27;, custom_tokenizer=None, native_tool_calling=None, reasoning_effort=&#x27;high&#x27;) keep_first=3 max_size=40
12:08:07 - openhands:DEBUG: codeact_agent.py:75 - TOOLS loaded for CodeActAgent: execute_bash, think, finish, web_read, browser, execute_ipython_cell, str_replace_editor
12:08:07 - openhands:DEBUG: llm.py:385 - Model info: {
&amp;quot;key&amp;quot;: &amp;quot;claude-3-7-sonnet-20250219&amp;quot;,
&amp;quot;max_tokens&amp;quot;: 128000,
&amp;quot;max_input_tokens&amp;quot;: 200000,
&amp;quot;max_output_tokens&amp;quot;: 128000,
&amp;quot;input_cost_per_token&amp;quot;: 3e-06,
&amp;quot;cache_creation_input_token_cost&amp;quot;: 3.75e-06,
&amp;quot;cache_read_input_token_cost&amp;quot;: 3e-07,
&amp;quot;input_cost_per_character&amp;quot;: null,
&amp;quot;input_cost_per_token_above_128k_tokens&amp;quot;: null,
&amp;quot;input_cost_per_query&amp;quot;: null,
&amp;quot;input_cost_per_second&amp;quot;: null,
&amp;quot;input_cost_per_audio_token&amp;quot;: null,
&amp;quot;input_cost_per_token_batches&amp;quot;: null,
&amp;quot;output_cost_per_token_batches&amp;quot;: null,
&amp;quot;output_cost_per_token&amp;quot;: 1.5e-05,
&amp;quot;output_cost_per_audio_token&amp;quot;: null,
&amp;quot;output_cost_per_character&amp;quot;: null,
&amp;quot;output_cost_per_token_above_128k_tokens&amp;quot;: null,
&amp;quot;output_cost_per_character_above_128k_tokens&amp;quot;: null,
&amp;quot;output_cost_per_second&amp;quot;: null,
&amp;quot;output_cost_per_image&amp;quot;: null,
&amp;quot;output_vector_size&amp;quot;: null,
&amp;quot;litellm_provider&amp;quot;: &amp;quot;anthropic&amp;quot;,
&amp;quot;mode&amp;quot;: &amp;quot;chat&amp;quot;,
&amp;quot;supports_system_messages&amp;quot;: null,
&amp;quot;supports_response_schema&amp;quot;: true,
&amp;quot;supports_vision&amp;quot;: true,
&amp;quot;supports_function_calling&amp;quot;: true,
&amp;quot;supports_tool_choice&amp;quot;: true,
&amp;quot;supports_assistant_prefill&amp;quot;: true,
&amp;quot;supports_prompt_caching&amp;quot;: true,
&amp;quot;supports_audio_input&amp;quot;: false,
&amp;quot;supports_audio_output&amp;quot;: false,
&amp;quot;supports_pdf_input&amp;quot;: true,
&amp;quot;supports_embedding_image_input&amp;quot;: false,
&amp;quot;supports_native_streaming&amp;quot;: null,
&amp;quot;tpm&amp;quot;: null,
&amp;quot;rpm&amp;quot;: null,
&amp;quot;supported_openai_params&amp;quot;: [
&amp;quot;stream&amp;quot;,
&amp;quot;stop&amp;quot;,
&amp;quot;temperature&amp;quot;,
&amp;quot;top_p&amp;quot;,
&amp;quot;max_tokens&amp;quot;,
&amp;quot;max_completion_tokens&amp;quot;,
&amp;quot;tools&amp;quot;,
&amp;quot;tool_choice&amp;quot;,
&amp;quot;extra_headers&amp;quot;,
&amp;quot;parallel_tool_calls&amp;quot;,
&amp;quot;response_format&amp;quot;,
&amp;quot;user&amp;quot;,
&amp;quot;thinking&amp;quot;
]
}
12:08:07 - openhands:DEBUG: llm.py:126 - LLM: model has vision enabled
12:08:07 - openhands:DEBUG: llm.py:128 - LLM: caching prompt enabled
12:08:07 - openhands:DEBUG: llm.py:130 - LLM: model supports function calling
12:08:07 - openhands:DEBUG: codeact_agent.py:86 - Using condenser: &amp;lt;class &#x27;openhands.memory.condenser.impl.llm_summarizing_condenser.LLMSummarizingCondenser&#x27;&amp;gt;
12:08:07 - openhands:WARNING: app_config.py:99 - llm config group gpt3 not found, using default config
12:08:07 - openhands:DEBUG: agent_session.py:232 - Initializing runtime &lt;code&gt;docker&lt;&#x2F;code&gt; now...
12:08:08 - openhands:INFO: runtime_build.py:182 - Building image: ghcr.io&#x2F;all-hands-ai&#x2F;runtime:oh_v0.29.1_05sp9yfx3qcxs36a_glqmvuuklhkqib9w
12:08:08 - openhands:DEBUG: docker.py:254 - Checking, if image exists locally:
ghcr.io&#x2F;all-hands-ai&#x2F;runtime:oh_v0.29.1_05sp9yfx3qcxs36a_glqmvuuklhkqib9w
12:08:08 - openhands:DEBUG: docker.py:256 - Image found locally.
12:08:08 - openhands:DEBUG: runtime_build.py:211 - Reusing Image [ghcr.io&#x2F;all-hands-ai&#x2F;runtime:oh_v0.29.1_05sp9yfx3qcxs36a_glqmvuuklhkqib9w]
12:08:08 - openhands:INFO: docker_runtime.py:140 - [runtime 740715d40a3c4be385b644a20b0fdfaf] Starting runtime with image: ghcr.io&#x2F;all-hands-ai&#x2F;runtime:oh_v0.29.1_05sp9yfx3qcxs36a_glqmvuuklhkqib9w
12:08:08 - openhands:DEBUG: docker_runtime.py:186 - [runtime 740715d40a3c4be385b644a20b0fdfaf] Preparing to start container...
12:08:08 - openhands:DEBUG: docker_runtime.py:244 - [runtime 740715d40a3c4be385b644a20b0fdfaf] Workspace Base: &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;workspace
12:08:08 - openhands:DEBUG: docker_runtime.py:256 - Mount dir: &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;workspace
12:08:08 - openhands:DEBUG: docker_runtime.py:262 - [runtime 740715d40a3c4be385b644a20b0fdfaf] Sandbox workspace: &#x2F;workspace
12:08:08 - openhands:INFO: listen_socket.py:32 - sio:connect: SRJs3cbDFCDEbGmoAAAD
12:08:08 - openhands:INFO: standalone_conversation_manager.py:116 - join_conversation:740715d40a3c4be385b644a20b0fdfaf:SRJs3cbDFCDEbGmoAAAD
12:08:08 - openhands:INFO: standalone_conversation_manager.py:312 - _get_event_stream:740715d40a3c4be385b644a20b0fdfaf
12:08:08 - openhands:INFO: standalone_conversation_manager.py:315 - found_local_agent_loop:740715d40a3c4be385b644a20b0fdfaf
12:08:08 - openhands:DEBUG: docker_runtime.py:291 - [runtime 740715d40a3c4be385b644a20b0fdfaf] Container started. Server url: http:&#x2F;&#x2F;localhost:39955
12:08:08 - openhands:INFO: docker_runtime.py:144 - [runtime 740715d40a3c4be385b644a20b0fdfaf] Container started: openhands-runtime-740715d40a3c4be385b644a20b0fdfaf. VSCode URL: None
12:08:08 - openhands:INFO: docker_runtime.py:155 - [runtime 740715d40a3c4be385b644a20b0fdfaf] Waiting for client to become ready at http:&#x2F;&#x2F;localhost:39955...
12:08:38 - openhands:INFO: docker_runtime.py:161 - [runtime 740715d40a3c4be385b644a20b0fdfaf] Runtime is ready.
12:08:38 - openhands:DEBUG: base.py:141 - Adding env vars: dict_keys([])
12:08:38 - openhands:DEBUG: base.py:183 - Added env vars to IPython
12:08:38 - openhands:DEBUG: docker_runtime.py:166 - [runtime 740715d40a3c4be385b644a20b0fdfaf] Container initialized with plugins: [&#x27;agent_skills&#x27;, &#x27;jupyter&#x27;, &#x27;vscode&#x27;]. VSCode URL: None
12:08:38 - openhands:DEBUG: agent_session.py:281 - Runtime initialized with plugins: [&#x27;agent_skills&#x27;, &#x27;jupyter&#x27;, &#x27;vscode&#x27;]
12:08:38 - openhands:DEBUG: agent_session.py:325 - 
--------------------------------- OpenHands Configuration ---------------------------------
LLM: anthropic&#x2F;claude-3-7-sonnet-20250219
Base URL: None
Agent: CodeActAgent
Runtime: DockerRuntime
Plugins: [AgentSkillsRequirement(name=&#x27;agent_skills&#x27;, documentation=&amp;quot;open_file(path: str, line_number: int | None = 1, context_lines: int | None = 100) -&amp;gt; None:\n    Opens a file in the editor and optionally positions at a specific line.\n    The function displays a limited window of content, centered around the specified line\n    number if provided. To view the complete file content, the agent should use scroll_down and scroll_up\n    commands iteratively.\n    Args:\n    path: The path to the file to open. Absolute path is recommended.\n    line_number: The target line number to center the view on (if possible).\n    Defaults to 1.\n    context_lines: Maximum number of lines to display in the view window.\n    Limited to 100 lines. Defaults to 100.\n\ngoto_line(line_number: int) -&amp;gt; None:\n    Moves the window to show the specified line number.\n    Args:\n    line_number: int: The line number to move to.\n\nscroll_down() -&amp;gt; None:\n    Moves the window down by 100 lines.\n    Args:\n    None\n\nscroll_up() -&amp;gt; None:\n    Moves the window up by 100 lines.\n    Args:\n    None\n\nsearch_dir(search_term: str, dir_path: str = &#x27;.&#x2F;&#x27;) -&amp;gt; None:\n    Searches for search_term in all files in dir. If dir is not provided, searches in the current directory.\n    Args:\n    search_term: str: The term to search for.\n    dir_path: str: The path to the directory to search.\n\nsearch_file(search_term: str, file_path: str | None = None) -&amp;gt; None:\n    Searches for search_term in file. If file is not provided, searches in the current open file.\n    Args:\n    search_term: The term to search for.\n    file_path: The path to the file to search.\n\nfind_file(file_name: str, dir_path: str = &#x27;.&#x2F;&#x27;) -&amp;gt; None:\n    Finds all files with the given name in the specified directory.\n    Args:\n    file_name: str: The name of the file to find.\n    dir_path: str: The path to the directory to search.\n\nparse_pdf(file_path: str) -&amp;gt; None:\n    Parses the content of a PDF file and prints it.\n    Args:\n    file_path: str: The path to the file to open.\n\nparse_docx(file_path: str) -&amp;gt; None:\n    Parses the content of a DOCX file and prints it.\n    Args:\n    file_path: str: The path to the file to open.\n\nparse_latex(file_path: str) -&amp;gt; None:\n    Parses the content of a LaTex file and prints it.\n    Args:\n    file_path: str: The path to the file to open.\n\nparse_pptx(file_path: str) -&amp;gt; None:\n    Parses the content of a pptx file and prints it.\n    Args:\n    file_path: str: The path to the file to open.\n\n&amp;quot;), JupyterRequirement(name=&#x27;jupyter&#x27;)]&lt;&#x2F;h2&gt;
&lt;p&gt;12:08:38 - openhands:DEBUG: state.py:122 - Could not restore state from session: [Errno 2] No such file or directory: &#x27;&#x2F;tmp&#x2F;openhands_file_store&#x2F;sessions&#x2F;740715d40a3c4be385b644a20b0fdfaf&#x2F;agent_state.pkl&#x27;
12:08:38 - openhands:DEBUG: agent_session.py:381 - No events found, no state to restore
12:08:38 - openhands:DEBUG: agent_controller.py:881 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] AgentController 740715d40a3c4be385b644a20b0fdfaf - created new state. start_id: 0
12:08:38 - openhands:DEBUG: microagent.py:152 - Loading agents from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;README.md...
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;tasks&#x2F;update_test_for_new_implementation.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent update_test_for_new_implementation from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;tasks&#x2F;update_test_for_new_implementation.md
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;tasks&#x2F;get_test_to_pass.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent get_test_to_pass from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;tasks&#x2F;get_test_to_pass.md
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;tasks&#x2F;add_openhands_repo_instruction.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent add_openhands_repo_instruction from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;tasks&#x2F;add_openhands_repo_instruction.md
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;tasks&#x2F;update_pr_description.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent update_pr_description from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;tasks&#x2F;update_pr_description.md
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;tasks&#x2F;address_pr_comments.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent address_pr_comments from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;tasks&#x2F;address_pr_comments.md
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;docker.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent docker from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;docker.md
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;swift-linux.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent swift-linux from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;swift-linux.md
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;github.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent github from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;github.md
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;npm.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent npm from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;npm.md
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;kubernetes.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent kubernetes from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;kubernetes.md
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;add_agent.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent add_agent from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;add_agent.md
12:08:38 - openhands:DEBUG: microagent.py:155 - Checking file &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;flarglebargle.md...
12:08:38 - openhands:DEBUG: microagent.py:167 - Loaded agent flarglebargle from &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;microagents&#x2F;knowledge&#x2F;flarglebargle.md
12:08:38 - openhands:INFO: base.py:346 - [runtime 740715d40a3c4be385b644a20b0fdfaf] Selected repo: None, loading microagents from &#x2F;workspace&#x2F;.openhands&#x2F;microagents (inside runtime)
12:08:38 - openhands:INFO: memory.py:233 - Loading user workspace microagents: []
12:08:38 - openhands:DEBUG: stream.py:273 - Adding MessageAction id=1 from USER
12:08:38 - openhands:DEBUG: stream.py:273 - Adding ChangeAgentStateAction id=2 from ENVIRONMENT
12:08:38 - openhands:INFO: agent_session.py:161 - Agent session start
12:08:38 - openhands:DEBUG: agent_controller.py:441 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] &lt;strong&gt;MessageAction&lt;&#x2F;strong&gt; (source=EventSource.USER)
CONTENT: 给我做一个杭州三天春游的规划，给我一个可访问的web让我看规划内容
12:08:38 - openhands:DEBUG: agent_controller.py:456 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] Extended max iterations to 500 after user message
12:08:38 - openhands:DEBUG: stream.py:273 - Adding RecallAction id=3 from USER
12:08:38 - openhands:INFO: agent_controller.py:520 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
12:08:38 - openhands:DEBUG: stream.py:273 - Adding AgentStateChangedObservation id=4 from ENVIRONMENT
12:08:38 - openhands:DEBUG: memory.py:86 - Workspace context recall
12:08:38 - openhands:DEBUG: stream.py:273 - Adding RecallObservation id=5 from ENVIRONMENT
12:08:38 - openhands:INFO: agent_controller.py:520 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.RUNNING
12:08:38 - openhands:DEBUG: agent_controller.py:409 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] AgentStateChangedObservation(content=&#x27;&#x27;, agent_state=&#x27;running&#x27;, observation=&#x27;agent_state_changed&#x27;)
12:08:38 - openhands:DEBUG: agent_controller.py:409 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] &lt;strong&gt;RecallObservation&lt;&#x2F;strong&gt;
recall_type=RecallType.WORKSPACE_CONTEXT, repo_name=, repo_instructions=..., runtime_hosts={&#x27;http:&#x2F;&#x2F;localhost:53941&#x27;: 53941, &#x27;http:&#x2F;&#x2F;localhost:56576&#x27;: 56576}, additional_agent_instructions=...
12:08:38 - openhands:INFO: agent_controller.py:696 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
12:08:38 - openhands:DEBUG: codeact_agent.py:171 - Processing 3 events from a total of 3 events
12:08:38 - openhands:DEBUG: conversation_memory.py:71 - Visual browsing: False
12:08:38 - openhands:DEBUG: logger.py:445 - Logging to &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;logs&#x2F;llm&#x2F;25-04-11_12-07&#x2F;prompt_001.log
12:09:37 - openhands:DEBUG: logger.py:445 - Logging to &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;logs&#x2F;llm&#x2F;25-04-11_12-07&#x2F;response_001.log
12:09:37 - openhands:DEBUG: llm.py:561 - Cost: 0.10 USD | Accumulated Cost: 0.10 USD
Response Latency: 58.893 seconds
Input tokens: 5411 | Output tokens: 4202
Input tokens (cache write): 5407&lt;&#x2F;p&gt;
&lt;p&gt;12:09:37 - openhands:DEBUG: agent_controller.py:1171 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] Action metrics - accumulated_cost: 0.09953925, tokens (prompt&#x2F;completion&#x2F;cache_read&#x2F;cache_write): 5411&#x2F;4202&#x2F;0&#x2F;5407
12:09:37 - openhands:DEBUG: stream.py:273 - Adding FileEditAction id=6 from AGENT
12:09:37 - openhands:DEBUG: agent_controller.py:795 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] &lt;strong&gt;FileEditAction&lt;&#x2F;strong&gt;
Path: [&#x2F;tmp&#x2F;hangzhou_trip_planner.py]
Thought: 我将为您创建一个杭州三天春游的规划，并通过一个网页展示给您。我会使用Python的Flask框架来创建一个简单的网页应用。&lt;&#x2F;p&gt;
&lt;p&gt;首先，让我创建一个包含杭州三天春游规划的网页应用：
Command: create
Created File with Text:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;from flask import Flask, render_template_string
&lt;&#x2F;span&gt;&lt;span&gt;from flask_cors import CORS
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;app = Flask(__name__)
&lt;&#x2F;span&gt;&lt;span&gt;CORS(app)  # 启用CORS以允许跨域请求
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# HTML模板
&lt;&#x2F;span&gt;&lt;span&gt;HTML_TEMPLATE = &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;...&#x2F;&#x2F;省略
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@app.route(&amp;#39;&#x2F;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;def index():
&lt;&#x2F;span&gt;&lt;span&gt;    return render_template_string(HTML_TEMPLATE)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;if __name__ == &amp;#39;__main__&amp;#39;:
&lt;&#x2F;span&gt;&lt;span&gt;    app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=53941, debug=True)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;12:09:37 - openhands:DEBUG: stream.py:273 - Adding FileEditObservation id=7 from AGENT
12:09:37 - openhands:DEBUG: agent_controller.py:409 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] File created successfully at: &#x2F;tmp&#x2F;hangzhou_trip_planner.py
12:09:37 - openhands:INFO: agent_controller.py:696 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
12:09:37 - openhands:DEBUG: codeact_agent.py:171 - Processing 5 events from a total of 5 events
12:09:37 - openhands:DEBUG: conversation_memory.py:71 - Visual browsing: False
12:09:37 - openhands:DEBUG: conversation_memory.py:207 - Tool calls type: &amp;lt;class &#x27;list&#x27;&amp;gt;, value: [ChatCompletionMessageToolCall(index=1, function=Function(arguments=&#x27;{&amp;quot;command&amp;quot;: &amp;quot;create&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;&#x2F;tmp&#x2F;hangzhou_trip_planner.py&amp;quot;, &amp;quot;file_text&amp;quot;: &amp;quot;...&#x27;, name=&#x27;str_replace_editor&#x27;), id=&#x27;toolu_01SjNBn1Mkke6C1DJjkPcjsN&#x27;, type=&#x27;function&#x27;)]
12:09:37 - openhands:DEBUG: logger.py:445 - Logging to &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;logs&#x2F;llm&#x2F;25-04-11_12-07&#x2F;prompt_002.log
12:09:40 - openhands:DEBUG: logger.py:445 - Logging to &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;logs&#x2F;llm&#x2F;25-04-11_12-07&#x2F;response_002.log
12:09:40 - openhands:DEBUG: llm.py:561 - Cost: 0.03 USD | Accumulated Cost: 0.13 USD
Response Latency: 3.062 seconds
Input tokens: 9639 | Output tokens: 102
Input tokens (cache hit): 5407
Input tokens (cache write): 4226&lt;&#x2F;p&gt;
&lt;p&gt;12:09:40 - openhands:DEBUG: agent_controller.py:1171 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] Action metrics - accumulated_cost: 0.13123485000000001, tokens (prompt&#x2F;completion&#x2F;cache_read&#x2F;cache_write): 9639&#x2F;102&#x2F;5407&#x2F;4226
12:09:40 - openhands:DEBUG: stream.py:273 - Adding CmdRunAction id=8 from AGENT
12:09:40 - openhands:DEBUG: agent_controller.py:795 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] &lt;strong&gt;CmdRunAction (source=EventSource.AGENT, is_input=False)&lt;&#x2F;strong&gt;
THOUGHT: 现在，让我安装必要的依赖并运行这个网页应用：
COMMAND:
pip install flask flask-cors
12:09:42 - openhands:DEBUG: stream.py:273 - Adding CmdOutputObservation id=9 from AGENT
12:09:42 - openhands:DEBUG: agent_controller.py:409 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] &lt;strong&gt;CmdOutputObservation (source=EventSource.AGENT, exit code=0, metadata={
&amp;quot;exit_code&amp;quot;: 0,
&amp;quot;pid&amp;quot;: -1,
&amp;quot;username&amp;quot;: &amp;quot;openhands&amp;quot;,
&amp;quot;hostname&amp;quot;: &amp;quot;2d4de2f65b26&amp;quot;,
&amp;quot;working_dir&amp;quot;: &amp;quot;&#x2F;workspace&amp;quot;,
&amp;quot;py_interpreter_path&amp;quot;: &amp;quot;&#x2F;openhands&#x2F;poetry&#x2F;openhands-ai-5O4_aCHf-py3.12&#x2F;bin&#x2F;python&amp;quot;,
&amp;quot;prefix&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;suffix&amp;quot;: &amp;quot;\n[The command completed with exit code 0.]&amp;quot;
})&lt;&#x2F;strong&gt;
--BEGIN AGENT OBSERVATION--
Collecting flask
Downloading flask-3.1.0-py3-none-any.whl.metadata (2.7 kB)
Collecting flask-cors
Downloading flask_cors-5.0.1-py3-none-any.whl.metadata (961 bytes)
Collecting Werkzeug&amp;gt;=3.1 (from flask)
Downloading werkzeug-3.1.3-py3-none-any.whl.metadata (3.7 kB)
Requirement already satisfied: Jinja2&amp;gt;=3.1.2 in &#x2F;openhands&#x2F;poetry&#x2F;openhands-ai-5O4_aCHf-py3.12&#x2F;lib&#x2F;python3.12&#x2F;site-packages (from flask) (3.1.6)
Collecting itsdangerous&amp;gt;=2.2 (from flask)
Downloading itsdangerous-2.2.0-py3-none-any.whl.metadata (1.9 kB)
Requirement already satisfied: click&amp;gt;=8.1.3 in &#x2F;openhands&#x2F;poetry&#x2F;openhands-ai-5O4_aCHf-py3.12&#x2F;lib&#x2F;python3.12&#x2F;site-packages (from flask) (8.1.8)
Collecting blinker&amp;gt;=1.9 (from flask)
Downloading blinker-1.9.0-py3-none-any.whl.metadata (1.6 kB)
Requirement already satisfied: MarkupSafe&amp;gt;=2.0 in &#x2F;openhands&#x2F;poetry&#x2F;openhands-ai-5O4_aCHf-py3.12&#x2F;lib&#x2F;python3.12&#x2F;site-packages (from Jinja2&amp;gt;=3.1.2-&amp;gt;flask) (3.0.2)
Downloading flask-3.1.0-py3-none-any.whl (102 kB)
Downloading flask_cors-5.0.1-py3-none-any.whl (11 kB)
Downloading blinker-1.9.0-py3-none-any.whl (8.5 kB)
Downloading itsdangerous-2.2.0-py3-none-any.whl (16 kB)
Downloading werkzeug-3.1.3-py3-none-any.whl (224 kB)
Installing collected packages: Werkzeug, itsdangerous, blinker, flask, flask-cors
Successfully installed Werkzeug-3.1.3 blinker-1.9.0 flask-3.1.0 flask-cors-5.0.1 itsdangerous-2.2.0
[The command completed with exit code 0.]
[Current working directory: &#x2F;workspace]
[Python interpreter: &#x2F;openhands&#x2F;poetry&#x2F;openhands-ai-5O4_aCHf-py3.12&#x2F;bin&#x2F;python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
12:09:42 - openhands:INFO: agent_controller.py:696 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
12:09:42 - openhands:DEBUG: codeact_agent.py:171 - Processing 7 events from a total of 7 events
12:09:42 - openhands:DEBUG: conversation_memory.py:71 - Visual browsing: False
12:09:42 - openhands:DEBUG: conversation_memory.py:207 - Tool calls type: &amp;lt;class &#x27;list&#x27;&amp;gt;, value: [ChatCompletionMessageToolCall(index=1, function=Function(arguments=&#x27;{&amp;quot;command&amp;quot;: &amp;quot;create&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;&#x2F;tmp&#x2F;hangzhou_trip_planner.py&amp;quot;, &amp;quot;file_text&amp;quot;: &amp;quot;...&#x27;, name=&#x27;str_replace_editor&#x27;), id=&#x27;toolu_01SjNBn1Mkke6C1DJjkPcjsN&#x27;, type=&#x27;function&#x27;)]
12:09:42 - openhands:DEBUG: conversation_memory.py:207 - Tool calls type: &amp;lt;class &#x27;list&#x27;&amp;gt;, value: [ChatCompletionMessageToolCall(index=1, function=Function(arguments=&#x27;{&amp;quot;command&amp;quot;: &amp;quot;pip install flask flask-cors&amp;quot;, &amp;quot;is_input&amp;quot;: &amp;quot;false&amp;quot;}&#x27;, name=&#x27;execute_bash&#x27;), id=&#x27;toolu_01CDVDLZbXn5Ge8adnBXCSzC&#x27;, type=&#x27;function&#x27;)]
12:09:42 - openhands:DEBUG: logger.py:445 - Logging to &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;logs&#x2F;llm&#x2F;25-04-11_12-07&#x2F;prompt_003.log
12:09:45 - openhands:DEBUG: logger.py:445 - Logging to &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;logs&#x2F;llm&#x2F;25-04-11_12-07&#x2F;response_003.log
12:09:45 - openhands:DEBUG: llm.py:561 - Cost: 0.01 USD | Accumulated Cost: 0.14 USD
Response Latency: 2.354 seconds
Input tokens: 10457 | Output tokens: 99
Input tokens (cache hit): 9633
Input tokens (cache write): 818&lt;&#x2F;p&gt;
&lt;p&gt;12:09:45 - openhands:DEBUG: agent_controller.py:1171 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] Action metrics - accumulated_cost: 0.14114925, tokens (prompt&#x2F;completion&#x2F;cache_read&#x2F;cache_write): 10457&#x2F;99&#x2F;9633&#x2F;818
12:09:45 - openhands:DEBUG: stream.py:273 - Adding CmdRunAction id=10 from AGENT
12:09:45 - openhands:DEBUG: agent_controller.py:795 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] &lt;strong&gt;CmdRunAction (source=EventSource.AGENT, is_input=False)&lt;&#x2F;strong&gt;
THOUGHT: 现在让我运行这个网页应用：
COMMAND:
python &#x2F;tmp&#x2F;hangzhou_trip_planner.py
12:10:16 - openhands:DEBUG: stream.py:273 - Adding CmdOutputObservation id=11 from AGENT
12:10:16 - openhands:DEBUG: agent_controller.py:409 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] &lt;strong&gt;CmdOutputObservation (source=EventSource.AGENT, exit code=-1, metadata={
&amp;quot;exit_code&amp;quot;: -1,
&amp;quot;pid&amp;quot;: -1,
&amp;quot;username&amp;quot;: null,
&amp;quot;hostname&amp;quot;: null,
&amp;quot;working_dir&amp;quot;: null,
&amp;quot;py_interpreter_path&amp;quot;: null,
&amp;quot;prefix&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;suffix&amp;quot;: &amp;quot;\n[The command has no new output after 30 seconds. You may wait longer to see additional output by sending empty command &#x27;&#x27;, send other commands to interact with the current process, or send keys to interrupt&#x2F;kill the command.]&amp;quot;
})&lt;&#x2F;strong&gt;
--BEGIN AGENT OBSERVATION--&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Serving Flask app &#x27;hangzhou_trip_planner&#x27;&lt;&#x2F;li&gt;
&lt;li&gt;Debug mode: on
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.&lt;&#x2F;li&gt;
&lt;li&gt;Running on all addresses (0.0.0.0)&lt;&#x2F;li&gt;
&lt;li&gt;Running on http:&#x2F;&#x2F;127.0.0.1:53941&lt;&#x2F;li&gt;
&lt;li&gt;Running on http:&#x2F;&#x2F;172.17.0.2:53941
Press CTRL+C to quit&lt;&#x2F;li&gt;
&lt;li&gt;Restarting with stat&lt;&#x2F;li&gt;
&lt;li&gt;Debugger is active!&lt;&#x2F;li&gt;
&lt;li&gt;Debugger PIN: 996-648-230
[The command has no new output after 30 seconds. You may wait longer to see additional output by sending empty command &#x27;&#x27;, send other commands to interact with the current process, or send keys to interrupt&#x2F;kill the command.]
--END AGENT OBSERVATION--
12:10:16 - openhands:INFO: agent_controller.py:696 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
12:10:16 - openhands:DEBUG: codeact_agent.py:171 - Processing 9 events from a total of 9 events
12:10:16 - openhands:DEBUG: conversation_memory.py:71 - Visual browsing: False
12:10:16 - openhands:DEBUG: conversation_memory.py:207 - Tool calls type: &amp;lt;class &#x27;list&#x27;&amp;gt;, value: [ChatCompletionMessageToolCall(index=1, function=Function(arguments=&#x27;{&amp;quot;command&amp;quot;: &amp;quot;create&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;&#x2F;tmp&#x2F;hangzhou_trip_planner.py&amp;quot;, &amp;quot;file_text&amp;quot;: &amp;quot;...&#x27;, name=&#x27;str_replace_editor&#x27;), id=&#x27;toolu_01SjNBn1Mkke6C1DJjkPcjsN&#x27;, type=&#x27;function&#x27;)]
12:10:16 - openhands:DEBUG: conversation_memory.py:207 - Tool calls type: &amp;lt;class &#x27;list&#x27;&amp;gt;, value: [ChatCompletionMessageToolCall(index=1, function=Function(arguments=&#x27;{&amp;quot;command&amp;quot;: &amp;quot;pip install flask flask-cors&amp;quot;, &amp;quot;is_input&amp;quot;: &amp;quot;false&amp;quot;}&#x27;, name=&#x27;execute_bash&#x27;), id=&#x27;toolu_01CDVDLZbXn5Ge8adnBXCSzC&#x27;, type=&#x27;function&#x27;)]
12:10:16 - openhands:DEBUG: conversation_memory.py:207 - Tool calls type: &amp;lt;class &#x27;list&#x27;&amp;gt;, value: [ChatCompletionMessageToolCall(index=1, function=Function(arguments=&#x27;{&amp;quot;command&amp;quot;: &amp;quot;python &#x2F;tmp&#x2F;hangzhou_trip_planner.py&amp;quot;, &amp;quot;is_input&amp;quot;: &amp;quot;false&amp;quot;}&#x27;, name=&#x27;execute_bash&#x27;), id=&#x27;toolu_01HwMwZtdS8dsFCDREbPKopu&#x27;, type=&#x27;function&#x27;)]
12:10:16 - openhands:DEBUG: logger.py:445 - Logging to &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;logs&#x2F;llm&#x2F;25-04-11_12-07&#x2F;prompt_004.log
12:10:24 - openhands:DEBUG: logger.py:445 - Logging to &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;logs&#x2F;llm&#x2F;25-04-11_12-07&#x2F;response_004.log
12:10:24 - openhands:DEBUG: llm.py:561 - Cost: 0.01 USD | Accumulated Cost: 0.15 USD
Response Latency: 8.065 seconds
Input tokens: 10753 | Output tokens: 419
Input tokens (cache hit): 10451
Input tokens (cache write): 296&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;12:10:24 - openhands:DEBUG: agent_controller.py:1171 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] Action metrics - accumulated_cost: 0.15258555000000001, tokens (prompt&#x2F;completion&#x2F;cache_read&#x2F;cache_write): 10753&#x2F;419&#x2F;10451&#x2F;296
12:10:24 - openhands:DEBUG: stream.py:273 - Adding MessageAction id=12 from AGENT
12:10:24 - openhands:DEBUG: agent_controller.py:795 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] &lt;strong&gt;MessageAction&lt;&#x2F;strong&gt; (source=EventSource.AGENT)
CONTENT: 太好了！网页应用已经成功运行起来了。您现在可以通过以下链接访问杭州三天春游规划：&lt;&#x2F;p&gt;
&lt;p&gt;http:&#x2F;&#x2F;localhost:53941&lt;&#x2F;p&gt;
&lt;p&gt;这个网页包含了详细的杭州三天春游规划，内容包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;第一天：西湖精华游&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;上午：断桥-白堤-孤山&lt;&#x2F;li&gt;
&lt;li&gt;中午：湖畔午餐&lt;&#x2F;li&gt;
&lt;li&gt;下午：苏堤-雷峰塔&lt;&#x2F;li&gt;
&lt;li&gt;晚上：河坊街-清河坊&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;第二天：西湖西线与灵隐寺&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;上午：灵隐寺-飞来峰&lt;&#x2F;li&gt;
&lt;li&gt;中午：素斋午餐&lt;&#x2F;li&gt;
&lt;li&gt;下午：龙井村-九溪烟树&lt;&#x2F;li&gt;
&lt;li&gt;晚上：西湖音乐喷泉&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;第三天：城市文化与休闲&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;上午：西溪湿地&lt;&#x2F;li&gt;
&lt;li&gt;中午：农家午餐&lt;&#x2F;li&gt;
&lt;li&gt;下午：杭州博物馆-运河&lt;&#x2F;li&gt;
&lt;li&gt;晚上：宋城千古情&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;此外，网页还包含了春季杭州旅游小贴士、美食推荐和购物建议，帮助您更好地规划行程。&lt;&#x2F;p&gt;
&lt;p&gt;请点击上面的链接查看完整的旅游规划。如果您需要对规划内容进行任何修改或有其他问题，请随时告诉我！
12:10:24 - openhands:INFO: agent_controller.py:520 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
12:10:24 - openhands:DEBUG: stream.py:273 - Adding AgentStateChangedObservation id=13 from ENVIRONMENT
12:10:24 - openhands:DEBUG: agent_controller.py:409 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] AgentStateChangedObservation(content=&#x27;&#x27;, agent_state=&#x27;awaiting_user_input&#x27;, observation=&#x27;agent_state_changed&#x27;)
12:11:05 - openhands:DEBUG: shutdown_listener.py:26 - shutdown_signal:2
12:11:06 - openhands:INFO: listen_socket.py:81 - sio:disconnect:SRJs3cbDFCDEbGmoAAAD
12:11:06 - openhands:INFO: standalone_conversation_manager.py:334 - disconnect_from_session:SRJs3cbDFCDEbGmoAAAD:740715d40a3c4be385b644a20b0fdfaf
12:11:06 - openhands:INFO: standalone_conversation_manager.py:351 - _close_session:740715d40a3c4be385b644a20b0fdfaf
12:11:06 - openhands:INFO: standalone_conversation_manager.py:359 - removing connections: []
12:11:06 - openhands:INFO: standalone_conversation_manager.py:371 - closing_session:740715d40a3c4be385b644a20b0fdfaf
12:11:06 - openhands:DEBUG: state.py:107 - Saving state to session 740715d40a3c4be385b644a20b0fdfaf:AgentState.AWAITING_USER_INPUT
12:11:06 - openhands:INFO: agent_controller.py:520 - [Agent Controller 740715d40a3c4be385b644a20b0fdfaf] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.STOPPED
12:11:06 - openhands:DEBUG: stream.py:273 - Adding AgentStateChangedObservation id=14 from ENVIRONMENT
12:11:06 - openhands:WARNING: stream.py:260 - Callback not found during unsubscribe: 740715d40a3c4be385b644a20b0fdfaf
12:11:06 - openhands:INFO: standalone_conversation_manager.py:373 - closed_session:740715d40a3c4be385b644a20b0fdfaf&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;er-gong-zuo-liu-cheng-fen-jie&quot;&gt;二、工作流程分解&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-hui-hua-chu-shi-hua-jie-duan&quot;&gt;1. 会话初始化阶段&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:08:07 - openhands:INFO: manage_conversations.py:148 - Initializing new conversation
&lt;&#x2F;span&gt;&lt;span&gt;12:08:07 - openhands:INFO: manage_conversations.py:54 - Creating conversation
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当用户发起请求时，系统首先初始化一个新的会话，分配一个唯一的会话 ID (&lt;code&gt;740715d40a3c4be385b644a20b0fdfaf&lt;&#x2F;code&gt;)，用于后续所有组件的协调和跟踪。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-pei-zhi-jia-zai-jie-duan&quot;&gt;2. 配置加载阶段&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:08:07 - openhands:INFO: manage_conversations.py:58 - Loading settings
&lt;&#x2F;span&gt;&lt;span&gt;12:08:07 - openhands:DEBUG: llm.py:385 - Model info: { &amp;quot;key&amp;quot;: &amp;quot;claude-3-7-sonnet-20250219&amp;quot;, ... }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统加载配置信息，包括语言模型的设置、最大token限制、支持的功能等。此案例使用的是 Anthropic 的 Claude 3.7 Sonnet 模型。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-yun-xing-shi-huan-jing-zhun-bei&quot;&gt;3. 运行时环境准备&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:08:07 - openhands:DEBUG: agent_session.py:232 - Initializing runtime `docker` now...
&lt;&#x2F;span&gt;&lt;span&gt;12:08:08 - openhands:INFO: runtime_build.py:182 - Building image: ghcr.io&#x2F;all-hands-ai&#x2F;runtime:oh_v0.29.1...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统启动一个隔离的 Docker 容器作为运行时环境，这样可以安全地执行代码而不影响主系统。容器有特定端口映射（53941、56576）用于网络应用访问。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-gong-ju-jia-zai-jie-duan&quot;&gt;4. 工具加载阶段&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:08:38 - openhands:DEBUG: codeact_agent.py:75 - TOOLS loaded for CodeActAgent: execute_bash, think, finish, web_read, browser, execute_ipython_cell, str_replace_editor
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统启动 Agent (CodeActAgent) 并为其加载相关工具，让 Agent 能够执行命令、编辑文件等操作。这些工具是 CodeActAgent 与 Runtime 运行时环境交互的接口。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-yong-hu-shu-ru-chu-li&quot;&gt;5. 用户输入处理&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:08:38 - openhands:DEBUG: agent_controller.py:441 - **MessageAction** (source=EventSource.USER)
&lt;&#x2F;span&gt;&lt;span&gt;CONTENT: 给我做一个杭州三天春游的规划，给我一个可访问的web让我看规划内容
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统捕获并处理用户输入，识别出这是一个需要创建网页内容的请求。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-agent-si-kao-yu-gui-hua-jie-duan&quot;&gt;6. Agent 思考与规划阶段&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:08:38 - openhands:DEBUG: logger.py:445 - Logging to ...&#x2F;prompt_001.log
&lt;&#x2F;span&gt;&lt;span&gt;12:09:37 - openhands:DEBUG: logger.py:445 - Logging to ...&#x2F;response_001.log
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Agent 使用大型语言模型 (Claude 3.7) 分析用户请求，并制定执行计划。这个过程大约持续了59秒，系统记录了完整的思考过程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;7-wen-jian-chuang-jian-cao-zuo&quot;&gt;7. 文件创建操作&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:09:37 - openhands:DEBUG: stream.py:273 - Adding FileEditAction id=6 from AGENT
&lt;&#x2F;span&gt;&lt;span&gt;12:09:37 - openhands:DEBUG: agent_controller.py:795 - **FileEditAction**
&lt;&#x2F;span&gt;&lt;span&gt;Path: [&#x2F;tmp&#x2F;hangzhou_trip_planner.py]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Agent Controller 决定创建一个 Flask 网页应用，包含完整的杭州三天春游规划。它使用 &lt;code&gt;str_replace_editor&lt;&#x2F;code&gt; 工具创建文件，并嵌入了 HTML、CSS 和后端逻辑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;8-yi-lai-an-zhuang-jie-duan&quot;&gt;8. 依赖安装阶段&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:09:40 - openhands:DEBUG: stream.py:273 - Adding CmdRunAction id=8 from AGENT
&lt;&#x2F;span&gt;&lt;span&gt;COMMAND: pip install flask flask-cors
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Agent 识别到需要安装依赖库（Flask 和 Flask-CORS），并自动执行安装命令。这显示了 Agent 能够理解和处理依赖关系。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;9-ying-yong-qi-dong-jie-duan&quot;&gt;9. 应用启动阶段&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:09:45 - openhands:DEBUG: stream.py:273 - Adding CmdRunAction id=10 from AGENT
&lt;&#x2F;span&gt;&lt;span&gt;COMMAND: python &#x2F;tmp&#x2F;hangzhou_trip_planner.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;安装完依赖后，在运行时环境中启动创建的网页应用。应用在端口 53941 上运行，允许用户通过浏览器访问。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;10-jie-guo-cheng-xian-jie-duan&quot;&gt;10. 结果呈现阶段&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:10:24 - openhands:DEBUG: stream.py:273 - Adding MessageAction id=12 from AGENT
&lt;&#x2F;span&gt;&lt;span&gt;CONTENT: 太好了！网页应用已经成功运行起来了。您现在可以通过以下链接访问杭州三天春游规划：http:&#x2F;&#x2F;localhost:53941
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Agent 返回成功消息，告知用户可以通过指定链接访问旅游规划，并提供内容概览。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;san-he-xin-zu-jian-xiang-jie&quot;&gt;三、核心组件详解&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-shi-jian-liu-xi-tong&quot;&gt;1. 事件流系统&lt;&#x2F;h3&gt;
&lt;p&gt;整个系统基于事件流工作：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:08:38 - openhands:DEBUG: stream.py:273 - Adding MessageAction id=1 from USER
&lt;&#x2F;span&gt;&lt;span&gt;12:08:38 - openhands:DEBUG: stream.py:273 - Adding RecallAction id=3 from USER
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所有操作都被封装为事件，由事件流系统处理，确保组件间通信有序可追踪。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-dai-li-zhuang-tai-guan-li&quot;&gt;2. 代理状态管理&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:08:38 - openhands:INFO: agent_controller.py:520 - Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统维护了代理的状态机，从加载(LOADING)到运行(RUNNING)再到等待用户输入(AWAITING_USER_INPUT)，确保行为的连贯性。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-yu-yan-mo-xing-shi-yong&quot;&gt;3. 语言模型使用&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:09:37 - openhands:DEBUG: llm.py:561 - Cost: 0.10 USD | Accumulated Cost: 0.10 USD
&lt;&#x2F;span&gt;&lt;span&gt;Response Latency: 58.893 seconds
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens: 5411 | Output tokens: 4202
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统对语言模型的使用非常精确，记录每次调用的成本、延迟和token使用情况，并使用缓存优化性能：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Input tokens (cache hit): 9633
&lt;&#x2F;span&gt;&lt;span&gt;Input tokens (cache write): 818
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-dockeryun-xing-shi-huan-jing&quot;&gt;4. Docker运行时环境&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:08:08 - openhands:DEBUG: docker_runtime.py:256 - Mount dir: &#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;pro-agent&#x2F;workspace
&lt;&#x2F;span&gt;&lt;span&gt;12:08:08 - openhands:DEBUG: docker_runtime.py:262 - Sandbox workspace: &#x2F;workspace
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;系统创建隔离的Docker容器作为沙盒环境，并挂载必要的目录以保持文件持久性，同时确保安全执行。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-gong-ju-diao-yong-xi-tong&quot;&gt;5. 工具调用系统&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;12:09:37 - openhands:DEBUG: conversation_memory.py:207 - Tool calls type: &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;, value: [ChatCompletionMessageToolCall...]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Agent通过结构化格式调用工具，每个工具调用都包含明确的参数和目标。这种方式让AI能以一致的方式使用各种系统功能。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;si-guan-jian-ji-zhu-liang-dian&quot;&gt;四、关键技术亮点&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件驱动架构&lt;&#x2F;strong&gt;：系统通过事件流协调各组件，使复杂流程更容易管理和追踪&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;沙盒安全执行&lt;&#x2F;strong&gt;：使用Docker容器创建安全的执行环境，防止恶意代码影响宿主系统&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;智能工具使用&lt;&#x2F;strong&gt;：AI能够识别任务所需的工具链（如依赖安装、代码执行），并按正确顺序使用&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;清晰的工作流状态&lt;&#x2F;strong&gt;：系统维护代理状态机，确保处理流程的连贯性&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源优化&lt;&#x2F;strong&gt;：通过缓存和累计成本跟踪优化语言模型使用&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多模态输出&lt;&#x2F;strong&gt;：不仅生成文字描述，还能创建完整的网页应用，提供更丰富的用户体验&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;wu-zhi-xing-liu-cheng-tu&quot;&gt;五、执行流程图&lt;&#x2F;h2&gt;
&lt;details&gt;
&lt;summary&gt;OpenHands执行流程详细图示 (点击展开)&lt;&#x2F;summary&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;openhands-running-logic-analysis&#x2F;openhands_running_logic.svg&quot; alt=&quot;OpenHands执行流程图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;liu-agent-hubjia-gou-de-you-shi&quot;&gt;六、Agent Hub架构的优势&lt;&#x2F;h2&gt;
&lt;p&gt;在OpenHands的Agent Hub架构下，各个组件通过事件流系统紧密协作，形成了一个高效的智能编码生态系统：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;组件解耦&lt;&#x2F;strong&gt;：每个组件负责特定功能，可以独立升级和维护&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;流程透明&lt;&#x2F;strong&gt;：完整的日志记录和事件跟踪使得系统行为可预测和可调试&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;扩展性强&lt;&#x2F;strong&gt;：新工具可以轻松集成到现有架构中，无需修改核心逻辑&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;安全可控&lt;&#x2F;strong&gt;：Docker运行时提供了隔离执行环境，同时支持丰富的权限控制&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;快速响应&lt;&#x2F;strong&gt;：事件驱动模式确保系统能够实时响应用户输入和环境变化&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这种架构设计使得OpenHands能够处理从简单的代码生成到复杂的应用开发等多样化任务，同时保持系统的稳定性和安全性。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-shi-ji-ying-yong-chang-jing-fen-xi&quot;&gt;七、实际应用场景分析&lt;&#x2F;h2&gt;
&lt;p&gt;我们的杭州春游案例展示了OpenHands处理实际问题的能力。值得注意的是，Agent在整个过程中表现出了以下关键能力：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;需求理解&lt;&#x2F;strong&gt;：正确解析了用户想要一个可访问的网页展示旅游规划的需求&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;技术选型&lt;&#x2F;strong&gt;：自主选择了Flask作为网页框架，适合快速构建轻量级应用&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;依赖管理&lt;&#x2F;strong&gt;：识别并安装了所需的Python包（flask、flask-cors）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;内容创建&lt;&#x2F;strong&gt;：组织了有价值的旅游信息，包括景点、美食和交通建议&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;用户体验设计&lt;&#x2F;strong&gt;：创建了一个包含CSS样式的美观网页，而不是简单的文本输出&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;端口配置&lt;&#x2F;strong&gt;：正确配置了Web服务器端口，确保用户可访问&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这个案例完美展示了OpenHands如何从用户简单的自然语言请求出发，通过一系列复杂但协调一致的步骤，最终交付一个完整可用的解决方案。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands vs Roo Code: 微软项目开发工具选择指南</title>
        <published>2025-04-02T00:00:00+00:00</published>
        <updated>2025-04-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-vs-roo-code-ms-projects/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-vs-roo-code-ms-projects/</id>
        
        <content type="html">&lt;h1 id=&quot;openhands-vs-roo-code-wei-ruan-xiang-mu-kai-fa-gong-ju-xuan-ze-zhi-nan&quot;&gt;OpenHands vs Roo Code: 微软项目开发工具选择指南&lt;&#x2F;h1&gt;
&lt;p&gt;在前一篇&lt;a href=&quot;&#x2F;ai-coding-tools-comparison&quot;&gt;《AI编程助手全面横评：七大工具功能与架构对比》&lt;&#x2F;a&gt;中，我们对七大AI编程工具进行了全面评估。本文将聚焦OpenHands和Roo Code这两款开源工具在微软生态系统内的使用体验，特别是涉及Azure认证的项目场景，帮助开发团队做出明智的工具选择。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;1-gong-ju-gai-lan-dui-bi&quot;&gt;1. 工具概览对比&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;维度&lt;&#x2F;th&gt;&lt;th&gt;Roo Code&lt;&#x2F;th&gt;&lt;th&gt;OpenHands&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;核心定位&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;CLine的进化版，专注代码生成&lt;&#x2F;td&gt;&lt;td&gt;开源AI开发者代理&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;MCP集成&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;预集成MCP Server&lt;&#x2F;td&gt;&lt;td&gt;需定制开发&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;部署复杂度&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;轻量级（Server + VS Code配置）&lt;&#x2F;td&gt;&lt;td&gt;复杂（依赖Docker）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Azure认证支持&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;内置支持&lt;&#x2F;td&gt;&lt;td&gt;需额外开发&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;定制化程度&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;中等&lt;&#x2F;td&gt;&lt;td&gt;非常高&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;资源需求&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;中等&lt;&#x2F;td&gt;&lt;td&gt;较高&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;适用项目类型&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;现有Azure服务项目&lt;&#x2F;td&gt;&lt;td&gt;新开发项目&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;2-zai-azureren-zheng-huan-jing-zhong-de-biao-xian&quot;&gt;2. 在Azure认证环境中的表现&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;roo-codeyou-shi&quot;&gt;Roo Code优势&lt;&#x2F;h3&gt;
&lt;p&gt;Roo Code在涉及Azure认证的项目（如Kusto、Titan等微软内部服务）中表现出明显优势：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;预集成MCP服务器&lt;&#x2F;strong&gt;：专为Azure认证流程优化&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;无缝连接微软服务&lt;&#x2F;strong&gt;：与Kusto、Titan等系统的直接兼容性&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;认证处理简化&lt;&#x2F;strong&gt;：无需复杂的自定义开发&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;部署门槛低&lt;&#x2F;strong&gt;：仅需服务器安装和VS Code配置&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;继承CLine优势&lt;&#x2F;strong&gt;：保留终端能力的同时提升代码生成质量&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;对于已经使用微软认证基础设施的项目，Roo Code提供了立即可用的解决方案，最小化集成挑战，加快价值实现。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;openhandsju-xian&quot;&gt;OpenHands局限&lt;&#x2F;h3&gt;
&lt;p&gt;OpenHands在Azure认证环境中面临一些挑战：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;需要定制适配&lt;&#x2F;strong&gt;：与Azure服务集成需要额外开发&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;认证流程复杂&lt;&#x2F;strong&gt;：需手动实现OAuth流程&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;部署门槛高&lt;&#x2F;strong&gt;：依赖Docker，配置步骤较多&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;资源需求大&lt;&#x2F;strong&gt;：运行完整功能需较高系统资源&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;3-xin-xiang-mu-kai-fa-zhong-de-biao-xian&quot;&gt;3. 新项目开发中的表现&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;openhandsyou-shi&quot;&gt;OpenHands优势&lt;&#x2F;h3&gt;
&lt;p&gt;在全新项目开发场景中，特别是没有预设认证需求的情况下，OpenHands展现出独特优势：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CodeAct框架&lt;&#x2F;strong&gt;：提供更强大的自主开发能力&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;高度定制化&lt;&#x2F;strong&gt;：可根据项目需求深度定制&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;灵活模型集成&lt;&#x2F;strong&gt;：支持多种LLM后端&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;开放架构&lt;&#x2F;strong&gt;：为广泛修改和适应而设计&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;强大代理能力&lt;&#x2F;strong&gt;：自动推理和问题解决能力&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;全流程控制&lt;&#x2F;strong&gt;：对整个开发流程的完整掌控&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;roo-codeju-xian&quot;&gt;Roo Code局限&lt;&#x2F;h3&gt;
&lt;p&gt;在新项目开发中，Roo Code相对OpenHands有一定局限：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;专注代码生成&lt;&#x2F;strong&gt;：而非完整开发流程&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;定制深度有限&lt;&#x2F;strong&gt;：比起OpenHands的全方位定制&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;自主性较低&lt;&#x2F;strong&gt;：自动完成复杂任务的能力较弱&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;微软生态倾向&lt;&#x2F;strong&gt;：更适合微软技术栈项目&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;4-mcpzhi-chi-dui-bi&quot;&gt;4. MCP支持对比&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;MCP相关能力&lt;&#x2F;th&gt;&lt;th&gt;Roo Code&lt;&#x2F;th&gt;&lt;th&gt;OpenHands&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;MCP兼容性&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;增强MCP兼容&lt;&#x2F;td&gt;&lt;td&gt;自有API&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;预配置服务器&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;✓&lt;&#x2F;td&gt;&lt;td&gt;✗&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Azure认证集成&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;✓&lt;&#x2F;td&gt;&lt;td&gt;✗&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;工具生态系统&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;微软工具优先&lt;&#x2F;td&gt;&lt;td&gt;通用工具支持&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;未来方向&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;深化微软生态整合&lt;&#x2F;td&gt;&lt;td&gt;可能采用融合路径&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Roo Code继承了CLine的MCP兼容性并进行了增强，为微软服务提供了更好的集成体验。与此同时，OpenHands采用了自有API，虽然灵活性更高，但需要更多工作才能与微软服务集成。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;5-shi-jian-jian-yi&quot;&gt;5. 实践建议&lt;&#x2F;h2&gt;
&lt;p&gt;根据项目性质和团队需求，我们提供以下实施建议：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gua-he-xuan-ze-roo-codede-chang-jing&quot;&gt;适合选择Roo Code的场景&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用Azure认证服务&lt;&#x2F;strong&gt;的现有项目&lt;&#x2F;li&gt;
&lt;li&gt;需要立即与&lt;strong&gt;Kusto、Titan&lt;&#x2F;strong&gt;等微软服务集成&lt;&#x2F;li&gt;
&lt;li&gt;需要&lt;strong&gt;最小配置&lt;&#x2F;strong&gt;即可实现微软生态系统兼容&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;终端重度用户&lt;&#x2F;strong&gt;团队（从CLine升级）&lt;&#x2F;li&gt;
&lt;li&gt;注重&lt;strong&gt;开发速度&lt;&#x2F;strong&gt;胜过定制深度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;gua-he-xuan-ze-openhandsde-chang-jing&quot;&gt;适合选择OpenHands的场景&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全新项目&lt;&#x2F;strong&gt;且无预设认证需求&lt;&#x2F;li&gt;
&lt;li&gt;需要&lt;strong&gt;深度定制&lt;&#x2F;strong&gt;和代理自主能力&lt;&#x2F;li&gt;
&lt;li&gt;投入&lt;strong&gt;长期灵活架构&lt;&#x2F;strong&gt;的团队&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;开源优先&lt;&#x2F;strong&gt;且资源充足的组织&lt;&#x2F;li&gt;
&lt;li&gt;需要&lt;strong&gt;高度自主解决问题&lt;&#x2F;strong&gt;能力的复杂项目&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hun-he-ce-lue&quot;&gt;混合策略&lt;&#x2F;h3&gt;
&lt;p&gt;一些团队可以考虑采用混合策略：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在涉及Azure认证的微软服务项目中使用&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;在需要深度定制的新项目中使用&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;长期关注两种工具的&lt;strong&gt;融合可能性&lt;&#x2F;strong&gt;，特别是MCP和CodeAct的结合&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;6-shi-li-chang-jing-fen-xi&quot;&gt;6. 示例场景分析&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;chang-jing-1-azurefen-xi-ping-tai-ji-cheng&quot;&gt;场景1：Azure分析平台集成&lt;&#x2F;h3&gt;
&lt;p&gt;假设团队需要开发一个与Azure Kusto数据库和Titan搜索服务集成的分析应用：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用Roo Code&lt;&#x2F;strong&gt;：几小时内完成认证配置，直接调用相关服务&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;使用OpenHands&lt;&#x2F;strong&gt;：需要数天时间开发认证适配层，实现相同功能&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;chang-jing-2-chuang-xin-aizhu-shou-kai-fa&quot;&gt;场景2：创新AI助手开发&lt;&#x2F;h3&gt;
&lt;p&gt;团队计划开发一个全新的、高度定制化的开发助手：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用OpenHands&lt;&#x2F;strong&gt;：利用CodeAct框架快速构建自主循环，高度定制化&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;使用Roo Code&lt;&#x2F;strong&gt;：功能将受限于其预设能力，难以实现深度定制&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;jie-lun&quot;&gt;结论&lt;&#x2F;h2&gt;
&lt;p&gt;对于微软生态系统内的开发团队，Roo Code和OpenHands代表了两种不同但互补的开发工具选择。&lt;strong&gt;对涉及Azure认证的现有系统&lt;&#x2F;strong&gt;，特别是需要连接Kusto或Titan等服务的项目，Roo Code提供了几乎零摩擦的集成体验。而&lt;strong&gt;对于新的开发项目&lt;&#x2F;strong&gt;，尤其是那些重视高度定制和自主性的场景，OpenHands则提供了更大的灵活性和潜力。&lt;&#x2F;p&gt;
&lt;p&gt;明智的做法是根据具体项目需求选择合适的工具，有时甚至在不同项目中同时使用两者，以充分发挥各自的优势。随着MCP作为行业标准的普及以及CodeAct行为模式的发展，我们可以期待这两种工具在未来可能出现更多融合，为开发者提供兼具标准化和高度自主性的完整解决方案。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;如果您有使用这些工具的实际经验或见解，欢迎在评论区分享！&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>使用GitHub Actions自动部署AI助手：无需人工干预的持续部署方案</title>
        <published>2025-03-31T00:00:00+00:00</published>
        <updated>2025-03-31T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/github-actions-auto-deploy-openhands/" type="text/html"/>
        <id>https://polly2014.github.io/github-actions-auto-deploy-openhands/</id>
        
        <content type="html">&lt;p&gt;在运维AI应用时，我们经常需要不断更新代码并重新部署。每次手动SSH登录服务器、拉取代码、编译并重启服务不仅繁琐，还容易出错。本文将分享如何利用GitHub Actions实现OpenHands（一个私有的AI编程助手）的全自动部署流程，让代码一旦推送到GitHub仓库就能自动部署到生产服务器，无需任何人工干预。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xian-zhuang-wen-ti&quot;&gt;现状问题&lt;&#x2F;h2&gt;
&lt;p&gt;目前，我们的部署流程相当繁琐：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;1. ssh登录服务器
&lt;&#x2F;span&gt;&lt;span&gt;2. tmux a -t DaTou进入会话
&lt;&#x2F;span&gt;&lt;span&gt;3. Ctrl+C终止当前运行的程序
&lt;&#x2F;span&gt;&lt;span&gt;4. git pull拉取最新代码
&lt;&#x2F;span&gt;&lt;span&gt;5. make build编译代码
&lt;&#x2F;span&gt;&lt;span&gt;6. authbind --deep make run启动服务
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个过程完全是手动的，既浪费时间又容易因操作失误导致服务异常。如何实现全自动化呢？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jie-jue-fang-an-dui-bi&quot;&gt;解决方案对比&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;方案&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;复杂度&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;实时性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;可观测性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;适用场景&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Cron定时检查&lt;&#x2F;td&gt;&lt;td&gt;★★☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;★☆☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;简单项目、低频更新&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Webhook触发部署&lt;&#x2F;td&gt;&lt;td&gt;★★★☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;★★☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;中型项目、需要即时部署&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GitHub Actions&lt;&#x2F;td&gt;&lt;td&gt;★★★☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;各种规模项目、需要完整部署流程&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;专业CI&#x2F;CD平台&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;企业级应用、复杂部署需求&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;经过对比，GitHub Actions显然是最适合我们需求的解决方案：它能提供即时部署、完整记录，且与GitHub仓库无缝集成。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-shi-fang-an-shi-yong-github-actionszi-dong-bu-shu&quot;&gt;实施方案：使用GitHub Actions自动部署&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;di-yi-bu-zhun-bei-fu-wu-qi-huan-jing&quot;&gt;第一步：准备服务器环境&lt;&#x2F;h3&gt;
&lt;p&gt;首先，需要在服务器上设置SSH密钥，使GitHub Actions能够安全地连接：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 在服务器上生成SSH密钥对
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh-keygen -t&lt;&#x2F;span&gt;&lt;span&gt; ed25519&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -C &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github-actions-deploy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 一路回车即可，不要设置密码
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 将公钥添加到authorized_keys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.ssh&#x2F;id_ed25519.pub &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.ssh&#x2F;authorized_keys
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;di-er-bu-chuang-jian-bu-shu-jiao-ben&quot;&gt;第二步：创建部署脚本&lt;&#x2F;h3&gt;
&lt;p&gt;在服务器上创建一个脚本来处理代码拉取、编译和重启服务的过程：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建部署脚本
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nano ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;deploy_openhands.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;填入以下内容：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 设置工作目录和日志文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;REPO_DIR&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;path&#x2F;to&#x2F;your&#x2F;openhands&#x2F;repo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LOG_FILE&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;path&#x2F;to&#x2F;deploy_logs.log&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CONDA_ENV&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DaTou&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 记录日志函数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+%Y-%m-%d %H:%M:%S&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)] &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tee -a &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LOG_FILE&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 切换到仓库目录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;REPO_DIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; || { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to cd to &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;REPO_DIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Starting deployment process&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 拉取最新代码
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pulling latest code from repository&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; pull
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 初始化conda
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Initializing conda environment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 以下行确保conda命令在bash中可用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conda&lt;&#x2F;span&gt;&lt;span&gt; info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --base&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;etc&#x2F;profile.d&#x2F;conda.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 激活conda环境
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Activating conda environment: &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CONDA_ENV&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conda&lt;&#x2F;span&gt;&lt;span&gt; activate $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CONDA_ENV
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 编译代码
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Building application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;? -ne&lt;&#x2F;span&gt;&lt;span&gt; 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Build failed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 确保tmux会话存在
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tmux&lt;&#x2F;span&gt;&lt;span&gt; has-session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; DaTou &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&#x2F;dev&#x2F;null; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Creating new tmux session: DaTou&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tmux&lt;&#x2F;span&gt;&lt;span&gt; new-session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d -s&lt;&#x2F;span&gt;&lt;span&gt; DaTou
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 停止当前运行的程序
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Stopping current application in tmux session&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tmux&lt;&#x2F;span&gt;&lt;span&gt; send-keys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; DaTou C-c
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 等待程序优雅退出
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt; 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 启动应用程序
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Starting application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tmux&lt;&#x2F;span&gt;&lt;span&gt; send-keys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; DaTou &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;REPO_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &amp;amp;&amp;amp; authbind --deep make run&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; C-m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment completed successfully&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;别忘了使脚本可执行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; +x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;deploy_openhands.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;di-san-bu-she-zhi-githubcang-ku-mi-yao&quot;&gt;第三步：设置GitHub仓库密钥&lt;&#x2F;h3&gt;
&lt;p&gt;在GitHub仓库中添加必要的密钥：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;进入GitHub仓库页面&lt;&#x2F;li&gt;
&lt;li&gt;点击&amp;quot;Settings&amp;quot; &amp;gt; &amp;quot;Secrets and variables&amp;quot; &amp;gt; &amp;quot;Actions&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;点击&amp;quot;New repository secret&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;添加以下密钥：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SSH_PRIVATE_KEY&lt;&#x2F;code&gt;: 服务器上生成的SSH私钥（&lt;code&gt;cat ~&#x2F;.ssh&#x2F;id_ed25519&lt;&#x2F;code&gt;的内容）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SSH_HOST&lt;&#x2F;code&gt;: 服务器IP或域名&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SSH_USER&lt;&#x2F;code&gt;: 服务器用户名（例如&lt;code&gt;ubuntu&lt;&#x2F;code&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SSH_PORT&lt;&#x2F;code&gt;: SSH端口（通常为22）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;di-si-bu-chuang-jian-github-actionsgong-zuo-liu&quot;&gt;第四步：创建GitHub Actions工作流&lt;&#x2F;h3&gt;
&lt;p&gt;在你的仓库中创建一个工作流文件：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p&lt;&#x2F;span&gt;&lt;span&gt; .github&#x2F;workflows
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nano&lt;&#x2F;span&gt;&lt;span&gt; .github&#x2F;workflows&#x2F;deploy.yml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;填入以下内容：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deploy OpenHands
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span&gt;: [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 替换为你的主分支名称
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 手动触发选项
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workflow_dispatch&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deploy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deploy to server
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;appleboy&#x2F;ssh-action@master
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.SSH_HOST }}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.SSH_USER }}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.SSH_PRIVATE_KEY }}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.SSH_PORT }}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            ~&#x2F;deploy_openhands.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;di-wu-bu-que-bao-xi-tong-zhong-qi-hou-fu-wu-zi-dong-qi-dong&quot;&gt;第五步：确保系统重启后服务自动启动&lt;&#x2F;h3&gt;
&lt;p&gt;创建一个systemd服务，确保服务器重启后应用自动启动：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;openhands.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;添加以下内容：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Description&lt;&#x2F;span&gt;&lt;span&gt;=OpenHands AI Assistant Service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;After&lt;&#x2F;span&gt;&lt;span&gt;=network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[Service]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;=oneshot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;=ubuntu  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 替换为你的用户名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecStart&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;bin&#x2F;bash -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;tmux has-session -t DaTou || tmux new-session -d -s DaTou&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecStart&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;bin&#x2F;bash -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;tmux send-keys -t DaTou &amp;#39;cd &#x2F;path&#x2F;to&#x2F;your&#x2F;openhands&#x2F;repo &amp;amp;&amp;amp; authbind --deep make run&amp;#39; C-m&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RemainAfterExit&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[Install]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WantedBy&lt;&#x2F;span&gt;&lt;span&gt;=multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;启用服务：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable openhands.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl start openhands.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;gong-zuo-yuan-li&quot;&gt;工作原理&lt;&#x2F;h2&gt;
&lt;p&gt;整个自动部署流程工作流程如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;代码推送触发&lt;&#x2F;strong&gt;：当开发者将代码推送到GitHub仓库的主分支时，GitHub Actions自动触发&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;安全连接服务器&lt;&#x2F;strong&gt;：Actions使用SSH密钥安全连接到服务器&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;执行部署脚本&lt;&#x2F;strong&gt;：执行预先定义的部署脚本，完成代码拉取、编译和应用重启&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;日志记录&lt;&#x2F;strong&gt;：整个过程的日志都被记录，方便问题排查&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;details&gt;
&lt;summary&gt;GitHub Actions自动部署流程图 (点击展开)&lt;&#x2F;summary&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;github-actions-auto-deploy-openhands&#x2F;GitHub_Action_Auto_Deployment.svg&quot; alt=&quot;GitHub Actions自动部署流程图&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;gao-ji-pei-zhi-yu-you-hua&quot;&gt;高级配置与优化&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;tian-jia-bu-shu-tong-zhi&quot;&gt;添加部署通知&lt;&#x2F;h3&gt;
&lt;p&gt;在工作流文件中添加部署通知：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ... 其他步骤
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Send deployment notification
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;always()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rtCamp&#x2F;action-slack-notify@v2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SLACK_WEBHOOK&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.SLACK_WEBHOOK }}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SLACK_COLOR&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ job.status }}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SLACK_TITLE&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OpenHands Deployment
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SLACK_MESSAGE&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment ${{ job.status }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tian-jia-bu-shu-qian-ce-shi&quot;&gt;添加部署前测试&lt;&#x2F;h3&gt;
&lt;p&gt;确保代码质量后再部署：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;checkout@v3
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Run tests
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;make test
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deploy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;needs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ... 部署步骤
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;qu-fen-huan-jing-pei-zhi&quot;&gt;区分环境配置&lt;&#x2F;h3&gt;
&lt;p&gt;使用不同分支部署到不同环境：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 生产环境
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;staging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 测试环境
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;chang-jian-wen-ti-yu-jie-jue-fang-an&quot;&gt;常见问题与解决方案&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-sshlian-jie-shi-bai&quot;&gt;1. SSH连接失败&lt;&#x2F;h3&gt;
&lt;p&gt;检查以下几点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;确保服务器防火墙允许SSH连接&lt;&#x2F;li&gt;
&lt;li&gt;验证SSH密钥格式是否正确（复制时可能丢失换行）&lt;&#x2F;li&gt;
&lt;li&gt;检查用户权限是否正确&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;解决方法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 检查SSH配置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;ssh&#x2F;sshd_config | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; PubkeyAuthentication
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 确保值为yes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 检查authorized_keys权限
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; 600 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.ssh&#x2F;authorized_keys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; 700 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.ssh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-bu-shu-jiao-ben-zhi-xing-shi-bai&quot;&gt;2. 部署脚本执行失败&lt;&#x2F;h3&gt;
&lt;p&gt;常见原因是路径错误或权限问题：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 检查脚本可执行权限
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; +x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;deploy_openhands.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 手动执行脚本并查看错误
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash -x ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;deploy_openhands.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-ying-yong-qi-dong-dan-wu-fa-fang-wen&quot;&gt;3. 应用启动但无法访问&lt;&#x2F;h3&gt;
&lt;p&gt;可能是端口绑定问题或防火墙设置：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 检查应用是否正在运行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ps&lt;&#x2F;span&gt;&lt;span&gt; aux | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; make
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 检查端口是否被正确监听
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; netstat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -tulpn &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; 80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;shi-yong-ti-yan-yu-xiao-guo&quot;&gt;使用体验与效果&lt;&#x2F;h2&gt;
&lt;p&gt;实施GitHub Actions自动部署后，我们的开发流程显著改善：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;节省时间&lt;&#x2F;strong&gt;：从手动部署的10分钟减少到完全自动化&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;减少错误&lt;&#x2F;strong&gt;：消除了人工操作可能导致的失误&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;提高可见性&lt;&#x2F;strong&gt;：可以在GitHub界面上清晰看到每次部署的状态和日志&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;团队协作&lt;&#x2F;strong&gt;：团队成员无需了解服务器细节即可完成部署&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;部署频率从原来的每周2-3次增加到每天多次，大大加快了功能迭代和问题修复的速度。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过GitHub Actions实现自动部署，我们将繁琐的手动部署过程转变为完全自动化的工作流。这不仅提高了开发效率，还增强了系统稳定性。对于任何需要频繁更新的Web应用或AI服务，这种自动部署方案都是极具价值的。&lt;&#x2F;p&gt;
&lt;p&gt;最重要的是，这套方案易于实施且维护成本低，即使是小型团队也能轻松应用。相比专业CI&#x2F;CD平台，GitHub Actions为我们提供了一个免费且强大的自动化部署解决方案。&lt;&#x2F;p&gt;
&lt;p&gt;如果你有任何自动部署的经验或其他方案，欢迎在评论区分享！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>阿里云ECS端口绑定权限问题：五种优雅的解决方案</title>
        <published>2025-03-29T00:00:00+00:00</published>
        <updated>2025-03-29T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/resolve-80-port-bind-problem-aliyun-ecs/" type="text/html"/>
        <id>https://polly2014.github.io/resolve-80-port-bind-problem-aliyun-ecs/</id>
        
        <content type="html">&lt;p&gt;最近在阿里云ECS上部署OpenHands项目（一个AI编程助手）时，遇到了一个常见但令人恼火的问题：应用程序无法绑定80端口。运行&lt;code&gt;make run&lt;&#x2F;code&gt;命令后，得到以下错误：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;INFO:     Started server process [93385]
&lt;&#x2F;span&gt;&lt;span&gt;INFO:     Waiting for application startup.
&lt;&#x2F;span&gt;&lt;span&gt;INFO:     Application startup complete.
&lt;&#x2F;span&gt;&lt;span&gt;ERROR:    [Errno 13] error while attempting to bind on address (&amp;#39;0.0.0.0&amp;#39;, 80): permission denied
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个错误初看似乎很神秘，但实际上是Linux系统安全机制的正常表现：&lt;strong&gt;在Linux中，只有root用户才能绑定小于1024的端口&lt;&#x2F;strong&gt;。这是为了保护系统安全而设计的机制，因为这些低端口号（特别是常用的80、443等）通常用于关键服务。&lt;&#x2F;p&gt;
&lt;p&gt;经过一番研究和测试，我总结了五种解决方案，从简单临时的方法到适合生产环境的专业配置，下面我将详细分享这些方案的实施步骤和各自的优缺点。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jie-jue-fang-an-dui-bi&quot;&gt;解决方案对比&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;方案&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;复杂度&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;安全性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;持久性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;适用场景&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;修改应用端口&lt;&#x2F;td&gt;&lt;td&gt;★☆☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;开发测试、简单应用&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;使用sudo运行&lt;&#x2F;td&gt;&lt;td&gt;★☆☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;★☆☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;★☆☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;临时测试、快速验证&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Nginx反向代理&lt;&#x2F;td&gt;&lt;td&gt;★★★☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;生产环境、专业部署&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;authbind授权&lt;&#x2F;td&gt;&lt;td&gt;★★☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★★☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★★★☆&lt;&#x2F;td&gt;&lt;td&gt;特定应用需要保留80端口&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;systemd socket激活&lt;&#x2F;td&gt;&lt;td&gt;★★★★☆&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;生产环境、系统级服务&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;fang-an-yi-xiu-gai-ying-yong-pei-zhi-shi-yong-fei-te-quan-duan-kou&quot;&gt;方案一：修改应用配置使用非特权端口&lt;&#x2F;h2&gt;
&lt;p&gt;这是最简单也最推荐的解决方法，特别是在开发和测试环境中。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-shi-bu-zou&quot;&gt;实施步骤：&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;找到配置应用端口的文件&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;首先，我们需要找到OpenHands在哪里配置了端口：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;GitHub_Workspace&#x2F;pro-agent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -r &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --include&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在我的情况下，发现端口配置在&lt;code&gt;server_config.py&lt;&#x2F;code&gt;文件中。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;修改端口配置&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;编辑配置文件，将端口从80改为8080（或其他大于1024的端口）：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nano&lt;&#x2F;span&gt;&lt;span&gt; server_config.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;找到类似&lt;code&gt;PORT = 80&lt;&#x2F;code&gt;或&lt;code&gt;port = 80&lt;&#x2F;code&gt;的配置行，修改为：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PORT &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8080  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 或其他大于1024的端口
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;保存并退出。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;如果使用环境变量配置端口&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有些应用使用环境变量配置，可以直接在运行时指定：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8080 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者修改&lt;code&gt;.env&lt;&#x2F;code&gt;文件（如果存在）：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PORT=8080&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; .env
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重新运行应用&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这次应该能够成功启动在8080端口上。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;访问应用&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;现在可以通过&lt;code&gt;http:&#x2F;&#x2F;your-ecs-ip:8080&lt;&#x2F;code&gt;访问应用。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;you-que-dian&quot;&gt;优缺点：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;简单直接，无需特殊权限&lt;&#x2F;li&gt;
&lt;li&gt;不涉及系统配置修改，安全风险最低&lt;&#x2F;li&gt;
&lt;li&gt;适用于各种应用和框架&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户访问时需要指定非标准端口&lt;&#x2F;li&gt;
&lt;li&gt;对于某些要求使用标准HTTP端口的应用可能不适用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fang-an-er-shi-yong-sudoyun-xing-ying-yong-jin-xian-ce-shi&quot;&gt;方案二：使用sudo运行应用（仅限测试）&lt;&#x2F;h2&gt;
&lt;p&gt;如果只是临时测试且你拥有sudo权限，可以用这种方法快速解决。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-shi-bu-zou-1&quot;&gt;实施步骤：&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接用sudo运行&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; make run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者，如果你的应用有更具体的启动命令：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; python app.py
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 或
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; npm start
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 等等
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;验证应用是否正常运行&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;服务应该能够成功绑定80端口并启动。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;you-que-dian-1&quot;&gt;优缺点：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;极其简单，一行命令解决&lt;&#x2F;li&gt;
&lt;li&gt;无需修改任何配置&lt;&#x2F;li&gt;
&lt;li&gt;速度快，适合临时测试&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;安全风险极高，绝不推荐用于生产环境&lt;&#x2F;li&gt;
&lt;li&gt;应用获得了root权限，可能导致安全漏洞&lt;&#x2F;li&gt;
&lt;li&gt;SSH断开后服务可能终止&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fang-an-san-shi-yong-nginxfan-xiang-dai-li-tui-jian-sheng-chan-huan-jing&quot;&gt;方案三：使用Nginx反向代理（推荐生产环境）&lt;&#x2F;h2&gt;
&lt;p&gt;这是专业且安全的解决方案，也是生产环境的最佳实践。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-shi-bu-zou-2&quot;&gt;实施步骤：&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装Nginx&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建Nginx配置文件&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nano &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;openhands
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;添加以下内容：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nginx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nginx &quot;&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    listen 80;
&lt;&#x2F;span&gt;&lt;span&gt;    server_name your-server-name-or-ip;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_pass http:&#x2F;&#x2F;localhost:8080;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header Host $host;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Real-IP $remote_addr;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Forwarded-Proto $scheme;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;替换&lt;code&gt;your-server-name-or-ip&lt;&#x2F;code&gt;为你的域名或ECS公网IP。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用配置&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;openhands &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nginx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 测试配置是否有效
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;修改应用配置使用8080端口&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;按照方案一中的步骤，修改你的应用配置，使其使用8080端口。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启动应用&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置应用自启动（可选）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为确保应用在系统重启后自动运行，可以创建服务文件：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;openhands.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;添加内容：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span&gt;Description=OpenHands AI Service
&lt;&#x2F;span&gt;&lt;span&gt;After=network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Service]
&lt;&#x2F;span&gt;&lt;span&gt;User=ecs-user
&lt;&#x2F;span&gt;&lt;span&gt;WorkingDirectory=&#x2F;home&#x2F;ecs-user&#x2F;GitHub_Workspace&#x2F;pro-agent
&lt;&#x2F;span&gt;&lt;span&gt;ExecStart=&#x2F;usr&#x2F;bin&#x2F;make run
&lt;&#x2F;span&gt;&lt;span&gt;Restart=always
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Install]
&lt;&#x2F;span&gt;&lt;span&gt;WantedBy=multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;启用服务：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable openhands
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl start openhands
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;you-que-dian-2&quot;&gt;优缺点：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;专业且安全的解决方案&lt;&#x2F;li&gt;
&lt;li&gt;允许在同一服务器上托管多个应用&lt;&#x2F;li&gt;
&lt;li&gt;提供额外的安全层和流量控制&lt;&#x2F;li&gt;
&lt;li&gt;支持SSL配置、负载均衡等高级功能&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;配置相对复杂&lt;&#x2F;li&gt;
&lt;li&gt;增加了一个额外的服务组件&lt;&#x2F;li&gt;
&lt;li&gt;略微增加系统资源消耗&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fang-an-si-shi-yong-authbindyun-xu-fei-rootyong-hu-bang-ding-te-quan-duan-kou&quot;&gt;方案四：使用authbind允许非root用户绑定特权端口&lt;&#x2F;h2&gt;
&lt;p&gt;如果你确实需要应用直接使用80端口，又不想用root权限运行，可以使用authbind。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-shi-bu-zou-3&quot;&gt;实施步骤：&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装authbind&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install authbind
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置端口权限&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; touch &#x2F;etc&#x2F;authbind&#x2F;byport&#x2F;80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chmod 500 &#x2F;etc&#x2F;authbind&#x2F;byport&#x2F;80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chown $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;whoami&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F;etc&#x2F;authbind&#x2F;byport&#x2F;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用authbind运行应用&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;创建一个包装脚本：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nano&lt;&#x2F;span&gt;&lt;span&gt; run_with_authbind.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;添加以下内容：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;authbind --deep&lt;&#x2F;span&gt;&lt;span&gt; make run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;赋予执行权限：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; +x run_with_authbind.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启动应用&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;run_with_authbind.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;you-que-dian-3&quot;&gt;优缺点：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;允许非root用户使用特权端口&lt;&#x2F;li&gt;
&lt;li&gt;无需修改应用配置&lt;&#x2F;li&gt;
&lt;li&gt;安全性比sudo运行高&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;需要安装额外软件&lt;&#x2F;li&gt;
&lt;li&gt;配置过程较繁琐&lt;&#x2F;li&gt;
&lt;li&gt;需要为每个特权端口单独配置&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fang-an-wu-shi-yong-systemd-socketji-huo&quot;&gt;方案五：使用systemd socket激活&lt;&#x2F;h2&gt;
&lt;p&gt;这是最专业的解决方案，适合系统级服务和生产环境。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-shi-bu-zou-4&quot;&gt;实施步骤：&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建socket单元文件&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;openhands.socket
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;添加以下内容：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span&gt;Description=OpenHands Socket
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Socket]
&lt;&#x2F;span&gt;&lt;span&gt;ListenStream=80
&lt;&#x2F;span&gt;&lt;span&gt;NoDelay=true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Install]
&lt;&#x2F;span&gt;&lt;span&gt;WantedBy=sockets.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建服务单元文件&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;openhands.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;添加以下内容：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span&gt;Description=OpenHands Service
&lt;&#x2F;span&gt;&lt;span&gt;Requires=openhands.socket
&lt;&#x2F;span&gt;&lt;span&gt;After=network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Service]
&lt;&#x2F;span&gt;&lt;span&gt;User=ecs-user
&lt;&#x2F;span&gt;&lt;span&gt;WorkingDirectory=&#x2F;home&#x2F;ecs-user&#x2F;GitHub_Workspace&#x2F;pro-agent
&lt;&#x2F;span&gt;&lt;span&gt;ExecStart=&#x2F;usr&#x2F;bin&#x2F;make run
&lt;&#x2F;span&gt;&lt;span&gt;StandardInput=socket
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Install]
&lt;&#x2F;span&gt;&lt;span&gt;WantedBy=multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用并启动socket&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable openhands.socket
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl start openhands.socket
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查状态&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl status openhands.socket
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl status openhands.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;需要修改应用代码（可能）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对于某些应用，你可能需要修改它们以支持从systemd socket接收连接。这取决于应用的具体实现。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;you-que-dian-4&quot;&gt;优缺点：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;最专业的系统级解决方案&lt;&#x2F;li&gt;
&lt;li&gt;支持socket激活（按需启动）&lt;&#x2F;li&gt;
&lt;li&gt;完全集成到系统服务管理中&lt;&#x2F;li&gt;
&lt;li&gt;安全且可靠&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;配置最复杂&lt;&#x2F;li&gt;
&lt;li&gt;可能需要修改应用代码以支持socket激活&lt;&#x2F;li&gt;
&lt;li&gt;学习曲线较陡峭&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chang-jian-wen-ti-yu-jie-jue-fang-fa&quot;&gt;常见问题与解决方法&lt;&#x2F;h2&gt;
&lt;p&gt;在实施上述方案的过程中，我遇到了一些常见问题，分享给大家：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-ying-yong-qi-dong-cheng-gong-dan-wu-fa-fang-wen&quot;&gt;1. 应用启动成功但无法访问&lt;&#x2F;h3&gt;
&lt;p&gt;检查防火墙设置：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; iptables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -L
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 如果需要开放端口
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; iptables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -A&lt;&#x2F;span&gt;&lt;span&gt; INPUT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; tcp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --dport&lt;&#x2F;span&gt;&lt;span&gt; 80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -j&lt;&#x2F;span&gt;&lt;span&gt; ACCEPT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; iptables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -A&lt;&#x2F;span&gt;&lt;span&gt; INPUT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; tcp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --dport&lt;&#x2F;span&gt;&lt;span&gt; 8080&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -j&lt;&#x2F;span&gt;&lt;span&gt; ACCEPT
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于使用ufw的系统：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ufw allow 80&#x2F;tcp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ufw allow 8080&#x2F;tcp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-nginxpei-zhi-hou-chu-xian-502cuo-wu&quot;&gt;2. Nginx配置后出现502错误&lt;&#x2F;h3&gt;
&lt;p&gt;这通常意味着Nginx无法连接到你的应用：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;确认应用确实在运行：&lt;code&gt;ps aux | grep your-app&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;检查应用绑定的是否为127.0.0.1而不是localhost&lt;&#x2F;li&gt;
&lt;li&gt;查看Nginx错误日志：&lt;code&gt;sudo tail -f &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-systemd-socketji-huo-bu-gong-zuo&quot;&gt;3. systemd socket激活不工作&lt;&#x2F;h3&gt;
&lt;p&gt;检查应用是否支持从systemd接收socket：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; journalctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; openhands.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可能需要调整应用启动参数来支持socket激活。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wo-de-xuan-ze-yu-shi-jian-jing-yan&quot;&gt;我的选择与实践经验&lt;&#x2F;h2&gt;
&lt;p&gt;经过多次测试和长期使用，我最终选择了**方案三（Nginx反向代理）**作为生产环境解决方案，原因如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;&#x2F;strong&gt;：应用以非特权用户运行，减少安全风险&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;灵活性&lt;&#x2F;strong&gt;：可以轻松配置SSL、缓存、负载均衡等高级功能&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;标准化&lt;&#x2F;strong&gt;：这是业界公认的最佳实践&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;多应用支持&lt;&#x2F;strong&gt;：可以在同一服务器上托管多个应用&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于开发环境，我通常使用&lt;strong&gt;方案一（修改端口）&lt;&#x2F;strong&gt;，简单直接且无需额外配置。&lt;&#x2F;p&gt;
&lt;p&gt;无论你选择哪种方案，记住在生产环境中绝不要使用方案二（sudo运行）！这是一个危险的做法，可能导致严重的安全问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;在阿里云ECS上无法绑定80端口是一个常见问题，反映了Linux系统的安全设计。根据你的需求和技术水平，可以选择上述五种方案之一：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;最简单解决方案&lt;&#x2F;strong&gt;：修改应用使用8080等非特权端口&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;最专业生产方案&lt;&#x2F;strong&gt;：Nginx反向代理 + 应用使用非特权端口&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;最干净系统方案&lt;&#x2F;strong&gt;：systemd socket激活&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;希望这篇博文能帮助你解决在阿里云ECS上部署Web应用时遇到的端口绑定问题。如有任何疑问或更好的解决方案，欢迎在评论区分享！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>阿里云ECS翻墙实战指南：从无法安装到全球网络畅通</title>
        <published>2025-03-28T00:00:00+00:00</published>
        <updated>2025-03-28T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/vpn-configuration-aliyun-ecs/" type="text/html"/>
        <id>https://polly2014.github.io/vpn-configuration-aliyun-ecs/</id>
        
        <content type="html">&lt;p&gt;最近我在使用阿里云ECS（杭州节点）部署一个AI项目时，遇到了一个令人烦恼的问题：Python依赖安装过程中出现超时错误，导致整个项目无法正常构建。错误信息如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;- Installing greenlet (3.0.0): Failed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TimeoutError
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;The read operation timed out
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ReadTimeoutError
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HTTPSConnectionPool(host=&amp;#39;files.pythonhosted.org&amp;#39;, port=443): Read timed out.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个问题本质上是由于阿里云ECS访问境外资源受限导致的。经过一番研究和实践，我总结了几种解决方案，下面我将详细介绍每种方法的具体操作步骤及其优缺点。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fang-an-dui-bi&quot;&gt;方案对比&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;方案&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;复杂度&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;稳定性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;持久性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;性能&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;适用场景&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;SSH隧道代理&lt;&#x2F;td&gt;&lt;td&gt;★☆☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★★☆☆&lt;&#x2F;td&gt;&lt;td&gt;★☆☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;临时使用，快速解决&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ECS上安装Clash&lt;&#x2F;td&gt;&lt;td&gt;★★★☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★★★☆&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;★★★★☆&lt;&#x2F;td&gt;&lt;td&gt;长期使用，稳定需求&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;国内镜像源替换&lt;&#x2F;td&gt;&lt;td&gt;★☆☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★★☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★☆☆☆&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;仅需安装特定软件包&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Privoxy转发&lt;&#x2F;td&gt;&lt;td&gt;★★★★☆&lt;&#x2F;td&gt;&lt;td&gt;★★★★☆&lt;&#x2F;td&gt;&lt;td&gt;★★★★☆&lt;&#x2F;td&gt;&lt;td&gt;★★★☆☆&lt;&#x2F;td&gt;&lt;td&gt;需要同时支持多种代理协议&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;fang-an-yi-sshsui-dao-dai-li-zui-jian-dan-kuai-jie&quot;&gt;方案一：SSH隧道代理（最简单快捷）&lt;&#x2F;h2&gt;
&lt;p&gt;这种方法利用SSH反向隧道，将本地机器上的代理服务（如ClashX）映射到远程ECS服务器。前提是你的本地电脑已经可以正常科学上网。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cao-zuo-bu-zou&quot;&gt;操作步骤：&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确认本地代理设置&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;首先确认我的ClashX正在运行，并记下代理端口（通常是7890）。在macOS上点击ClashX菜单，查看&amp;quot;端口&amp;quot;信息。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;建立SSH反向隧道&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在本地终端执行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh -R&lt;&#x2F;span&gt;&lt;span&gt; 7890:localhost:7890 root@your-ecs-ip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个命令的含义是：将远程服务器（ECS）上7890端口的访问转发到本地计算机的7890端口。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在ECS上配置代理环境变量&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;连接到ECS后，设置环境变量：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http_proxy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:7890
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;https_proxy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:7890
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;验证代理是否工作&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;执行以下命令测试：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看当前IP（应显示代理服务器的IP）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span&gt; ipinfo.io
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 测试访问Google
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -I&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;www.google.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果能够成功获取响应，说明代理已经生效。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;继续安装过程&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;现在可以重新执行之前失败的安装命令：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install greenlet==3.0.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 或者继续项目的安装流程
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; requirements.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;you-que-dian&quot;&gt;优缺点：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;设置极为简单，无需在ECS上安装额外软件&lt;&#x2F;li&gt;
&lt;li&gt;直接利用本地已有的代理服务&lt;&#x2F;li&gt;
&lt;li&gt;不需要修改ECS上的系统配置&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;依赖SSH连接，断开SSH就会失效&lt;&#x2F;li&gt;
&lt;li&gt;需要本地电脑一直开着并运行代理服务&lt;&#x2F;li&gt;
&lt;li&gt;网络延迟较高，速度可能不够理想&lt;&#x2F;li&gt;
&lt;li&gt;不适合长期使用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fang-an-er-zai-ecsshang-pei-zhi-clash-zui-wen-ding-fang-an&quot;&gt;方案二：在ECS上配置Clash（最稳定方案）&lt;&#x2F;h2&gt;
&lt;p&gt;这种方法通过在ECS上安装Clash客户端，实现服务器自身的科学上网能力。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cao-zuo-bu-zou-1&quot;&gt;操作步骤：&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;先使用方案一建立临时代理&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;按照上述SSH隧道的方法，先建立一个临时代理，方便下载Clash。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 本地执行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh -R&lt;&#x2F;span&gt;&lt;span&gt; 7890:localhost:7890 root@your-ecs-ip
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ECS上执行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http_proxy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:7890
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;https_proxy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:7890
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;下载Clash到ECS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建目录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;clash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;clash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 下载Clash（以Linux amd64为例）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;github.com&#x2F;Dreamacro&#x2F;clash&#x2F;releases&#x2F;download&#x2F;v1.15.1&#x2F;clash-linux-amd64-v1.15.1.gz
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 解压并添加执行权限
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gunzip&lt;&#x2F;span&gt;&lt;span&gt; clash-linux-amd64-v1.15.1.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; +x clash-linux-amd64-v1.15.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mv&lt;&#x2F;span&gt;&lt;span&gt; clash-linux-amd64-v1.15.1 clash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置Clash&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;需要将本地的Clash配置文件传输到ECS上：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 在本地新开一个终端执行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scp ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.config&#x2F;clash&#x2F;config.yaml root@your-ecs-ip:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;clash&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果你使用的是订阅地址，也可以直接在ECS上下载配置：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 在ECS上执行（记得先设置好代理环境变量）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wget -O ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;clash&#x2F;config.yaml 你的订阅地址
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行Clash&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;clash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 前台运行测试
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;clash -f&lt;&#x2F;span&gt;&lt;span&gt; config.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 确认工作正常后，可以使用nohup后台运行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nohup&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;clash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; config.yaml &amp;gt; clash.log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置系统代理&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http_proxy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:7890
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;https_proxy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:7890
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置开机自启&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;创建系统服务文件：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;clash.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;填入以下内容：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span&gt;Description=Clash Daemon
&lt;&#x2F;span&gt;&lt;span&gt;After=network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Service]
&lt;&#x2F;span&gt;&lt;span&gt;Type=simple
&lt;&#x2F;span&gt;&lt;span&gt;User=root
&lt;&#x2F;span&gt;&lt;span&gt;ExecStart=&#x2F;root&#x2F;clash&#x2F;clash -f &#x2F;root&#x2F;clash&#x2F;config.yaml
&lt;&#x2F;span&gt;&lt;span&gt;Restart=on-failure
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Install]
&lt;&#x2F;span&gt;&lt;span&gt;WantedBy=multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;启用服务：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable clash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl start clash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;持久化环境变量&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;编辑&lt;code&gt;~&#x2F;.bashrc&lt;&#x2F;code&gt;文件：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export http_proxy=http:&#x2F;&#x2F;127.0.0.1:7890&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export https_proxy=http:&#x2F;&#x2F;127.0.0.1:7890&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;you-que-dian-1&quot;&gt;优缺点：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;服务器独立实现科学上网，不依赖本地代理&lt;&#x2F;li&gt;
&lt;li&gt;可以设置为开机自启，长期稳定运行&lt;&#x2F;li&gt;
&lt;li&gt;配置灵活，可以针对不同需求调整规则&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;设置相对复杂&lt;&#x2F;li&gt;
&lt;li&gt;需要有可用的配置文件或订阅链接&lt;&#x2F;li&gt;
&lt;li&gt;占用服务器资源（虽然很少）&lt;&#x2F;li&gt;
&lt;li&gt;需要定期更新配置以保持可用性&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fang-an-san-shi-yong-guo-nei-jing-xiang-yuan-zui-jian-dan-dan-you-xian&quot;&gt;方案三：使用国内镜像源（最简单但有限）&lt;&#x2F;h2&gt;
&lt;p&gt;如果你只是需要安装Python包，最简单的方法是使用国内的PyPI镜像。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cao-zuo-bu-zou-2&quot;&gt;操作步骤：&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;针对单次安装使用镜像源&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install greenlet==3.0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --trusted-host&lt;&#x2F;span&gt;&lt;span&gt; mirrors.aliyun.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;针对项目批量安装&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; requirements.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --trusted-host&lt;&#x2F;span&gt;&lt;span&gt; mirrors.aliyun.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;永久配置镜像源&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;创建或编辑&lt;code&gt;~&#x2F;.pip&#x2F;pip.conf&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.pip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nano ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.pip&#x2F;pip.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;添加以下内容：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[global]
&lt;&#x2F;span&gt;&lt;span&gt;index-url = https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;[install]
&lt;&#x2F;span&gt;&lt;span&gt;trusted-host = mirrors.aliyun.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样就不需要每次都指定镜像源了。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;you-que-dian-2&quot;&gt;优缺点：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;设置极为简单&lt;&#x2F;li&gt;
&lt;li&gt;不需要科学上网即可高速下载包&lt;&#x2F;li&gt;
&lt;li&gt;对于大多数Python包都有效&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;仅适用于PyPI包安装&lt;&#x2F;li&gt;
&lt;li&gt;部分较新或冷门的包可能没有同步到镜像&lt;&#x2F;li&gt;
&lt;li&gt;无法解决访问其他国外资源的问题&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fang-an-si-shi-yong-privoxyzhuan-fa-socks5dai-li&quot;&gt;方案四：使用Privoxy转发SOCKS5代理&lt;&#x2F;h2&gt;
&lt;p&gt;如果你有SOCKS5代理但需要HTTP代理，或者需要在不同协议间转换，可以使用Privoxy。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cao-zuo-bu-zou-3&quot;&gt;操作步骤：&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装Privoxy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Debian&#x2F;Ubuntu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install privoxy
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# CentOS&#x2F;RHEL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; yum install epel-release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; yum install privoxy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置Privoxy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;编辑配置文件：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nano &#x2F;etc&#x2F;privoxy&#x2F;config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;添加以下内容（假设你的SOCKS5代理在本地7891端口）：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# SOCKS5代理转发
&lt;&#x2F;span&gt;&lt;span&gt;forward-socks5 &#x2F; localhost:7891 .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# 监听地址
&lt;&#x2F;span&gt;&lt;span&gt;listen-address 127.0.0.1:8118
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启动Privoxy服务&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart privoxy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable privoxy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置环境变量&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http_proxy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:8118
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;https_proxy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:8118
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;持久化配置&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export http_proxy=http:&#x2F;&#x2F;localhost:8118&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export https_proxy=http:&#x2F;&#x2F;localhost:8118&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;you-que-dian-3&quot;&gt;优缺点：&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;可以在不同代理协议间转换&lt;&#x2F;li&gt;
&lt;li&gt;支持更多自定义过滤规则&lt;&#x2F;li&gt;
&lt;li&gt;可与各种代理服务配合使用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;配置相对复杂&lt;&#x2F;li&gt;
&lt;li&gt;增加了一层代理转发，可能影响速度&lt;&#x2F;li&gt;
&lt;li&gt;需要维护额外的服务&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pai-cha-chang-jian-wen-ti&quot;&gt;排查常见问题&lt;&#x2F;h2&gt;
&lt;p&gt;在配置过程中，你可能会遇到一些问题，下面是常见问题的解决方法：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-dai-li-she-zhi-hou-reng-ran-wu-fa-fang-wen-wai-wang&quot;&gt;1. 代理设置后仍然无法访问外网&lt;&#x2F;h3&gt;
&lt;p&gt;检查以下几点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;确认代理服务是否正常运行&lt;&#x2F;li&gt;
&lt;li&gt;验证代理端口是否正确&lt;&#x2F;li&gt;
&lt;li&gt;测试代理是否工作：&lt;code&gt;curl -v https:&#x2F;&#x2F;www.google.com&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;检查防火墙设置：&lt;code&gt;sudo iptables -L&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-sshsui-dao-duan-kai-lian-jie&quot;&gt;2. SSH隧道断开连接&lt;&#x2F;h3&gt;
&lt;p&gt;使用以下方法保持SSH连接：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 在本地~&#x2F;.ssh&#x2F;config中添加
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Host&lt;&#x2F;span&gt;&lt;span&gt; your-ecs-alias
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HostName&lt;&#x2F;span&gt;&lt;span&gt; your-ecs-ip
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt; root
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ServerAliveInterval&lt;&#x2F;span&gt;&lt;span&gt; 60
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ServerAliveCountMax&lt;&#x2F;span&gt;&lt;span&gt; 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-clashpei-zhi-wen-jian-wen-ti&quot;&gt;3. Clash配置文件问题&lt;&#x2F;h3&gt;
&lt;p&gt;如果Clash启动失败，检查配置文件：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 验证配置文件格式
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;clash -t -f&lt;&#x2F;span&gt;&lt;span&gt; config.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看详细日志
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;clash -d&lt;&#x2F;span&gt;&lt;span&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; config.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-an-quan-xing-kao-lu&quot;&gt;4. 安全性考虑&lt;&#x2F;h3&gt;
&lt;p&gt;为了保障服务器安全：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;不要将代理端口暴露到公网&lt;&#x2F;li&gt;
&lt;li&gt;定期更新Clash和配置文件&lt;&#x2F;li&gt;
&lt;li&gt;考虑使用防火墙限制访问：&lt;code&gt;ufw allow from 192.168.1.0&#x2F;24 to any port 7890&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zong-jie-yu-jian-yi&quot;&gt;总结与建议&lt;&#x2F;h2&gt;
&lt;p&gt;经过实践，我发现不同场景适合不同的方案：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;临时使用&lt;&#x2F;strong&gt;：SSH隧道是最便捷的选择&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;长期稳定&lt;&#x2F;strong&gt;：在ECS上安装Clash是最佳方案&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;仅安装Python包&lt;&#x2F;strong&gt;：使用国内镜像源足够&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;复杂网络环境&lt;&#x2F;strong&gt;：Privoxy提供了更灵活的代理转发&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我个人的最佳实践是结合使用：平时使用Clash自启动服务实现全局代理，同时配置pip使用国内镜像源来加速Python包安装。这样既能满足日常的外网访问需求，又能保证Python环境的高效配置。&lt;&#x2F;p&gt;
&lt;p&gt;希望这篇指南能帮助你解决阿里云ECS上的网络访问问题。如果你有任何疑问或更好的方法，欢迎在评论区分享！&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;声明&lt;&#x2F;strong&gt;：本文仅供技术交流和学习使用，请遵守相关法律法规和服务商的使用条款。在使用代理服务时，应当确保遵循合规原则，不应用于任何非法用途。### 4. 安全性考虑&lt;&#x2F;p&gt;
&lt;p&gt;为了保障服务器安全：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;不要将代理端口暴露到公网&lt;&#x2F;li&gt;
&lt;li&gt;定期更新Clash和配置文件&lt;&#x2F;li&gt;
&lt;li&gt;考虑使用防火墙限制访问：&lt;code&gt;ufw allow from 192.168.1.0&#x2F;24 to any port 7890&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zong-jie-yu-jian-yi-1&quot;&gt;总结与建议&lt;&#x2F;h2&gt;
&lt;p&gt;经过实践，我发现不同场景适合不同的方案：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;临时使用&lt;&#x2F;strong&gt;：SSH隧道是最便捷的选择&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;长期稳定&lt;&#x2F;strong&gt;：在ECS上安装Clash是最佳方案&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;仅安装Python包&lt;&#x2F;strong&gt;：使用国内镜像源足够&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;复杂网络环境&lt;&#x2F;strong&gt;：Privoxy提供了更灵活的代理转发&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我个人的最佳实践是结合使用：平时使用Clash自启动服务实现全局代理，同时配置pip使用国内镜像源来加速Python包安装。这样既能满足日常的外网访问需求，又能保证Python环境的高效配置。&lt;&#x2F;p&gt;
&lt;p&gt;希望这篇指南能帮助你解决阿里云ECS上的网络访问问题。如果你有任何疑问或更好的方法，欢迎在评论区分享！&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;声明&lt;&#x2F;strong&gt;：本文仅供技术交流和学习使用，请遵守相关法律法规和服务商的使用条款。在使用代理服务时，应当确保遵循合规原则，不应用于任何非法用途。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>AI编程助手项目级上下文理解：七大工具实现原理与技术对比</title>
        <published>2025-03-26T00:00:00+00:00</published>
        <updated>2025-03-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/ai-coding-tools-repo-context-understanding/" type="text/html"/>
        <id>https://polly2014.github.io/ai-coding-tools-repo-context-understanding/</id>
        
        <content type="html">&lt;h1 id=&quot;ai-coding-tool-repo-level-context-understanding-shi-xian-yuan-li-yu-shui-ping-dui-bi&quot;&gt;AI Coding Tool Repo-Level Context Understanding 实现原理与水平对比&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;1-cursor-six-psix-psix-psix-psix-p&quot;&gt;1. Cursor (⭐⭐⭐⭐⭐)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;实现原理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;构建完整代码库索引和依赖关系图&lt;&#x2F;li&gt;
&lt;li&gt;使用抽象语法树(AST)解析整个项目结构&lt;&#x2F;li&gt;
&lt;li&gt;实时维护符号表和引用关系&lt;&#x2F;li&gt;
&lt;li&gt;采用语义级文件分块与优先级排序技术&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;技术特点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;智能上下文窗口管理：根据查询动态调整文件包含范围&lt;&#x2F;li&gt;
&lt;li&gt;递归遍历及依赖识别：自动追踪跨文件函数调用和类继承&lt;&#x2F;li&gt;
&lt;li&gt;增量索引更新：仅处理变更文件，保持索引最新&lt;&#x2F;li&gt;
&lt;li&gt;记忆化搜索：缓存频繁访问的代码结构&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;水平评估&lt;&#x2F;strong&gt;：Cursor专为代码理解而设计，能够在大型项目中保持对全局结构的认知，是市场上项目级理解能力最强的工具之一。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-devin-six-psix-psix-psix-psix-p&quot;&gt;2. Devin (⭐⭐⭐⭐⭐)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;实现原理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;多阶段项目分析流水线&lt;&#x2F;li&gt;
&lt;li&gt;类似编译器的全局分析系统&lt;&#x2F;li&gt;
&lt;li&gt;代码与文档统一表示模型&lt;&#x2F;li&gt;
&lt;li&gt;疑似利用图神经网络构建代码关系图&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;技术特点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;任务分解与规划：将复杂项目理解任务分解为子任务&lt;&#x2F;li&gt;
&lt;li&gt;代码-自然语言双向映射：建立代码与需求间的关联&lt;&#x2F;li&gt;
&lt;li&gt;历史上下文持久化：维持长期项目记忆&lt;&#x2F;li&gt;
&lt;li&gt;可能采用多模态理解：结合代码、文档、UI截图等多种信息源&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;水平评估&lt;&#x2F;strong&gt;：Devin的项目理解是其自主开发能力的基础，能够处理包含多个组件的复杂系统，并理解各组件间交互。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-openhands-six-psix-psix-psix-p&quot;&gt;3. OpenHands (⭐⭐⭐⭐)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;实现原理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;基于CodeAct框架的探索性项目分析&lt;&#x2F;li&gt;
&lt;li&gt;开源索引器与代码解析器集成&lt;&#x2F;li&gt;
&lt;li&gt;支持多种语言的语法与语义分析&lt;&#x2F;li&gt;
&lt;li&gt;模块化文件组织理解系统&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;技术特点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;交互式探索：通过执行和观察深入理解项目&lt;&#x2F;li&gt;
&lt;li&gt;迭代理解模型：循环更新项目结构认知&lt;&#x2F;li&gt;
&lt;li&gt;支持自定义索引策略：适应不同项目结构&lt;&#x2F;li&gt;
&lt;li&gt;多模型集成：可对接不同大语言模型处理项目信息&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;水平评估&lt;&#x2F;strong&gt;：作为开源项目，OpenHands提供了灵活的项目理解框架，通过执行-观察-更新循环达到不错的项目理解深度，但在大型项目上可能效率低于商业工具。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-cline-six-psix-psix-p&quot;&gt;4. CLine (⭐⭐⭐)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;实现原理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;命令行环境的文件系统遍历&lt;&#x2F;li&gt;
&lt;li&gt;基于git仓库结构的项目映射&lt;&#x2F;li&gt;
&lt;li&gt;文件关系的统计分析&lt;&#x2F;li&gt;
&lt;li&gt;终端历史的上下文累积&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;技术特点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;轻量级文件扫描：快速构建项目基本结构&lt;&#x2F;li&gt;
&lt;li&gt;历史命令分析：推断项目的重要组件&lt;&#x2F;li&gt;
&lt;li&gt;按需深入分析：只在必要时解析特定文件&lt;&#x2F;li&gt;
&lt;li&gt;终端输出解析：通过命令执行结果理解代码关系&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;水平评估&lt;&#x2F;strong&gt;：专注于终端环境，对项目理解侧重于文件结构和基本依赖关系，适合中小型项目，但深度有限。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-roo-code-six-psix-psix-p&quot;&gt;5. Roo Code (⭐⭐⭐)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;实现原理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;从CLine演进的混合式索引系统&lt;&#x2F;li&gt;
&lt;li&gt;语言感知的代码块分析&lt;&#x2F;li&gt;
&lt;li&gt;轻量级符号提取&lt;&#x2F;li&gt;
&lt;li&gt;代码结构图谱构建&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;技术特点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;增强的文件关联分析&lt;&#x2F;li&gt;
&lt;li&gt;导入依赖追踪&lt;&#x2F;li&gt;
&lt;li&gt;函数与类关系映射&lt;&#x2F;li&gt;
&lt;li&gt;本地化的项目知识库&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;水平评估&lt;&#x2F;strong&gt;：较CLine有所增强，在保持轻量级的同时提供了更深的代码结构理解，但仍以代码生成为主要目标，项目理解为辅助功能。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-github-copilot-six-psix-psix-p&quot;&gt;6. GitHub Copilot (⭐⭐⭐)&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;注：根据2025年2月Agent Mode更新，评分应从⭐⭐升级为⭐⭐⭐&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;实现原理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;传统版：主要依赖局部文件上下文&lt;&#x2F;li&gt;
&lt;li&gt;Agent Mode：引入文件间关系分析和项目结构扫描&lt;&#x2F;li&gt;
&lt;li&gt;VSCode扩展集成的轻量级索引&lt;&#x2F;li&gt;
&lt;li&gt;云端大模型理解与本地索引结合&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;技术特点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;传统版：单文件深度理解，有限的跨文件引用处理&lt;&#x2F;li&gt;
&lt;li&gt;Agent Mode新增：
&lt;ul&gt;
&lt;li&gt;全项目代码扫描&lt;&#x2F;li&gt;
&lt;li&gt;智能引用追踪&lt;&#x2F;li&gt;
&lt;li&gt;上下文压缩与扩展算法&lt;&#x2F;li&gt;
&lt;li&gt;基于用户行为的重要性权重分配&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;水平评估&lt;&#x2F;strong&gt;：传统Copilot主要关注当前文件，项目理解能力有限；Agent Mode显著提升了跨文件理解能力，但尚未达到Cursor和Devin的水平，正在快速追赶中。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;7-claude-six-psix-p&quot;&gt;7. Claude (⭐⭐)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;实现原理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;依赖用户提供的项目上下文&lt;&#x2F;li&gt;
&lt;li&gt;没有内置项目扫描功能&lt;&#x2F;li&gt;
&lt;li&gt;基于大模型的上下文推理&lt;&#x2F;li&gt;
&lt;li&gt;文本理解为主，代码结构理解为辅&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;技术特点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;超长上下文窗口：可处理大量手动提供的项目文件&lt;&#x2F;li&gt;
&lt;li&gt;零索引模式：不主动构建项目索引&lt;&#x2F;li&gt;
&lt;li&gt;文档导向理解：更善于从文档理解项目结构&lt;&#x2F;li&gt;
&lt;li&gt;推理而非索引：通过大模型推理能力理解项目关系&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;水平评估&lt;&#x2F;strong&gt;：Claude作为通用助手，在项目级上下文理解上依赖用户提供足够信息，自身不主动构建项目结构，导致这方面能力受限。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-zhu-shi-xian-chai-yi-fen-xi-biao&quot;&gt;技术实现差异分析表&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;工具&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;索引方式&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;代码表示&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;更新机制&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;技术优势&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;技术局限&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;全项目深度索引&lt;&#x2F;td&gt;&lt;td&gt;AST + 依赖图&lt;&#x2F;td&gt;&lt;td&gt;实时增量更新&lt;&#x2F;td&gt;&lt;td&gt;完整符号表、精确引用追踪&lt;&#x2F;td&gt;&lt;td&gt;大型单体项目可能性能下降&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;多阶段分析流水线&lt;&#x2F;td&gt;&lt;td&gt;图结构 + 语义网络&lt;&#x2F;td&gt;&lt;td&gt;任务驱动更新&lt;&#x2F;td&gt;&lt;td&gt;深度理解代码意图和架构&lt;&#x2F;td&gt;&lt;td&gt;封闭系统，实现细节不明&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;探索式索引&lt;&#x2F;td&gt;&lt;td&gt;混合表示模型&lt;&#x2F;td&gt;&lt;td&gt;循环迭代更新&lt;&#x2F;td&gt;&lt;td&gt;灵活性高，行为框架驱动&lt;&#x2F;td&gt;&lt;td&gt;处理效率较低，配置复杂&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Copilot(Agent)&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;局部深度+全局浅度&lt;&#x2F;td&gt;&lt;td&gt;文本 + 轻量符号表&lt;&#x2F;td&gt;&lt;td&gt;基于编辑触发&lt;&#x2F;td&gt;&lt;td&gt;结合局部细节和全局视图&lt;&#x2F;td&gt;&lt;td&gt;全局理解深度有限&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;文件系统遍历&lt;&#x2F;td&gt;&lt;td&gt;文本 + 基础语法树&lt;&#x2F;td&gt;&lt;td&gt;命令触发更新&lt;&#x2F;td&gt;&lt;td&gt;终端环境高度集成&lt;&#x2F;td&gt;&lt;td&gt;深度理解能力受限&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;混合式轻量索引&lt;&#x2F;td&gt;&lt;td&gt;增强语法树&lt;&#x2F;td&gt;&lt;td&gt;按需更新&lt;&#x2F;td&gt;&lt;td&gt;本地化知识库&lt;&#x2F;td&gt;&lt;td&gt;全局分析不完整&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;无主动索引&lt;&#x2F;td&gt;&lt;td&gt;纯文本理解&lt;&#x2F;td&gt;&lt;td&gt;用户输入驱动&lt;&#x2F;td&gt;&lt;td&gt;超长上下文处理&lt;&#x2F;td&gt;&lt;td&gt;缺乏主动探索能力&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;wei-lai-fa-zhan-qu-shi&quot;&gt;未来发展趋势&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;索引与理解融合&lt;&#x2F;strong&gt;：未来工具将结合静态索引和动态理解，提供更深入的项目级理解。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;增量与持久化&lt;&#x2F;strong&gt;：项目理解将从单次分析转向持久化知识库，累积对项目的理解。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;多模态项目理解&lt;&#x2F;strong&gt;：除代码外，将整合文档、注释、提交历史等多维信息。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;自适应上下文&lt;&#x2F;strong&gt;：根据任务动态调整上下文范围和深度，平衡全局视图与局部细节。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;协作理解模式&lt;&#x2F;strong&gt;：多个AI代理协同工作，分别负责项目不同方面的理解，构建更全面的项目认知。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;jie-lun&quot;&gt;结论&lt;&#x2F;h2&gt;
&lt;p&gt;项目级上下文理解能力的差异反映了各工具的设计哲学和技术侧重。Cursor和Devin通过深度索引和分析实现了最高水平的项目理解；OpenHands通过CodeAct行为框架实现了灵活而有深度的理解；Copilot正在通过Agent Mode快速增强这一能力；而Claude则代表了不依赖内置索引的另一种思路。&lt;&#x2F;p&gt;
&lt;p&gt;随着技术进步，这一能力将成为AI编程助手的关键差异点，直接影响工具能够处理的项目复杂度和提供建议的质量。未来最成功的工具很可能是那些能够平衡全局项目理解与局部代码生成的解决方案。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>AI编程助手全面横评：七大工具功能与架构对比</title>
        <published>2025-03-24T00:00:00+00:00</published>
        <updated>2025-03-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/ai-coding-tools-comparison/" type="text/html"/>
        <id>https://polly2014.github.io/ai-coding-tools-comparison/</id>
        
        <content type="html">&lt;p&gt;以下是一份针对 &lt;strong&gt;GitHub Copilot、Cursor、Claude、OpenHands（曾用名OpenDevin）、Devin、CLine 和 Roo Code&lt;&#x2F;strong&gt; 的横向评估分析报告，涵盖功能、技术、适用场景及优缺点对比：&lt;&#x2F;p&gt;
&lt;!--
&gt; **评测说明**：本文基于2025年Q1各工具版本进行评测，包括GitHub Copilot Enterprise (v2.3)、Cursor (v1.9.0)、Claude 3.5 Opus、OpenHands (v0.7.2)、Devin (预览版)、CLine (v1.2.5)和Roo Code (v2.1.0)。评测环境包括常见开发语言(Python、JavaScript、Go、Rust等)的中小型开发项目，着重考察日常开发任务中的工具表现和用户体验。
--&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;1-gai-shu&quot;&gt;&lt;strong&gt;1. 概述&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;工具&lt;&#x2F;th&gt;&lt;th&gt;类型&lt;&#x2F;th&gt;&lt;th&gt;开发商&#x2F;团队&lt;&#x2F;th&gt;&lt;th&gt;核心定位&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;GitHub Copilot&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI代码补全&#x2F;助手&lt;&#x2F;td&gt;&lt;td&gt;GitHub (Microsoft)&lt;&#x2F;td&gt;&lt;td&gt;实时代码生成与补全&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI集成IDE&lt;&#x2F;td&gt;&lt;td&gt;Cursor团队&lt;&#x2F;td&gt;&lt;td&gt;智能代码编辑与项目级上下文理解&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;通用AI助手&lt;&#x2F;td&gt;&lt;td&gt;Anthropic&lt;&#x2F;td&gt;&lt;td&gt;自然语言处理与代码辅助&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;开源AI开发者代理&lt;&#x2F;td&gt;&lt;td&gt;OpenHands社区&lt;&#x2F;td&gt;&lt;td&gt;自主完成开发任务（开源替代Devin）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI全栈开发代理&lt;&#x2F;td&gt;&lt;td&gt;Cognition AI&lt;&#x2F;td&gt;&lt;td&gt;端到端自动化开发&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;终端AI助手&lt;&#x2F;td&gt;&lt;td&gt;CLine团队&lt;&#x2F;td&gt;&lt;td&gt;命令行环境中的AI编程辅助&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;开源代码生成引擎&lt;&#x2F;td&gt;&lt;td&gt;RooVet (CLine演进)&lt;&#x2F;td&gt;&lt;td&gt;CLine的进化版，专注高质量代码生成的开源方案&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;2-he-xin-gong-neng-dui-bi&quot;&gt;&lt;strong&gt;2. 核心功能对比&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;评分标准：⭐=基础功能&#x2F;初步支持；⭐⭐=有限但可用；⭐⭐⭐=功能完善；⭐⭐⭐⭐=优秀表现；⭐⭐⭐⭐⭐=领先水平&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;术语解释&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;项目级上下文理解&lt;&#x2F;strong&gt;：工具理解整个代码库结构、依赖关系和上下文的能力&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;对话式交互&lt;&#x2F;strong&gt;：通过自然语言对话方式与工具进行持续交互的便捷度&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;自动化任务执行&lt;&#x2F;strong&gt;：工具能自主完成复杂任务（如测试、调试、重构）的程度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;GitHub Copilot&lt;&#x2F;th&gt;&lt;th&gt;Cursor&lt;&#x2F;th&gt;&lt;th&gt;Claude&lt;&#x2F;th&gt;&lt;th&gt;OpenHands&lt;&#x2F;th&gt;&lt;th&gt;Devin&lt;&#x2F;th&gt;&lt;th&gt;CLine&lt;&#x2F;th&gt;&lt;th&gt;Roo Code&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;代码补全&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;多语言支持&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;支持主流语言&lt;&#x2F;td&gt;&lt;td&gt;支持主流语言&lt;&#x2F;td&gt;&lt;td&gt;有限支持&lt;&#x2F;td&gt;&lt;td&gt;依赖模型&lt;&#x2F;td&gt;&lt;td&gt;全栈支持&lt;&#x2F;td&gt;&lt;td&gt;终端语言为主&lt;&#x2F;td&gt;&lt;td&gt;支持主流语言&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;项目级上下文理解&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;对话式交互&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;自动化任务执行&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;部分支持&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;调试与错误修复&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;开源&#x2F;可定制性&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;集成开发环境&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;插件形式&lt;&#x2F;td&gt;&lt;td&gt;独立IDE&lt;&#x2F;td&gt;&lt;td&gt;无&lt;&#x2F;td&gt;&lt;td&gt;CLI&#x2F;Web&lt;&#x2F;td&gt;&lt;td&gt;独立平台&lt;&#x2F;td&gt;&lt;td&gt;终端&#x2F;VS Code&lt;&#x2F;td&gt;&lt;td&gt;可集成&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;协议支持&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;MCP扩展支持&lt;&#x2F;td&gt;&lt;td&gt;自有API&lt;&#x2F;td&gt;&lt;td&gt;原生MCP支持&lt;&#x2F;td&gt;&lt;td&gt;自有API&lt;&#x2F;td&gt;&lt;td&gt;自有API&lt;&#x2F;td&gt;&lt;td&gt;部分MCP支持&lt;&#x2F;td&gt;&lt;td&gt;增强MCP兼容&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-ji-zhu-zhan-yu-mo-xing&quot;&gt;&lt;strong&gt;3. 技术栈与模型&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GitHub Copilot&lt;&#x2F;strong&gt;：基于OpenAI Codex（GPT-3.5&#x2F;4衍生模型），深度优化代码生成，现已添加MCP扩展支持。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;：结合GPT-4与自有模型，支持项目文件索引和上下文感知。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;：Anthropic自研Claude 3系列，长文本处理能力强，提供原生MCP支持，适合文档分析和代理开发。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;：开源项目，可对接多种模型（如Llama 3、GPT-4），灵活性高。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;：未公开细节，推测使用多模态模型+强化学习，擅长复杂任务分解。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;：基于多种开源模型，支持终端和VS Code双环境集成，部分支持MCP，是Roo Code的前身。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;：CLine的演进产品，继承了其终端能力并增强了代码生成质量，提供更完善的MCP兼容性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;4-gua-yong-chang-jing&quot;&gt;&lt;strong&gt;4. 适用场景&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;工具&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;最佳场景&lt;&#x2F;th&gt;&lt;th&gt;局限性&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Copilot&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;快速代码片段生成、学习新语言&lt;&#x2F;td&gt;&lt;td&gt;缺乏项目级规划能力&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;中小型项目开发、重构与代码审查&lt;&#x2F;td&gt;&lt;td&gt;依赖云服务，隐私性较弱&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;技术文档生成、代码解释、基于MCP的代理开发&lt;&#x2F;td&gt;&lt;td&gt;代码生成精度较低&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;定制化开发流程、研究AI代理行为&lt;&#x2F;td&gt;&lt;td&gt;成熟度低，需手动配置&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;全栈项目自动化（从需求到部署）&lt;&#x2F;td&gt;&lt;td&gt;封闭测试中，成本未知&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;终端操作、VS Code开发、DevOps工作流（Roo Code的前身）&lt;&#x2F;td&gt;&lt;td&gt;依赖大型模型API，离线能力有限&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;CLine的进化版，适用于需要本地部署、代码质量要求高的场景，以及Microsoft生态系统集成&lt;&#x2F;td&gt;&lt;td&gt;配置复杂，资源需求较高&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;5-jie-ge-yu-cheng-ben-dui-bi&quot;&gt;&lt;strong&gt;5 价格与成本对比&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;工具&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;定价模式&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;价格区间&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;免费版本&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;企业方案&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Copilot&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;订阅制&lt;&#x2F;td&gt;&lt;td&gt;$10-20&#x2F;月&#x2F;用户&lt;&#x2F;td&gt;&lt;td&gt;有（学生&#x2F;开源）&lt;&#x2F;td&gt;&lt;td&gt;有（按规模定制）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;免费+高级订阅&lt;&#x2F;td&gt;&lt;td&gt;免费-$20&#x2F;月&lt;&#x2F;td&gt;&lt;td&gt;有（功能受限）&lt;&#x2F;td&gt;&lt;td&gt;有（团队版）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;免费+API计费&lt;&#x2F;td&gt;&lt;td&gt;免费-按使用量&lt;&#x2F;td&gt;&lt;td&gt;有（有限制）&lt;&#x2F;td&gt;&lt;td&gt;有（API订阅）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;开源免费&lt;&#x2F;td&gt;&lt;td&gt;免费（自行部署成本）&lt;&#x2F;td&gt;&lt;td&gt;是（完整功能）&lt;&#x2F;td&gt;&lt;td&gt;自行部署&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;商业收费&lt;&#x2F;td&gt;&lt;td&gt;$500&#x2F;月&lt;&#x2F;td&gt;&lt;td&gt;无&lt;&#x2F;td&gt;&lt;td&gt;有（企业版）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;免费开源&lt;&#x2F;td&gt;&lt;td&gt;免费（API调用成本）&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;自行集成&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;开源免费&lt;&#x2F;td&gt;&lt;td&gt;免费（部署&#x2F;运行成本）&lt;&#x2F;td&gt;&lt;td&gt;是（完整功能）&lt;&#x2F;td&gt;&lt;td&gt;自行部署&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;blockquote&gt;
&lt;p&gt;注：价格数据基于2025年3月标准，实际价格可能随时变动。开源工具虽然本身免费，但需考虑部署与维护成本，以及可能的模型API调用费用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;6-wei-lai-qu-shi&quot;&gt;&lt;strong&gt;6. 未来趋势&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Copilot&lt;&#x2F;strong&gt;：深化MCP集成，进一步融入GitHub生态系统（如CI&#x2F;CD）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;：可能增加本地化模型支持以提升隐私性。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;：社区驱动下或成为Devin的平替方案。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;: 扩展代理能力，利用原生MCP支持拓展开发者工具市场。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;：若开放API，可能颠覆传统开发流程。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;：已演进为Roo Code，部分功能和理念将在Roo Code中继续发展。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;：发展更丰富的插件生态，支持更多编程语言。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;7-tui-jian-xuan-ze&quot;&gt;&lt;strong&gt;7. 推荐选择&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;个人开发者&#x2F;学生&lt;&#x2F;strong&gt;：Copilot + Claude（免费组合）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;中小团队&lt;&#x2F;strong&gt;：Cursor（平衡功能与成本）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;企业研究&lt;&#x2F;strong&gt;：OpenHands（定制化探索）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;全栈自动化&lt;&#x2F;strong&gt;：等待Devin正式发布。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;终端重度用户&lt;&#x2F;strong&gt;：CLine（命令行效率提升）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;注重隐私与开源&lt;&#x2F;strong&gt;：Roo Code（本地部署，完全可控）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;8-mcpyu-codeactshen-du-jie-xi&quot;&gt;&lt;strong&gt;8. MCP与CodeAct深度解析&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;AI编程工具的发展已经从简单的代码补全走向了更复杂的开发者代理。这一演变过程中，涌现出两个关键技术范式：&lt;strong&gt;MCP（Model Context Protocol）&lt;strong&gt;和&lt;&#x2F;strong&gt;CodeAct&lt;&#x2F;strong&gt;，它们分别代表了AI编程工具的&amp;quot;协议标准化&amp;quot;和&amp;quot;行为模式化&amp;quot;方向。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;8-1-mcp-model-context-protocol-pou-xi&quot;&gt;&lt;strong&gt;8.1 MCP（Model Context Protocol）剖析&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;MCP是一种旨在标准化大语言模型与外部环境交互的协议框架，其核心特点包括：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;MCP特性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;描述&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;优势&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;结构化上下文&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;统一定义模型可见的上下文表示方式&lt;&#x2F;td&gt;&lt;td&gt;减少歧义，提高交互稳定性&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;工具调用标准化&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;定义了一致的工具声明和调用格式&lt;&#x2F;td&gt;&lt;td&gt;简化工具集成，提高兼容性&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;多模型兼容&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;一套协议可应用于不同的底层模型&lt;&#x2F;td&gt;&lt;td&gt;降低适配成本，提升可移植性&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;交互状态管理&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;规范化管理对话历史和上下文转换&lt;&#x2F;td&gt;&lt;td&gt;提高长期对话的连贯性和效率&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;MCP作为新兴标准正迅速获得主流支持。目前，GitHub Copilot通过扩展已支持MCP，Claude提供原生MCP支持，CLine部分兼容MCP，而其演进产品Roo Code提供增强的MCP兼容性。这表明MCP正在成为行业标准，而非仅停留在探索阶段。其他工具如Cursor和OpenHands目前仍采用各自的专有接口。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;8-2-codeactxing-wei-mo-shi&quot;&gt;&lt;strong&gt;8.2 CodeAct行为模式&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;CodeAct是OpenHands中实现的一种AI代理行为框架，受到ReAct思想启发，专注于代码开发领域的任务执行：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;核心行为模式&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;功能描述&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;应用场景&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;思考（Think）&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;分析问题，规划解决方案&lt;&#x2F;td&gt;&lt;td&gt;需求分析，算法设计&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;编写（Code）&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;生成符合规范的代码实现&lt;&#x2F;td&gt;&lt;td&gt;功能开发，API实现&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;执行（Execute）&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;运行代码测试结果&lt;&#x2F;td&gt;&lt;td&gt;单元测试，功能验证&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;调试（Debug）&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;分析错误，提出修复方案&lt;&#x2F;td&gt;&lt;td&gt;错误修复，性能优化&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;更新（Update）&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;基于反馈改进代码&lt;&#x2F;td&gt;&lt;td&gt;代码重构，需求调整&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;CodeAct的循环迭代模式使AI能够像人类开发者一样思考-编码-测试-调试，显著提升了自主解决编程问题的能力。CLine部分采用了类似思路但主要局限于命令行环境，而Roo Code则更专注于代码生成质量而非完整开发流程。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;8-3-mian-xiang-wei-lai-de-xie-yi-yu-xing-wei-mo-shi&quot;&gt;&lt;strong&gt;8.3 面向未来的协议与行为模式&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;虽然目前MCP和CodeAct尚未在所有工具中得到广泛应用，但它们代表了AI编程助手发展的重要方向：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;标准化协议&lt;&#x2F;strong&gt;：类似MCP的标准化协议可以简化工具开发和模型切换，提高生态兼容性。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;结构化行为&lt;&#x2F;strong&gt;：像CodeAct这样的行为框架能够提高AI代理的自主性和问题解决能力。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;开放生态&lt;&#x2F;strong&gt;：协议标准化和行为模式化的结合，将推动更开放、更灵活的AI编程工具生态。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;未来理想的AI编程工具应该同时具备标准化协议支持和高度结构化的行为模式，既能保证与各种工具和模型的兼容性，又能提供强大的自主编程能力。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;8-4-yu-qi-ta-gong-ju-de-bi-jiao&quot;&gt;&lt;strong&gt;8.4 与其他工具的比较&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;工具&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;协议架构&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;行为模式&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;开放性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;自主性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Copilot&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;专有API + MCP扩展&lt;&#x2F;td&gt;&lt;td&gt;代码补全 + 代理能力&lt;&#x2F;td&gt;&lt;td&gt;低(MCP提升)&lt;&#x2F;td&gt;&lt;td&gt;中(MCP增强)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;封闭专有API&lt;&#x2F;td&gt;&lt;td&gt;对话式编辑&lt;&#x2F;td&gt;&lt;td&gt;低&lt;&#x2F;td&gt;&lt;td&gt;中&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;专有API + 原生MCP&lt;&#x2F;td&gt;&lt;td&gt;对话 + 代理能力&lt;&#x2F;td&gt;&lt;td&gt;低(MCP提升)&lt;&#x2F;td&gt;&lt;td&gt;中(MCP增强)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;自有API&lt;&#x2F;td&gt;&lt;td&gt;CodeAct结构化循环&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;未公开&lt;&#x2F;td&gt;&lt;td&gt;复杂任务分解&lt;&#x2F;td&gt;&lt;td&gt;未知&lt;&#x2F;td&gt;&lt;td&gt;非常高&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;部分MCP兼容&lt;&#x2F;td&gt;&lt;td&gt;命令行专用行为&lt;&#x2F;td&gt;&lt;td&gt;中高&lt;&#x2F;td&gt;&lt;td&gt;中&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;增强MCP兼容&lt;&#x2F;td&gt;&lt;td&gt;终端行为 + 代码生成优化&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;td&gt;中高&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;9-mcpyu-codeactde-wei-lai-fa-zhan-qian-jing&quot;&gt;&lt;strong&gt;9. MCP与CodeAct的未来发展前景&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;随着AI编程工具的快速演进，MCP与CodeAct这两种核心技术范式的发展方向将在很大程度上决定行业未来格局。基于当前趋势，以下是对这两种范式未来发展可能性的分析：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;9-1-liang-chong-fan-shi-ge-zi-you-shi&quot;&gt;&lt;strong&gt;9.1 两种范式各自优势&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;MCP(模型上下文协议)的优势：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;标准化接口，降低工具间切换成本&lt;&#x2F;li&gt;
&lt;li&gt;提高生态系统互操作性&lt;&#x2F;li&gt;
&lt;li&gt;使不同模型可以共享相同的工具集&lt;&#x2F;li&gt;
&lt;li&gt;有助于形成开放的AI基础设施&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;CodeAct的优势：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;结构化的思考-执行循环，提高解决问题能力&lt;&#x2F;li&gt;
&lt;li&gt;更好地模拟人类开发者的工作流程&lt;&#x2F;li&gt;
&lt;li&gt;增强自主性和任务完成能力&lt;&#x2F;li&gt;
&lt;li&gt;特别适合复杂编程任务的拆解与解决&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;9-2-duo-lu-jing-fa-zhan-ke-neng-xing&quot;&gt;&lt;strong&gt;9.2 多路径发展可能性&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;发展路径&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;主要特点&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;可能性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;主要推动力&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;融合发展&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;MCP负责接口标准化，CodeAct负责行为模式化&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;开发效率与生态兼容性需求&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;MCP主导&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;统一接口协议成为行业标准，行为模式多样化&lt;&#x2F;td&gt;&lt;td&gt;★★★★&lt;&#x2F;td&gt;&lt;td&gt;大型科技公司战略推动&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CodeAct演进&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;多样化的专业领域行为框架，接口各自为政&lt;&#x2F;td&gt;&lt;td&gt;★★★&lt;&#x2F;td&gt;&lt;td&gt;开源社区与垂直领域需求&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;替代范式出现&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;全新交互模式取代现有范式&lt;&#x2F;td&gt;&lt;td&gt;★★&lt;&#x2F;td&gt;&lt;td&gt;前沿研究突破&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;融合发展路线（最可能）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我认为最理想且可能的发展路径是MCP与CodeAct的融合，形成&amp;quot;标准化的行为范式&amp;quot;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;协议层面：MCP负责定义标准化交互接口&lt;&#x2F;li&gt;
&lt;li&gt;行为层面：CodeAct负责结构化问题解决流程&lt;&#x2F;li&gt;
&lt;li&gt;具体实现：可能出现支持MCP标准的CodeAct框架，允许不同模型采用相同的行为模式
这种融合将使AI编程助手既具备广泛兼容性，又拥有强大的自主性，例如：一个基于MCP的编辑器可以无缝切换不同的AI模型，同时保持CodeAct式的结构化工作流程。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;作为最可能的发展路径，MCP与CodeAct的融合将带来以下优势：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;互补性强：MCP解决&amp;quot;如何交互&amp;quot;问题，CodeAct解决&amp;quot;如何行动&amp;quot;问题&lt;&#x2F;li&gt;
&lt;li&gt;生态效应：标准化接口促进工具繁荣，结构化行为提升能力水平&lt;&#x2F;li&gt;
&lt;li&gt;用户体验：既有统一交互模式，又有智能问题解决能力&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;同时面临的主要挑战：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;标准制定难度：需要多方参与的复杂协商过程&lt;&#x2F;li&gt;
&lt;li&gt;利益平衡：开源社区与商业公司的目标可能存在冲突&lt;&#x2F;li&gt;
&lt;li&gt;实现复杂性：完整支持两种范式的系统设计难度大&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;在大型企业推动下的MCP主导路线&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;微软、Anthropic等大型企业已开始推动MCP成为行业标准，这一趋势正在加速：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Copilot和Claude等主流工具已添加MCP支持&lt;&#x2F;li&gt;
&lt;li&gt;正在形成更统一的API接口标准&lt;&#x2F;li&gt;
&lt;li&gt;工具生态系统正在快速扩展&lt;&#x2F;li&gt;
&lt;li&gt;不同模型之间的互换性显著增强&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;在开源社区推动下的CodeAct进化路线&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果开源社区(如OpenHands)继续推动CodeAct式的行为框架发展：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;将出现更多专业化的行为模式变体(如DataAct、TestAct等)&lt;&#x2F;li&gt;
&lt;li&gt;更多针对特定领域优化的自主代理&lt;&#x2F;li&gt;
&lt;li&gt;行为模式会更加复杂和人类化&lt;&#x2F;li&gt;
&lt;li&gt;但可能面临生态碎片化问题&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;9-3-jin-qi-yu-qi-fa-zhan&quot;&gt;&lt;strong&gt;9.3 近期预期发展&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;在未来1-2年内，我们可能会看到：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MCP成为标准：主流工具已开始支持MCP（GitHub Copilot、Claude、CLine&#x2F;Roo Code），这一趋势将加速&lt;&#x2F;li&gt;
&lt;li&gt;开源MCP实现普及：更多开源工具将加入MCP支持行列&lt;&#x2F;li&gt;
&lt;li&gt;CodeAct专业化：针对特定领域的行为模式变体出现（如DB-Act、Test-Act）&lt;&#x2F;li&gt;
&lt;li&gt;混合能力工具：同时支持标准协议和高级行为模式的集成工具增加&lt;&#x2F;li&gt;
&lt;li&gt;更多本地解决方案：降低API依赖，提升隐私保护的混合运行模式&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;9-4-chang-qi-fa-zhan-yuan-jing&quot;&gt;&lt;strong&gt;9.4 长期发展愿景&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;从长远来看，AI编程助手将朝着&amp;quot;协议标准化+行为智能化+领域专业化&amp;quot;的方向演进。理想的未来状态是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;开发者可以使用统一的交互方式访问不同的AI模型&lt;&#x2F;li&gt;
&lt;li&gt;AI助手能够自主理解、规划和执行复杂的开发任务&lt;&#x2F;li&gt;
&lt;li&gt;针对特定领域有深度优化的专业能力&lt;&#x2F;li&gt;
&lt;li&gt;保持较高的透明度和可控性，增强开发者信任&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;总体而言，MCP与CodeAct代表了AI编程助手的两个关键发展方向：标准化与智能化。虽然两者各有所长，但真正的突破很可能来自于它们的融合与互补。未来最成功的AI编程工具将既支持标准化的交互协议，又采用结构化的任务解决模式，同时根据特定场景进行优化。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jie-lun&quot;&gt;结论&lt;&#x2F;h2&gt;
&lt;p&gt;AI编程助手领域正经历从简单代码补全工具向全功能开发代理的快速演变。本文比较的七款工具各有所长：GitHub Copilot在实时代码生成方面领先；Cursor在项目理解和IDE集成上表现突出；Claude提供优秀的自然语言理解；OpenHands和Roo Code代表了开源社区的创新方向；Devin展示了未来全自动开发的潜力；而CLine则在特定领域提供了专业化解决方案。&lt;&#x2F;p&gt;
&lt;p&gt;对开发者而言，选择合适的工具不仅取决于功能对比，更应考虑自身工作流程、团队规模、预算和隐私需求。无论选择哪种工具，重要的是将它们视为开发流程的增强而非替代，与之建立协作关系而非依赖关系。&lt;&#x2F;p&gt;
&lt;p&gt;值得注意的是，MCP协议正迅速成为行业标准，GitHub Copilot和Claude等主流工具已提供MCP支持。同时，CLine已演进为Roo Code，继承了其终端能力并增强了代码生成质量。这些最新发展表明，AI编程工具生态系统正朝着更标准化、更互操作的方向快速发展，为开发者提供更加一致且强大的体验。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;本文将持续更新以反映AI编程助手领域的最新发展。如有新工具或现有工具的重大更新，我们将及时补充评测内容。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 开发环境配置指南</title>
        <published>2025-03-13T00:00:00+00:00</published>
        <updated>2025-03-13T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-development-guidance/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-development-guidance/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;安装 Docker&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; apt-transport-https ca-certificates curl software-properties-common
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -fsSL&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; gpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --dearmor -o&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deb [arch=&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dpkg --print-architecture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) signed-by=&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lsb_release -cs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) stable&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &amp;gt; &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; docker-ce docker-ce-cli containerd.io
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;安装 Docker Compose&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -L &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;latest &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -oP &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;tag_name&amp;quot;: &amp;quot;\K[^&amp;quot;]+&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&#x2F;docker-compose-&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname -s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)-&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname -m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;验证安装：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker --version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker-compose --version
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;(Optional) 创建 docker 用户组并加入当前用户，上一步验证失败时运行&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; usermod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -aG&lt;&#x2F;span&gt;&lt;span&gt; docker $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;USER
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newgrp&lt;&#x2F;span&gt;&lt;span&gt; docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart docker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;安装miniforge3 (python环境)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wget &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;conda-forge&#x2F;miniforge&#x2F;releases&#x2F;latest&#x2F;download&#x2F;Miniforge3-&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)-&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname -m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;).sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash&lt;&#x2F;span&gt;&lt;span&gt; Miniforge3-$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname&lt;&#x2F;span&gt;&lt;span&gt;)-$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname -m&lt;&#x2F;span&gt;&lt;span&gt;).sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;安装NodeJS&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Download and install nvm:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -o-&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.40.1&#x2F;install.sh | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# in lieu of restarting the shell
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\. &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;.nvm&#x2F;nvm.sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Download and install Node.js:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvm&lt;&#x2F;span&gt;&lt;span&gt; install 22
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Verify the Node.js version:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node -v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Should print &amp;quot;v22.14.0&amp;quot;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvm&lt;&#x2F;span&gt;&lt;span&gt; current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Should print &amp;quot;v22.14.0&amp;quot;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Verify npm version:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;npm -v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Should print &amp;quot;10.9.2&amp;quot;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;安装Poetry&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -sSL&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;install.python-poetry.org | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python3&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;安装系统依赖&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; build-essential
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;非sudo开发配置&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Download and install Mamba (a faster version of conda)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -L -O &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;conda-forge&#x2F;miniforge&#x2F;releases&#x2F;latest&#x2F;download&#x2F;Miniforge3-&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)-&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname -m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;).sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash&lt;&#x2F;span&gt;&lt;span&gt; Miniforge3-$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname&lt;&#x2F;span&gt;&lt;span&gt;)-$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname -m&lt;&#x2F;span&gt;&lt;span&gt;).sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install Python 3.12, nodejs, and poetry
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mamba&lt;&#x2F;span&gt;&lt;span&gt; install python=3.12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mamba&lt;&#x2F;span&gt;&lt;span&gt; install conda-forge::nodejs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mamba&lt;&#x2F;span&gt;&lt;span&gt; install conda-forge::poetry
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;安装nginx与SSL证书&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; certbot python3-certbot-nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; certbot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --nginx -d&lt;&#x2F;span&gt;&lt;span&gt; your-domain.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;配置nginx&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;aicoder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;aicoder &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nginx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nginx配置文件&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nginx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nginx &quot;&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    listen 80;
&lt;&#x2F;span&gt;&lt;span&gt;    server_name localhost;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # 反向代理到 OpenHands 后端服务
&lt;&#x2F;span&gt;&lt;span&gt;    location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_pass http:&#x2F;&#x2F;127.0.0.1:3000; # OpenHands 后端服务的地址和端口
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header Host $host;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Real-IP $remote_addr;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Forwarded-Proto $scheme;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        # WebSocket 支持配置
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_http_version 1.1;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header Upgrade $http_upgrade;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header Connection &amp;quot;upgrade&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_read_timeout 86400; # 保持连接时间更长
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        # 解决 CORS 问题
&lt;&#x2F;span&gt;&lt;span&gt;        add_header Access-Control-Allow-Origin *;
&lt;&#x2F;span&gt;&lt;span&gt;        add_header Access-Control-Allow-Methods &amp;#39;GET, POST, OPTIONS&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        add_header Access-Control-Allow-Headers &amp;#39;Content-Type, Authorization&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;12&quot;&gt;
&lt;li&gt;配置Linux系统服务&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;aicoder.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 启动服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl start aicoder.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 停止服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl stop aicoder.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 重启服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart aicoder.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看服务状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl status aicoder.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看服务日志
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; journalctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; aicoder.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 实时查看日志
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; journalctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; aicoder.service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Description&lt;&#x2F;span&gt;&lt;span&gt;=AICoder AI Coding Assistant
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;After&lt;&#x2F;span&gt;&lt;span&gt;=network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[Service]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;=simple
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;=ubuntu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WorkingDirectory&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;home&#x2F;ubuntu&#x2F;GitHub_Workspace&#x2F;AICoder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecStart&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;home&#x2F;ubuntu&#x2F;miniforge3&#x2F;envs&#x2F;AICoder&#x2F;bin&#x2F;poetry run uvicorn openhands.server.listen:app --host &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0.0.0 &lt;&#x2F;span&gt;&lt;span&gt;--port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3000 &lt;&#x2F;span&gt;&lt;span&gt;--reload-exclude &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;.workspace&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Restart&lt;&#x2F;span&gt;&lt;span&gt;=on-failure
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RestartSec&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StandardOutput&lt;&#x2F;span&gt;&lt;span&gt;=journal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StandardError&lt;&#x2F;span&gt;&lt;span&gt;=journal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;PATH=home&#x2F;ubuntu&#x2F;miniforge3&#x2F;envs&#x2F;AICoder&#x2F;bin:&#x2F;home&#x2F;ubuntu&#x2F;miniforge3&#x2F;bin:&#x2F;home&#x2F;ubuntu&#x2F;.local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;bin&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[Install]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WantedBy&lt;&#x2F;span&gt;&lt;span&gt;=multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;chang-jian-wen-ti-ji-jie-jue-fang-an&quot;&gt;常见问题及解决方案&lt;&#x2F;h2&gt;
&lt;p&gt;在配置过程中，开发者可能会遇到以下常见问题：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;端口权限问题：非 root 用户无法绑定 1024 以下端口，请使用 Nginx 代理或 setcap 命令解决&lt;&#x2F;li&gt;
&lt;li&gt;WebSocket 连接失败：确保 Nginx 配置中包含完整的 WebSocket 支持参数&lt;&#x2F;li&gt;
&lt;li&gt;Python 依赖冲突：使用虚拟环境和 Poetry 进行隔离管理&lt;&#x2F;li&gt;
&lt;li&gt;Docker 权限问题：将用户添加到 docker 用户组，避免频繁使用 sudo&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;本指南详细介绍了配置 OpenHands 开发环境的完整流程，从基础依赖安装到服务部署和网络配置。通过以上步骤，您可以在本地或服务器上搭建一个完整的 OpenHands 开发环境，为 AI 辅助编程工具的开发和使用提供坚实基础。&lt;&#x2F;p&gt;
&lt;p&gt;主要配置包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 环境：安装 Docker 和 Docker Compose，为容器化开发和部署提供支持&lt;&#x2F;li&gt;
&lt;li&gt;Python 环境：使用 Miniforge3 配置 Python 运行环境，支持不同 Python 版本的开发需求&lt;&#x2F;li&gt;
&lt;li&gt;Node.js 环境：安装 Node.js 以支持前端开发和 JavaScript 工具链&lt;&#x2F;li&gt;
&lt;li&gt;依赖管理工具：集成 Poetry 实现 Python 依赖的精确管理&lt;&#x2F;li&gt;
&lt;li&gt;网络服务配置：通过 Nginx 设置反向代理，实现 OpenHands 的 HTTP 和 WebSocket 服务访问&lt;&#x2F;li&gt;
&lt;li&gt;安全配置：包含 SSL 证书申请和配置，确保服务通信安全&lt;&#x2F;li&gt;
&lt;li&gt;对于开发者而言，这套配置不仅适用于 OpenHands 项目，也可作为其他 AI 工具和 Web 应用开发环境的参考。随着 AI 编程助手的快速发展，掌握这些环境配置技能将有助于开发者更好地参与到相关项目中，创建和优化自己的 AI 辅助工具。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>深度解析 OpenHands CodeActAgent: 智能代理的核心架构</title>
        <published>2025-03-12T00:00:00+00:00</published>
        <updated>2025-03-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-codeactagent-deep-dive/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-codeactagent-deep-dive/</id>
        
        <content type="html">&lt;p&gt;CodeActAgent 是 OpenHands 框架中的核心组件，旨在通过统一的代码操作空间（CodeAct）简化和增强 LLM（大语言模型）代理的功能。本文将详细解析 CodeActAgent 的组成、功能和运作方式，并结合一个具体案例（TODO 应用）展示其工作流程。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;codeactagent-de-he-xin-zu-cheng&quot;&gt;CodeActAgent 的核心组成&lt;&#x2F;h2&gt;
&lt;p&gt;CodeActAgent 是一个高度模块化的代理，其核心组成部分包括 Profile、Prompt 和 Memory。这些模块共同协作，确保代理能够高效地分解任务、调用工具并与用户交互。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-profile&quot;&gt;1. Profile&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;profile-shi-shi-yao&quot;&gt;Profile 是什么&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Profile&lt;&#x2F;strong&gt; 是 CodeActAgent 的配置文件，定义了代理的行为、工具支持、内存管理等。&lt;&#x2F;li&gt;
&lt;li&gt;它通过 &lt;code&gt;AgentConfig&lt;&#x2F;code&gt; 类进行配置，包含以下关键参数：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;codeact_enable_browsing&lt;&#x2F;code&gt;：是否启用浏览器工具。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;codeact_enable_jupyter&lt;&#x2F;code&gt;：是否启用 IPython 工具。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;codeact_enable_llm_editor&lt;&#x2F;code&gt;：是否启用基于 LLM 的文件编辑工具。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;condenser&lt;&#x2F;code&gt;：事件压缩器的配置，用于优化内存中的历史记录。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enable_prompt_extensions&lt;&#x2F;code&gt;：是否启用扩展提示（Prompt）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;profile-de-jie-gou&quot;&gt;Profile 的结构&lt;&#x2F;h4&gt;
&lt;p&gt;Profile 是一个字典或对象，包含以下关键参数：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;config = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AgentConfig&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_browsing&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_jupyter&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_llm_editor&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;condenser&lt;&#x2F;span&gt;&lt;span&gt;={&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;max_events&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enable_prompt_extensions&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled_microagents&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;profile-de-zuo-yong&quot;&gt;Profile 的作用&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Profile 决定了 CodeActAgent 的能力范围和行为模式。&lt;&#x2F;li&gt;
&lt;li&gt;例如：
&lt;ul&gt;
&lt;li&gt;如果启用 &lt;code&gt;codeact_enable_browsing&lt;&#x2F;code&gt;，代理可以使用浏览器工具与网页交互。&lt;&#x2F;li&gt;
&lt;li&gt;如果启用 &lt;code&gt;codeact_enable_jupyter&lt;&#x2F;code&gt;，代理可以运行 Python 代码来完成任务。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;2-prompt&quot;&gt;2. Prompt&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;prompt-shi-shi-yao&quot;&gt;Prompt 是什么&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prompt&lt;&#x2F;strong&gt; 是 CodeActAgent 与 LLM 交互的输入内容，定义了任务的上下文、目标和约束。&lt;&#x2F;li&gt;
&lt;li&gt;它通过 &lt;code&gt;PromptManager&lt;&#x2F;code&gt; 动态生成，包含以下部分：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统消息&lt;&#x2F;strong&gt;：定义代理的角色和目标。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;用户消息&lt;&#x2F;strong&gt;：用户输入的任务描述。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;工具调用消息&lt;&#x2F;strong&gt;：代理调用工具的记录。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;观察消息&lt;&#x2F;strong&gt;：工具返回的结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;prompt-de-jie-gou&quot;&gt;Prompt 的结构&lt;&#x2F;h4&gt;
&lt;p&gt;Prompt 是一个消息列表，包含以下类型的消息：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统消息&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;plaintext&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-plaintext &quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span&gt;System: You are CodeActAgent, a highly capable assistant designed to perform tasks by executing code and interacting with tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户消息&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;plaintext&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-plaintext &quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span&gt;User: 创建一个 TODO 应用，支持添加、删除和查看任务。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工具调用消息&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;plaintext&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-plaintext &quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span&gt;Assistant: Calling tool: execute_ipython_cell
&lt;&#x2F;span&gt;&lt;span&gt;Tool arguments: {&amp;quot;code&amp;quot;: &amp;quot;tasks = []&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;观察消息&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;plaintext&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-plaintext &quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span&gt;Observation: Tool returned: &amp;quot;Initialized an empty task list.&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;prompt-de-sheng-cheng-luo-ji&quot;&gt;Prompt 的生成逻辑&lt;&#x2F;h4&gt;
&lt;p&gt;Prompt 的生成是 CodeActAgent 与 LLM 交互的关键步骤，以下是其详细逻辑：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统消息初始化&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeActAgent 使用 &lt;code&gt;PromptManager&lt;&#x2F;code&gt; 添加系统消息，定义代理的角色和目标。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户消息处理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户输入的任务描述被添加到消息列表中。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工具调用与观察消息&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeActAgent 从 &lt;code&gt;ConversationMemory&lt;&#x2F;code&gt; 中提取工具调用记录和观察结果，并将其添加到 Prompt。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;消息增强&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;PromptManager&lt;&#x2F;code&gt; 为用户消息添加上下文信息（如示例或扩展信息）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-memory&quot;&gt;3. Memory&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;memory-de-zuo-yong&quot;&gt;Memory 的作用&lt;&#x2F;h4&gt;
&lt;p&gt;Memory 是 CodeActAgent 的会话内存模块，负责记录代理的对话历史、工具调用记录以及观察结果。它通过 &lt;code&gt;ConversationMemory&lt;&#x2F;code&gt; 和 &lt;code&gt;Condenser&lt;&#x2F;code&gt; 协同工作，确保代理能够在多轮交互中保持上下文一致性。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;memory-de-jie-gou&quot;&gt;Memory 的结构&lt;&#x2F;h4&gt;
&lt;p&gt;Memory 包含以下几个关键部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;事件历史&lt;&#x2F;strong&gt;：存储所有的动作和观察，完整记录代理的交互过程。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;压缩历史&lt;&#x2F;strong&gt;：通过 &lt;code&gt;Condenser&lt;&#x2F;code&gt; 压缩后的关键事件，优化存储空间并提高检索效率。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;&#x2F;strong&gt;：用于特定 LLM 的提示缓存，减少重复计算并提高响应速度。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;memory-de-gong-zuo-liu-cheng&quot;&gt;Memory 的工作流程&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件记录&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;每次工具调用或用户交互都会生成一个事件，并存储到事件历史中。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;event = {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tool_call&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tool&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;execute_ipython_cell&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Initialized task list.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;memory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_event&lt;&#x2F;span&gt;&lt;span&gt;(event)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件压缩&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Condenser&lt;&#x2F;code&gt; 对事件历史进行压缩，提取关键事件以减少冗余。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;condensed_events = memory.condenser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;condensed_history&lt;&#x2F;span&gt;&lt;span&gt;(state)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文检索&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在生成 Prompt 时，Memory 提供上下文信息以确保对话的连贯性。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;messages = memory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;process_events&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;condensed_history&lt;&#x2F;span&gt;&lt;span&gt;=condensed_events)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;zai-todo-ying-yong-zhong-de-zuo-yong&quot;&gt;在 TODO 应用中的作用&lt;&#x2F;h4&gt;
&lt;p&gt;在实现 TODO 应用时，Memory 的主要作用包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;记录任务分解过程&lt;&#x2F;strong&gt;：存储每个子任务的工具调用记录和结果。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;维护上下文一致性&lt;&#x2F;strong&gt;：确保代理能够根据用户的后续输入调整任务。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;优化交互效率&lt;&#x2F;strong&gt;：通过事件压缩减少冗余信息，提高响应速度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;memory-shi-shi-yao&quot;&gt;Memory 是什么&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;&#x2F;strong&gt; 是代理的会话内存，用于存储对话历史、工具调用记录和观察结果。&lt;&#x2F;li&gt;
&lt;li&gt;它通过 &lt;code&gt;ConversationMemory&lt;&#x2F;code&gt; 管理，支持事件压缩和历史记录的动态更新。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;memory-de-jie-gou-1&quot;&gt;Memory 的结构&lt;&#x2F;h4&gt;
&lt;p&gt;Memory 包含以下部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;事件历史&lt;&#x2F;strong&gt;：存储所有的动作和观察。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;压缩历史&lt;&#x2F;strong&gt;：通过 &lt;code&gt;Condenser&lt;&#x2F;code&gt; 压缩后的关键事件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;&#x2F;strong&gt;：用于特定 LLM 的提示缓存。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;memory-de-zuo-yong-1&quot;&gt;Memory 的作用&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Memory 记录了任务的分解过程和工具调用结果，确保代理能够在多轮对话中保持上下文一致。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;jie-he-an-li-shi-xian-yi-ge-todo-ying-yong&quot;&gt;结合案例：实现一个 TODO 应用&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ren-wu-miao-shu&quot;&gt;任务描述&lt;&#x2F;h3&gt;
&lt;p&gt;用户输入任务：“创建一个 TODO 应用，支持添加、删除和查看任务。”&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ren-wu-fen-jie&quot;&gt;任务分解&lt;&#x2F;h3&gt;
&lt;p&gt;CodeActAgent 的任务分解通过与 LLM 的交互实现，以下是具体流程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户输入任务&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户输入任务描述：“创建一个 TODO 应用，支持添加、删除和查看任务。”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构建 Prompt&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeActAgent 构建消息列表并发送给 LLM。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解析 LLM 响应&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;LLM 返回的响应被解析为一系列子任务：
&lt;ul&gt;
&lt;li&gt;初始化任务列表。&lt;&#x2F;li&gt;
&lt;li&gt;实现添加任务功能。&lt;&#x2F;li&gt;
&lt;li&gt;实现删除任务功能。&lt;&#x2F;li&gt;
&lt;li&gt;实现查看任务功能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;zi-ren-wu-fen-fa&quot;&gt;子任务分发&lt;&#x2F;h3&gt;
&lt;p&gt;CodeActAgent 的子任务分发通过工具调用实现，以下是具体流程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工具调用&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;根据子任务调用相应的工具（如执行 Python 代码、编辑文件）。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;action = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CmdRunAction&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tasks = []&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;result = action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结果存储&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;工具返回的结果被存储为观察消息。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;observation_message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;observation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Tool returned: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Initialized an empty task list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_observation&lt;&#x2F;span&gt;&lt;span&gt;(observation_message)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;反馈给用户&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeActAgent 将工具调用结果反馈给用户。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;final_message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assistant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TODO 应用已创建，支持添加、删除和查看任务。&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_message&lt;&#x2F;span&gt;&lt;span&gt;(final_message)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;wan-zheng-shi-xian-shi-li&quot;&gt;完整实现示例&lt;&#x2F;h2&gt;
&lt;p&gt;以下是一个完整的实现示例，展示如何使用 CodeActAgent 创建一个 TODO 应用：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.core.config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;AgentConfig
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.llm.llm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LLM
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.agenthub.codeact_agent.codeact_agent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;CodeActAgent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.controller.state.state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;State
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.core.message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Message
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 配置代理
&lt;&#x2F;span&gt;&lt;span&gt;config = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AgentConfig&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_browsing&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_jupyter&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_llm_editor&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;condenser&lt;&#x2F;span&gt;&lt;span&gt;={&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;max_events&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enable_prompt_extensions&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled_microagents&lt;&#x2F;span&gt;&lt;span&gt;=[],
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 初始化 LLM 和代理
&lt;&#x2F;span&gt;&lt;span&gt;llm = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LLM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model_name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gpt-4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;agent = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CodeActAgent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;llm&lt;&#x2F;span&gt;&lt;span&gt;=llm, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;=config)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建初始状态
&lt;&#x2F;span&gt;&lt;span&gt;state = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 用户输入任务
&lt;&#x2F;span&gt;&lt;span&gt;user_message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;创建一个 TODO 应用，支持添加、删除和查看任务。&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_message&lt;&#x2F;span&gt;&lt;span&gt;(user_message)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 构建 Prompt 并与 LLM 交互
&lt;&#x2F;span&gt;&lt;span&gt;messages = agent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_get_messages&lt;&#x2F;span&gt;&lt;span&gt;(state)
&lt;&#x2F;span&gt;&lt;span&gt;response = llm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;completion&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;=agent.llm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format_messages_for_llm&lt;&#x2F;span&gt;&lt;span&gt;(messages))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 解析 LLM 响应
&lt;&#x2F;span&gt;&lt;span&gt;actions = agent.tools.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response_to_actions&lt;&#x2F;span&gt;&lt;span&gt;(response)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 执行子任务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;actions:
&lt;&#x2F;span&gt;&lt;span&gt;    result = action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    observation_message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;observation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Tool returned: &lt;&#x2F;span&gt;&lt;span&gt;{result}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_observation&lt;&#x2F;span&gt;&lt;span&gt;(observation_message)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 反馈结果
&lt;&#x2F;span&gt;&lt;span&gt;final_message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assistant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TODO 应用已创建，支持添加、删除和查看任务。&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_message&lt;&#x2F;span&gt;&lt;span&gt;(final_message)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 输出对话历史
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;state.history:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{msg.role}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{msg.content}&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过上述分析和实现示例，我们可以清晰地了解 CodeActAgent 的 Prompt 和 Profile，以及它们在任务分解和子任务分发中的作用。您可以根据这些信息手动实现一个类似的代理，并根据任务需求动态生成 Prompt 和配置 Profile。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 多账户方案（二）: Nginx 反向代理与动态容器管理</title>
        <published>2025-03-10T00:00:00+00:00</published>
        <updated>2025-03-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-multi-accounts-frontend-design/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-multi-accounts-frontend-design/</id>
        
        <content type="html">&lt;p&gt;本文将介绍如何设计和实现一套系统，为每个登录用户自动分配独立的OpenHands实例，确保用户数据和计算资源的隔离。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h2&gt;
&lt;p&gt;传统的方案通常是预先创建固定数量的OpenHands实例，并通过Nginx进行路由。然而，这种方式缺乏灵活性，无法根据实际需求动态扩展。我们需要一个更智能的系统，可以在用户登录时按需分配资源，并在不使用时释放资源。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jia-gou-gai-shu&quot;&gt;架构概述&lt;&#x2F;h2&gt;
&lt;p&gt;动态实例分配系统包括三个核心组件：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;前端登录系统&lt;&#x2F;strong&gt; - 处理用户身份验证&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实例管理服务&lt;&#x2F;strong&gt; - 负责创建和分配OpenHands实例&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;反向代理系统&lt;&#x2F;strong&gt; - 将用户请求路由到其专属实例&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;openhands-multi-accounts-frontend-design&#x2F;Multi-Tenant-Frontend-Design.png&quot; alt=&quot;Multi Tenant Frontend Design&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-xian-bu-zou-xiang-jie&quot;&gt;实现步骤详解&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-chuang-jian-shi-li-guan-li-fu-wu&quot;&gt;1. 创建实例管理服务&lt;&#x2F;h3&gt;
&lt;p&gt;实例管理服务负责处理用户登录请求，为每个用户分配和管理独立的OpenHands实例。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;express &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;session &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;express-session&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exec &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;child_process&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fs &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 用户会话管理
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  secret: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;your-secret-key&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  resave: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  saveUninitialized: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  cookie: { secure: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;}));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;urlencoded&lt;&#x2F;span&gt;&lt;span&gt;({ extended: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;}));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 存储用户实例信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInstances &lt;&#x2F;span&gt;&lt;span&gt;= {};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nextPort &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3001&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 起始端口号
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 用户登录处理
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;login&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.body;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 实际应用中应有真实的用户验证逻辑
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 检查用户是否已有实例
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInstances&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 分配新实例
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instancePort &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nextPort&lt;&#x2F;span&gt;&lt;span&gt;++;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 启动新的OpenHands实例
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;startNewInstance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instancePort&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 记录用户实例信息
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInstances&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;] = {
&lt;&#x2F;span&gt;&lt;span&gt;        port: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instancePort&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        path: `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;user&#x2F;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`,
&lt;&#x2F;span&gt;&lt;span&gt;        lastAccess: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      };
&lt;&#x2F;span&gt;&lt;span&gt;      
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 更新Nginx配置
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;updateNginxConfig&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;启动实例失败: ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;({ error: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;无法启动您的实例&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 设置用户会话
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instancePath &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInstances&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 重定向到用户的实例
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInstances&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 其他核心功能代码...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;实现实例启动和管理
为每个用户启动独立的OpenHands实例，并管理它们的生命周期：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 启动新实例的函数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;startNewInstance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;new Promise((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reject&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 创建用户专属的配置目录
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userConfigDir &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(__dirname, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user_configs&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;existsSync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userConfigDir&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mkdirSync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userConfigDir&lt;&#x2F;span&gt;&lt;span&gt;, { recursive: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 启动Docker容器
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd &lt;&#x2F;span&gt;&lt;span&gt;= `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker run -d --name openhands-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;} -p ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}:3000 -v ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userConfigDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}:&#x2F;app&#x2F;config openhands-image&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdout&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stderr&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;执行错误: ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reject&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;实例已启动，端口: ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}, 输出: ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 定期清理不活跃的实例
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setInterval&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Date&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inactivityPeriod &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 2小时
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInstances&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInstances&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lastAccess &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inactivityPeriod&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 停止实例
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker stop openhands-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;} &amp;amp;&amp;amp; docker rm openhands-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`, () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;已停止不活跃实例: ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;        delete &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInstances&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 更新Nginx配置
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;updateNginxConfig&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 每15分钟检查一次
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;动态更新Nginx配置
系统能够动态更新Nginx配置，确保每个用户请求都被正确路由到其专属实例：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 更新Nginx配置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;updateNginxConfig&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;new Promise((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reject&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginxConfig &lt;&#x2F;span&gt;&lt;span&gt;= `
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    listen 80;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    server_name aicoder.westus.cloudapp.azure.com;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    return 301 https:&#x2F;&#x2F;$host$request_uri;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    listen 443 ssl;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    server_name aicoder.westus.cloudapp.azure.com;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;aicoder.westus.cloudapp.azure.com&#x2F;fullchain.pem;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;aicoder.westus.cloudapp.azure.com&#x2F;privkey.pem;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    # 认证与实例管理服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    location &#x2F; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_pass http:&#x2F;&#x2F;127.0.0.1:4000;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header Host $host;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header X-Real-IP $remote_addr;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header X-Forwarded-Proto $scheme;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_http_version 1.1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header Upgrade $http_upgrade;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header Connection &amp;quot;upgrade&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 为每个用户添加配置
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInstances&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInstances&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginxConfig &lt;&#x2F;span&gt;&lt;span&gt;+= `
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    # ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}的OpenHands实例
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    location ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&#x2F; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_pass http:&#x2F;&#x2F;127.0.0.1:${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.port}&#x2F;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header Host $host;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header X-Real-IP $remote_addr;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header X-Forwarded-Proto $scheme;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_http_version 1.1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header Upgrade $http_upgrade;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_set_header Connection &amp;quot;upgrade&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_connect_timeout 60s;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_send_timeout 60s;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        proxy_read_timeout 60s;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginxConfig &lt;&#x2F;span&gt;&lt;span&gt;+= `
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;writeFile&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;aicoder&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginxConfig&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;更新Nginx配置失败: ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reject&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 重载Nginx配置
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nginx -t &amp;amp;&amp;amp; systemctl reload nginx&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;重载Nginx失败: ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reject&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;创建友好的登录界面
为了提供良好的用户体验，我们需要创建一个直观的登录界面：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;OpenHands - 登录&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            font-family: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Arial&lt;&#x2F;span&gt;&lt;span&gt;, sans-serif;
&lt;&#x2F;span&gt;&lt;span&gt;            display: flex;
&lt;&#x2F;span&gt;&lt;span&gt;            justify-content: center;
&lt;&#x2F;span&gt;&lt;span&gt;            align-items: center;
&lt;&#x2F;span&gt;&lt;span&gt;            height: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100vh&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            background-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#f5f5f5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;login-container &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            background: white;
&lt;&#x2F;span&gt;&lt;span&gt;            padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            border-radius: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            box-shadow: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 4px 6px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;400px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 更多样式... *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;login-container&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;欢迎使用 OpenHands&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;login&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;form-group&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;用户名&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;required&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;form-group&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;密码&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;required&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;submit&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;登录&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;xi-tong-you-shi&quot;&gt;系统优势&lt;&#x2F;h2&gt;
&lt;p&gt;我们的动态实例分配系统具有以下优势：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;资源利用效率高 - 按需分配资源，避免资源浪费&lt;&#x2F;li&gt;
&lt;li&gt;用户隔离 - 每个用户都拥有独立的运行环境，确保安全性和稳定性&lt;&#x2F;li&gt;
&lt;li&gt;自动资源回收 - 系统会自动清理长时间不活跃的实例&lt;&#x2F;li&gt;
&lt;li&gt;可扩展性 - 基础设施可以根据实际用户需求进行扩展&lt;&#x2F;li&gt;
&lt;li&gt;一致的用户体验 - 用户每次登录都可以获得相同的环境配置&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;bu-shu-he-wei-hu-zhu-yi-shi-xiang&quot;&gt;部署和维护注意事项&lt;&#x2F;h2&gt;
&lt;p&gt;在实际部署过程中，需要注意以下几点：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zi-yuan-guan-li&quot;&gt;资源管理&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;设置服务器资源上限，避免过度分配&lt;&#x2F;li&gt;
&lt;li&gt;监控系统资源使用情况，及时扩容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shu-ju-chi-jiu-hua&quot;&gt;数据持久化&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;确保用户数据正确保存到持久化存储&lt;&#x2F;li&gt;
&lt;li&gt;实现定期备份机制，防止数据丢失&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;an-quan-xing&quot;&gt;安全性&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;加强用户认证系统，可考虑集成OAuth或其他身份验证方式&lt;&#x2F;li&gt;
&lt;li&gt;限制每个实例的权限，避免权限逃逸&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;gao-ke-yong-xing&quot;&gt;高可用性&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;考虑实例管理服务的冗余部署&lt;&#x2F;li&gt;
&lt;li&gt;实现实例状态监控和自动恢复机制&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;jie-yu&quot;&gt;结语&lt;&#x2F;h2&gt;
&lt;p&gt;通过这种动态实例分配方案，我们可以为每个用户提供独立的OpenHands环境，既保证了系统的安全性和稳定性，又实现了资源的高效利用。这种方法特别适合需要为多个用户提供隔离计算环境的场景，如在线编程平台、AI开发环境等。&lt;&#x2F;p&gt;
&lt;p&gt;未来，我们可以进一步优化这一系统，例如加入负载均衡机制、跨服务器实例分配等功能，使其更加强大和灵活。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands Issue Resolver 集成到 GitHub Actions 教程</title>
        <published>2025-03-09T00:00:00+00:00</published>
        <updated>2025-03-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/integrate-openhands-issue-resolver-into-github-actions/" type="text/html"/>
        <id>https://polly2014.github.io/integrate-openhands-issue-resolver-into-github-actions/</id>
        
        <content type="html">&lt;p&gt;OpenHands Issue Resolver是一个强大的工具，可以帮助开发者自动化问题的解决过程。通过GitHub Actions的集成，您可以在每次提交代码时自动运行它，从而提高开发效率。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhun-bei-gong-zuo&quot;&gt;准备工作&lt;&#x2F;h2&gt;
&lt;p&gt;在开始之前，请确保您已经完成以下准备工作：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;拥有一个GitHub仓库。&lt;&#x2F;li&gt;
&lt;li&gt;确保仓库中启用了GitHub Actions。&lt;&#x2F;li&gt;
&lt;li&gt;确保您有权限编辑仓库的&lt;code&gt;.github&#x2F;workflows&lt;&#x2F;code&gt;目录。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;pei-zhi-bu-zou&quot;&gt;配置步骤&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;di-yi-bu-chuang-jian-github-actionsgong-zuo-liu-wen-jian&quot;&gt;第一步：创建GitHub Actions工作流文件&lt;&#x2F;h3&gt;
&lt;p&gt;在您的仓库中，导航到&lt;code&gt;.github&#x2F;workflows&lt;&#x2F;code&gt;目录。如果该目录不存在，请创建一个。&lt;&#x2F;p&gt;
&lt;p&gt;在该目录下，新建一个名为&lt;code&gt;openhands-resolver.yml&lt;&#x2F;code&gt;的文件，并添加以下内容：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Resolve Issue with OpenHands
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;issues&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;labeled&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pull_request&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;labeled&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;issue_comment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pull_request_review_comment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;created&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pull_request_review&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;submitted&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;permissions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contents&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;write
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pull-requests&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;write
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;issues&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;write
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;call-openhands-resolver&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;All-Hands-AI&#x2F;OpenHands&#x2F;.github&#x2F;workflows&#x2F;openhands-resolver.yml@main
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ vars.OPENHANDS_MACRO || &amp;#39;@openhands-agent&amp;#39; }}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max_iterations&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ fromJson(vars.OPENHANDS_MAX_ITER || 50) }}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;base_container_image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ vars.OPENHANDS_BASE_CONTAINER_IMAGE || &amp;#39;&amp;#39; }}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LLM_MODEL&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ vars.LLM_MODEL || &amp;#39;azure&#x2F;gpt-4o&amp;#39; }}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_branch&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ vars.TARGET_BRANCH || &amp;#39;dev&amp;#39; }}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PAT_TOKEN&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.OPENHANDS_RESOLVER_TOKEN }}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PAT_USERNAME&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.OPENHANDS_RESOLVER_USERNAME }}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LLM_API_KEY&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.LLM_API_KEY }}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LLM_BASE_URL&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.LLM_BASE_URL }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;di-er-bu-pei-zhi-repo-quan-xian&quot;&gt;第二步，配置 Repo 权限&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;依次点击 &lt;code&gt;Settings -&amp;gt; Actions -&amp;gt; Genral -&amp;gt; Workflow permissions&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;勾选 &lt;code&gt;Read and write permissions&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;勾选 &lt;code&gt;Allow Github Actions to create and approve pull requests&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;di-san-bu-pei-zhi-github-secrets&quot;&gt;第三步：配置 GitHub Secrets&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&#x2F;security-for-github-actions&#x2F;security-guides&#x2F;using-secrets-in-github-actions&quot;&gt;GitHub Secrets&lt;&#x2F;a&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;必须项： &lt;code&gt;LLM_API_KEY&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;可选项： &lt;code&gt;OPENHANDS_RESOLVER_TOKEN&lt;&#x2F;code&gt;, &lt;code&gt;OPENHANDS_RESOLVER_USERNAME&lt;&#x2F;code&gt;, &lt;code&gt;LLM_BASE_URL&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;为了让 OpenHands Issue Resolver 能够访问您的GitHub仓库，您需要配置&lt;code&gt;GITHUB_TOKEN&lt;&#x2F;code&gt;。幸运的是，GitHub 会自动为每个工作流运行提供一个&lt;code&gt;GITHUB_TOKEN&lt;&#x2F;code&gt;，您无需手动设置。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-si-bu-yan-zheng-pei-zhi&quot;&gt;第四步：验证配置&lt;&#x2F;h3&gt;
&lt;p&gt;完成上述步骤后，提交并推送更改到您的仓库。即通过如下步骤触发 OpenHands Issue Resolver 工作流运行：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在 Repo 中创建新的 Issue。&lt;&#x2F;li&gt;
&lt;li&gt;给 Issue 添加 &lt;code&gt;fix-me&lt;&#x2F;code&gt; 的标签，或者在 Issue 的评论区 &lt;code&gt;@openhands-agent&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;fix-me&lt;&#x2F;code&gt; 标签， Agent 会基于所有的留言进行处理。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;@openhands-agent&lt;&#x2F;code&gt;， Agent进针对所处的留言帖子进行处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;integrate-openhands-issue-resolver-into-github-actions&#x2F;GtiHub_Issue_Creation.png&quot; alt=&quot;GitHub Issue Creation&quot; &#x2F;&gt;
3. Openhands Agent自动被触发，即可通过 Agent生成的新评论或在 GitHub Repo 的 &amp;quot;Actions&amp;quot; 选项卡中查看工作流的运行状态。
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;integrate-openhands-issue-resolver-into-github-actions&#x2F;GitHub_Actions_001.png&quot; alt=&quot;GitHub Actions&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;integrate-openhands-issue-resolver-into-github-actions&#x2F;GitHub_Actions_002.png&quot; alt=&quot;GitHub Actions&quot; &#x2F;&gt;
4. OpenHands完成工作，并生成了新的PR，可人工进行review, merge
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;integrate-openhands-issue-resolver-into-github-actions&#x2F;GitHub_Issue_PR.png&quot; alt=&quot;GitHub Issue PR&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;integrate-openhands-issue-resolver-into-github-actions&#x2F;GitHub_Issue_Finished.png&quot; alt=&quot;GitHub Issue Finished&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;然后如果一切正常，您将看到OpenHands Issue Resolver成功运行的日志。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.all-hands.dev&#x2F;modules&#x2F;usage&#x2F;how-to&#x2F;github-action&quot;&gt;OpenHands GitHub Action使用文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;All-Hands-AI&#x2F;OpenHands&#x2F;blob&#x2F;main&#x2F;openhands&#x2F;resolver&#x2F;README.md&quot;&gt;OpenHands Issue Resolver README&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过以上步骤，您已经成功将OpenHands Issue Resolver集成到GitHub Actions中。现在，您可以享受自动化问题解决带来的便利了！&lt;&#x2F;p&gt;
&lt;p&gt;如果您在配置过程中遇到任何问题，可随时在评论区下方留言。希望这篇文章对您有所帮助！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>JPEG XS的并行化改造方案与实现</title>
        <published>2025-03-08T00:00:00+00:00</published>
        <updated>2025-03-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/jpeg-xs-parallel-optimization/" type="text/html"/>
        <id>https://polly2014.github.io/jpeg-xs-parallel-optimization/</id>
        
        <content type="html">&lt;h2 id=&quot;bei-jing-jie-shao&quot;&gt;背景介绍&lt;&#x2F;h2&gt;
&lt;p&gt;JPEG XS是一种低延迟、视觉无损的图像压缩标准，广泛应用于实时视频传输和高质量图像处理。其参考软件实现了编码和解码功能，但目前的实现是串行的，存在性能优化的空间。本次任务旨在分析其并行化的可能性，并给出详尽的并行化思路、方案与代码。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bian-jie-ma-guo-cheng-fen-xi&quot;&gt;编解码过程分析&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;bian-ma-guo-cheng&quot;&gt;编码过程&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;输入图像预处理&lt;&#x2F;strong&gt;：支持PNM、PGX、YUV等格式。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;配置编码参数&lt;&#x2F;strong&gt;：包括配置文件、比特率等。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;小波变换&lt;&#x2F;strong&gt;：分解图像为多个频率子带。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;量化&lt;&#x2F;strong&gt;：减少数据冗余。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;熵编码&lt;&#x2F;strong&gt;：压缩量化后的数据。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;码流生成&lt;&#x2F;strong&gt;：生成符合ISO标准的JPEG XS码流。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;jie-ma-guo-cheng&quot;&gt;解码过程&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;读取码流&lt;&#x2F;strong&gt;：解析JPEG XS码流结构。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;熵解码&lt;&#x2F;strong&gt;：恢复量化数据。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;逆量化&lt;&#x2F;strong&gt;：还原小波系数。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;逆小波变换&lt;&#x2F;strong&gt;：重建图像像素数据。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;色彩空间转换&lt;&#x2F;strong&gt;：还原RGB或YUV格式。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bing-xing-hua-gai-zao-si-lu&quot;&gt;并行化改造思路&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;chuan-xing-yu-bing-xing-fen-xi&quot;&gt;串行与并行分析&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;现状&lt;&#x2F;strong&gt;：编码和解码过程是串行的。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;优化可能性&lt;&#x2F;strong&gt;：编码过程的每一列是独立的，具有并行化潜力。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bing-xing-hua-fang-an&quot;&gt;并行化方案&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;1-bing-xing-hua-lie-chu-li&quot;&gt;1. 并行化列处理&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;现状&lt;&#x2F;strong&gt;：列的初始化是通过循环逐列完成的。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;改造思路&lt;&#x2F;strong&gt;：使用OpenMP将列的初始化并行化。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;代码实现&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; omp parallel for
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; column = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; column &amp;lt; ctx-&amp;gt;ids.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;npx&lt;&#x2F;span&gt;&lt;span&gt;; column++) {
&lt;&#x2F;span&gt;&lt;span&gt;    ctx-&amp;gt;rc[column] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rate_control_open&lt;&#x2F;span&gt;&lt;span&gt;(xs_config, &amp;amp;ctx-&amp;gt;ids, column);
&lt;&#x2F;span&gt;&lt;span&gt;    ctx-&amp;gt;precinct[column] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;precinct_open_column&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;ctx-&amp;gt;ids, ctx-&amp;gt;xs_config-&amp;gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N_g&lt;&#x2F;span&gt;&lt;span&gt;, column);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;2-bing-xing-hua-xiao-bo-bian-huan&quot;&gt;2. 并行化小波变换&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;现状&lt;&#x2F;strong&gt;：小波变换是逐行逐列处理的。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;改造思路&lt;&#x2F;strong&gt;：将小波变换的行处理并行化。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;代码实现&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; omp parallel for
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; y &amp;lt; height; y++) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; x &amp;lt; width; x++) {
&lt;&#x2F;span&gt;&lt;span&gt;        output[y][x] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perform_wavelet_transform&lt;&#x2F;span&gt;&lt;span&gt;(input, y, x);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;3-gpujia-su&quot;&gt;3. GPU加速&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;现状&lt;&#x2F;strong&gt;：当前实现基于CPU。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;改造思路&lt;&#x2F;strong&gt;：使用CUDA或OpenCL将小波变换、量化和熵编码移植到GPU。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;&#x2F;strong&gt;：GPU擅长处理大规模并行任务，适合图像分块处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bian-yi-zhi-chi-openmp&quot;&gt;编译支持OpenMP&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;xiu-gai-cmakelists-txt&quot;&gt;修改&lt;code&gt;CMakeLists.txt&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;添加以下内容以支持OpenMP：&lt;pre data-lang=&quot;cmake&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmake &quot;&gt;&lt;code class=&quot;language-cmake&quot; data-lang=&quot;cmake&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find_package&lt;&#x2F;span&gt;&lt;span&gt;(OpenMP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;REQUIRED&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(OpenMP_CXX_FOUND)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;target_link_libraries&lt;&#x2F;span&gt;&lt;span&gt;(jxs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIVATE &lt;&#x2F;span&gt;&lt;span&gt;OpenMP::OpenMP_CXX)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;endif&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shi-yong-gccbian-yi&quot;&gt;使用&lt;code&gt;gcc&lt;&#x2F;code&gt;编译&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;添加&lt;code&gt;-fopenmp&lt;&#x2F;code&gt;选项：&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gcc -fopenmp -o&lt;&#x2F;span&gt;&lt;span&gt; jxs_encoder xs_enc.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -lm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过上述并行化改造，可以显著提升JPEG XS参考软件的编解码性能。主要改动包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用OpenMP并行化列处理和小波变换。&lt;&#x2F;li&gt;
&lt;li&gt;修改编译配置以支持多线程。&lt;&#x2F;li&gt;
&lt;li&gt;考虑使用GPU加速核心计算。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果需要进一步优化或测试并行化效果，可以继续探索具体模块的实现。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands：端到端流程原理深度剖析</title>
        <published>2025-03-07T00:00:00+00:00</published>
        <updated>2025-03-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-e2e-workflow-deep-dive/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-e2e-workflow-deep-dive/</id>
        
        <content type="html">&lt;h2 id=&quot;1-yin-yan&quot;&gt;&lt;strong&gt;1. 引言&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在现代软件开发中，自动化工具已经成为不可或缺的一部分。然而，传统的自动化工具往往局限于特定场景，无法灵活适应复杂的用户需求。为了解决这一问题，OpenHands 应运而生。&lt;&#x2F;p&gt;
&lt;p&gt;OpenHands 是一个自动化 AI 软件工程师，旨在通过端到端的交互流程，帮助用户完成从代码生成到测试运行、从文件操作到 Web 自动化等多种任务。它的核心组件——Agent，能够智能地解析用户请求、分解任务并协调执行环境完成操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;openhands-de-du-te-you-shi&quot;&gt;&lt;strong&gt;OpenHands 的独特优势&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自然语言交互&lt;&#x2F;strong&gt;：用户可以通过简单的自然语言描述任务，无需掌握复杂的技术细节。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;模块化设计&lt;&#x2F;strong&gt;：系统由多个独立模块组成，支持灵活扩展和动态调用。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;安全性与隔离&lt;&#x2F;strong&gt;：通过沙箱技术和严格的权限管理，确保任务执行的安全性。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;端到端自动化&lt;&#x2F;strong&gt;：从用户请求到任务完成，全流程自动化，无需人工干预。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2-openhands-de-zheng-ti-jia-gou&quot;&gt;&lt;strong&gt;2. OpenHands 的整体架构&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;jia-gou-tu&quot;&gt;&lt;strong&gt;架构图&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;openhands-e2e-workflow-deep-dive&#x2F;OpenHands_Architecture.png&quot; alt=&quot;OpenHands Architecture&quot; &#x2F;&gt;
上图展示了 OpenHands 的整体架构，包括用户、前端、Server、Agent、MicroAgent、Sandbox&#x2F;Browser&#x2F;Shell 等模块之间的交互关系。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-jian-jie&quot;&gt;&lt;strong&gt;模块简介&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模块名称&lt;&#x2F;th&gt;&lt;th&gt;描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;用户&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;用户通过自然语言描述任务，例如“生成一个 Python 函数并编写单元测试”。用户请求是整个流程的起点。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;前端&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供用户交互界面，支持文件上传、任务配置和结果展示，基于 React 构建，确保用户体验流畅。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Server&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;基于 FastAPI 构建，负责接收用户请求并将其转发给 Agent。Server 提供 RESTful API 接口，支持任务的分发、会话管理和请求验证，同时与前端交互，确保用户请求能够被正确解析并传递到后端的 Agent。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Agent&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;OpenHands 的核心组件，负责解析用户请求、分解任务并协调执行。它是整个系统的“大脑”，通过调用 MicroAgent 和执行环境完成复杂任务。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;MicroAgent&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;执行具体任务的子模块，例如文件操作、代码生成、测试运行等。每个 MicroAgent 专注于特定功能，支持动态加载和扩展，确保任务的灵活性和高效性。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;LLM&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供强大的自然语言处理能力，支持任务解析、语义分析和动态评分标准生成，确保复杂任务能够被准确理解和执行。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Memory&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;管理会话记忆和上下文信息，确保任务执行的连续性。通过 Condenser 和 ConversationMemory 模块实现高效的记忆管理。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;负责权限管理和安全审计，确保任务执行的安全性。通过沙箱技术和严格的输入验证防止恶意代码注入。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Storage&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;负责数据存储和检索，支持任务结果的持久化，确保用户能够随时访问历史任务结果。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Sandbox&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供安全、隔离的任务执行环境，确保任务执行不会影响系统的其他部分。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Browser&#x2F;Shell&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;实际的执行环境，用于完成 Web 自动化或 Shell 命令操作，支持跨平台和多种任务类型。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;本文将对 OpenHands 的架构、工作流程、技术实现以及应用场景进行全面解析。通过深入剖析每个组件的设计原理与技术细节，帮助读者理解 OpenHands 的工作机制，并探索其在自动化领域的潜力。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-gong-zuo-liu-cheng-cong-yong-hu-dao-zhi-xing-huan-jing&quot;&gt;&lt;strong&gt;3. 工作流程：从用户到执行环境&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的工作流程是一个端到端的自动化过程，从用户请求到任务完成，每个步骤都经过精心设计以确保高效、准确和安全。以下是以自动化开发与部署一个 Web 应用为核心的详细工作流程解析。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-1-yong-hu-qing-qiu-de-chu-li&quot;&gt;&lt;strong&gt;3.1 用户请求的处理&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户交互&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户通过前端描述任务，例如：
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;创建一个待办事项管理工具，前端用 React，后端用 FastAPI，支持添加、删除和标记任务为完成。将其部署到 Vercel。&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;前端通过 RESTful API 将请求发送到 Server。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Server 的作用&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Server 接收用户请求并通过 FastAPI 路由处理，定义在 &lt;code&gt;openhands.server.routes.conversation.py&lt;&#x2F;code&gt; 中：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;@router.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;v1&#x2F;execute&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute_task&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: Request):
&lt;&#x2F;span&gt;&lt;span&gt;    data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    task_description = data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task_description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    agent = Agent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_cls&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CodeActAgent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)()
&lt;&#x2F;span&gt;&lt;span&gt;    result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;agent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle_task&lt;&#x2F;span&gt;&lt;span&gt;(task_description)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: result}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-2-codeactagent-de-ren-wu-fen-jie&quot;&gt;&lt;strong&gt;3.2 CodeActAgent 的任务分解&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;任务分解&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeActAgent 接收用户请求后，将其分解为多个子任务：
&lt;ol&gt;
&lt;li&gt;生成前端代码。&lt;&#x2F;li&gt;
&lt;li&gt;生成后端代码。&lt;&#x2F;li&gt;
&lt;li&gt;优化代码（调用 LLM）。&lt;&#x2F;li&gt;
&lt;li&gt;在本地运行测试。&lt;&#x2F;li&gt;
&lt;li&gt;打包代码并上传到 Vercel。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调用 LLM&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 CodeActAgent 的 &lt;code&gt;step&lt;&#x2F;code&gt; 方法与 LLM 交互，优化代码：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: State) -&amp;gt; Action:
&lt;&#x2F;span&gt;&lt;span&gt;    messages = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_get_messages&lt;&#x2F;span&gt;&lt;span&gt;(state)
&lt;&#x2F;span&gt;&lt;span&gt;    params = {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.llm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format_messages_for_llm&lt;&#x2F;span&gt;&lt;span&gt;(messages)}
&lt;&#x2F;span&gt;&lt;span&gt;    response = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.llm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;completion&lt;&#x2F;span&gt;&lt;span&gt;(**params)
&lt;&#x2F;span&gt;&lt;span&gt;    actions = codeact_function_calling.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response_to_actions&lt;&#x2F;span&gt;&lt;span&gt;(response)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;actions:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.pending_actions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(action)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.pending_actions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;popleft&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文管理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Memory 模块（如 &lt;code&gt;ConversationMemory&lt;&#x2F;code&gt; 和 &lt;code&gt;Condenser&lt;&#x2F;code&gt;）管理会话记忆和上下文信息：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.conversation_memory = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ConversationMemory&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.prompt_manager)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.condenser = Condenser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from_config&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.config.condenser)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-3-microagent-de-ren-wu-zhi-xing&quot;&gt;&lt;strong&gt;3.3 MicroAgent 的任务执行&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在 OpenHands 中，MicroAgent 是执行具体任务的核心模块。以下是与 Todo App 开发和部署相关的 MicroAgent 实现：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CodeGenerationMicroAgent&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;负责生成前端和后端代码。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码（非 OpenHands 源码，仅为案例展示）：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CodeGenerationMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_frontend_code&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        import React, { useState } from &amp;#39;react&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        function App() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            const [tasks, setTasks] = useState([]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            const addTask = (task) =&amp;gt; setTasks([...tasks, { task, completed: false }]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            const toggleTask = (index) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                const newTasks = [...tasks];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                newTasks[index].completed = !newTasks[index].completed;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                setTasks(newTasks);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            return (
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                    &amp;lt;h1&amp;gt;Todo List&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                    &amp;lt;input id=&amp;quot;taskInput&amp;quot; placeholder=&amp;quot;Add a task&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                    &amp;lt;button onClick={() =&amp;gt; addTask(document.getElementById(&amp;#39;taskInput&amp;#39;).value)}&amp;gt;Add&amp;lt;&#x2F;button&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                    &amp;lt;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                        {tasks.map((t, i) =&amp;gt; (
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                            &amp;lt;li key=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{i}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; onClick={() =&amp;gt; toggleTask(i)} style=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; textDecoration: t.completed ? &amp;#39;line-through&amp;#39; : &amp;#39;none&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{t.task}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                            &amp;lt;&#x2F;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                        ))}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                    &amp;lt;&#x2F;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        export default App;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_backend_code&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        from fastapi import FastAPI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        app = FastAPI()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        tasks = []
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        @app.post(&amp;quot;&#x2F;add_task&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        def add_task(task: str):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            tasks.append({&amp;quot;task&amp;quot;: task, &amp;quot;completed&amp;quot;: False})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            return {&amp;quot;message&amp;quot;: &amp;quot;Task added successfully&amp;quot;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        @app.get(&amp;quot;&#x2F;tasks&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        def get_tasks():
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            return tasks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        @app.put(&amp;quot;&#x2F;toggle_task&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{index}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        def toggle_task(index: int):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            if 0 &amp;lt;= index &amp;lt; len(tasks):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                tasks[index][&amp;quot;completed&amp;quot;] = not tasks[index][&amp;quot;completed&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                return {&amp;quot;message&amp;quot;: &amp;quot;Task updated successfully&amp;quot;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            return {&amp;quot;error&amp;quot;: &amp;quot;Invalid index&amp;quot;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BrowserMicroAgent&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;负责自动化部署到 Vercel。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码（非 OpenHands 源码，仅为案例展示）：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BrowserMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deploy_to_vercel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;project_path&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 使用浏览器自动化完成部署
&lt;&#x2F;span&gt;&lt;span&gt;        browser = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialize_browser&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goto&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;vercel.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;login&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user@example.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;upload_project&lt;&#x2F;span&gt;&lt;span&gt;(project_path)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;todo-app.vercel.app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-4-zhi-xing-huan-jing-de-jiao-hu&quot;&gt;&lt;strong&gt;3.4 执行环境的交互&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;OpenHands 的执行环境交互通过文件操作和路径解析实现，确保任务执行的安全性和隔离性。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件路径解析&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;resolve_path&lt;&#x2F;code&gt; 方法将用户提供的路径解析为主机文件系统上的路径，同时确保路径安全性。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码（真实代码）：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;resolve_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file_path&lt;&#x2F;span&gt;&lt;span&gt;: str,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;working_directory&lt;&#x2F;span&gt;&lt;span&gt;: str,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_base&lt;&#x2F;span&gt;&lt;span&gt;: str,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_mount_path_in_sandbox&lt;&#x2F;span&gt;&lt;span&gt;: str,
&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    path_in_sandbox = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;(file_path)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not path_in_sandbox.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_absolute&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        path_in_sandbox = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;(working_directory) &#x2F; path_in_sandbox
&lt;&#x2F;span&gt;&lt;span&gt;    abs_path_in_sandbox = path_in_sandbox.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not abs_path_in_sandbox.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_relative_to&lt;&#x2F;span&gt;&lt;span&gt;(workspace_mount_path_in_sandbox):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PermissionError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;File access not permitted: &lt;&#x2F;span&gt;&lt;span&gt;{file_path}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    path_in_workspace = abs_path_in_sandbox.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;relative_to&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;(workspace_mount_path_in_sandbox)
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;(workspace_base) &#x2F; path_in_workspace
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件读取&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;read_file&lt;&#x2F;code&gt; 方法读取文件内容，返回 &lt;code&gt;FileReadObservation&lt;&#x2F;code&gt; 对象。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码（真实代码）：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;read_file&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workdir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_base&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_mount_path_in_sandbox&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;=-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Observation:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        whole_path = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            path, workdir, workspace_base, workspace_mount_path_in_sandbox
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;PermissionError:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrorObservation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;You&amp;#39;re not allowed to access this path: &lt;&#x2F;span&gt;&lt;span&gt;{path}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;. You can only access paths inside the workspace.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(whole_path, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;file:
&lt;&#x2F;span&gt;&lt;span&gt;            lines = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read_lines&lt;&#x2F;span&gt;&lt;span&gt;(file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readlines&lt;&#x2F;span&gt;&lt;span&gt;(), start, end)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;FileNotFoundError:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrorObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;File not found: &lt;&#x2F;span&gt;&lt;span&gt;{path}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;UnicodeDecodeError:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrorObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;File could not be decoded as utf-8: &lt;&#x2F;span&gt;&lt;span&gt;{path}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;IsADirectoryError:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrorObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Path is a directory: &lt;&#x2F;span&gt;&lt;span&gt;{path}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;. You can only read files&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    code_view = &amp;#39;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(lines)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FileReadObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=path, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=code_view)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件写入&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;write_file&lt;&#x2F;code&gt; 方法支持在指定范围内插入或覆盖文件内容。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码（真实代码）：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;write_file&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workdir&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_base&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_mount_path_in_sandbox&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;=-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Observation:
&lt;&#x2F;span&gt;&lt;span&gt;    insert = content.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        whole_path = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            path, workdir, workspace_base, workspace_mount_path_in_sandbox
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span&gt;(os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirname&lt;&#x2F;span&gt;&lt;span&gt;(whole_path)):
&lt;&#x2F;span&gt;&lt;span&gt;            os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;makedirs&lt;&#x2F;span&gt;&lt;span&gt;(os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirname&lt;&#x2F;span&gt;&lt;span&gt;(whole_path))
&lt;&#x2F;span&gt;&lt;span&gt;        mode = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span&gt;(whole_path) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r+&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(whole_path, mode, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;file:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;mode != &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;:
&lt;&#x2F;span&gt;&lt;span&gt;                all_lines = file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readlines&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                new_file = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert_lines&lt;&#x2F;span&gt;&lt;span&gt;(insert, all_lines, start, end)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                new_file = [i + &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;insert]
&lt;&#x2F;span&gt;&lt;span&gt;            file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;seek&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writelines&lt;&#x2F;span&gt;&lt;span&gt;(new_file)
&lt;&#x2F;span&gt;&lt;span&gt;            file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;truncate&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;PermissionError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrorObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Permission error on &lt;&#x2F;span&gt;&lt;span&gt;{path}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{e}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FileWriteObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=path)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;沙箱隔离&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;文件操作严格限制在工作区内，确保任务执行的安全性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-5-jie-guo-fan-hui&quot;&gt;&lt;strong&gt;3.5 结果返回&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结果整合&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;CodeActAgent 整合 MicroAgent 的结果，并通过前端返回 Web 应用的部署链接。&lt;&#x2F;li&gt;
&lt;li&gt;示例返回结果：&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Web 应用已成功部署！访问链接：https:&#x2F;&#x2F;todo-app.vercel.app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;bu-chong-mo-kuai&quot;&gt;&lt;strong&gt;补充模块&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;确保任务执行的安全性，防止恶意代码注入。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Security&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate_input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input_data&lt;&#x2F;span&gt;&lt;span&gt;: dict):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 验证用户输入，防止恶意代码注入
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dangerous_command&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; in input_data:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Invalid input detected!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storage&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;负责任务结果的持久化存储，支持用户随时访问历史任务结果。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Storage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;save_result&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task_id&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;: dict):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{task_id}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_result.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;            json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dump&lt;&#x2F;span&gt;&lt;span&gt;(result, f)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;4-he-xin-zu-jian-shen-du-jie-xi&quot;&gt;&lt;strong&gt;4. 核心组件深度解析&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的核心组件包括 Agent、MicroAgent 和执行环境。这些组件共同构成了系统的核心功能，确保任务能够高效、安全地完成。以下是对每个组件的详细剖析。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-1-agent&quot;&gt;&lt;strong&gt;4.1 Agent&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Agent 是 OpenHands 的“大脑”，负责接收用户请求、解析任务并协调 MicroAgent 执行具体操作。每个 Agent 都专注于特定的功能领域，例如代码生成、网页浏览或任务分发。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;agent-fen-lei-biao-ge&quot;&gt;&lt;strong&gt;Agent 分类表格&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Agent 名称&lt;&#x2F;th&gt;&lt;th&gt;路径&lt;&#x2F;th&gt;&lt;th&gt;功能描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BrowsingAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;browsing_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;处理网页浏览相关任务，例如从网页中提取信息。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CodeActAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;codeact_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;专注于代码相关任务，例如代码生成、修复或分析。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DelegatorAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;delegator_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;负责任务的分解和分发，协调多个 Agent 和 MicroAgent 的工作。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DummyAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;dummy_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;一个简单的占位 Agent，主要用于测试或演示。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;VisualBrowsingAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;visualbrowsing_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;专注于视觉浏览任务，例如处理网页的视觉元素或截图。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;MicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;包含多个子模块，专注于特定领域的微任务，例如代码处理、数据库操作等。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;microagent-fen-lei-biao-ge&quot;&gt;&lt;strong&gt;MicroAgent 分类表格&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;MicroAgent 名称&lt;&#x2F;th&gt;&lt;th&gt;路径&lt;&#x2F;th&gt;&lt;th&gt;功能描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;InstructionsMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;instructions.py&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;加载和组织指令文件，构建嵌套字典结构。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;RegistryMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;registry.py&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;注册所有 MicroAgent，加载其定义和提示文件。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;BaseMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;agent.py&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;定义 MicroAgent 的基础功能，包括历史事件序列化、模板渲染和 LLM 调用。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ManagerMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;manager&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;管理任务的分配和执行。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CommitWriterMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;commit_writer&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;负责生成和提交代码变更。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;TypoFixerMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;typo_fixer_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;自动修复代码中的拼写错误。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;StudyRepoMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;study_repo_for_task&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;分析代码仓库以支持任务执行。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;MathMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;math_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;执行数学计算任务。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;RepoExplorerMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;repo_explorer&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;浏览和分析代码仓库。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;VerifierMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;verifier&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;验证任务执行结果的正确性。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;PostgresMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;postgres_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;执行 PostgreSQL 数据库相关操作。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CoderMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;coder&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;负责代码生成和优化。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;agent-de-zhu-ce-yu-diao-yong&quot;&gt;&lt;strong&gt;Agent 的注册与调用&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注册&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个 Agent 在初始化时会注册到 Agent Hub。&lt;&#x2F;li&gt;
&lt;li&gt;注册信息包括 Agent 的名称、功能描述和路径。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;调用&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户请求通过 Agent Hub 分发到合适的 Agent。&lt;&#x2F;li&gt;
&lt;li&gt;Agent Hub 根据任务类型选择合适的 Agent 或 MicroAgent。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;shi-li-dai-ma-agent-de-zhu-ce&quot;&gt;&lt;strong&gt;示例代码：Agent 的注册&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.agenthub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;AgentHub
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 注册 BrowsingAgent
&lt;&#x2F;span&gt;&lt;span&gt;AgentHub.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;register_agent&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BrowsingAgent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;agenthub&#x2F;browsing_agent&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;处理网页浏览相关任务&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 注册 CodeActAgent
&lt;&#x2F;span&gt;&lt;span&gt;AgentHub.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;register_agent&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CodeActAgent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;agenthub&#x2F;codeact_agent&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;专注于代码相关任务&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;shi-li-dai-ma-agent-de-diao-yong&quot;&gt;&lt;strong&gt;示例代码：Agent 的调用&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.agenthub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;AgentHub
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 用户请求
&lt;&#x2F;span&gt;&lt;span&gt;user_request = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;提取 https:&#x2F;&#x2F;example.com 的标题和内容&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 调用合适的 Agent
&lt;&#x2F;span&gt;&lt;span&gt;agent = AgentHub.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_agent&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BrowsingAgent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;result = agent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle_request&lt;&#x2F;span&gt;&lt;span&gt;(user_request)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(result)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-2-microagent&quot;&gt;&lt;strong&gt;4.2 MicroAgent&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;MicroAgent 是 Agent 的子模块，专注于特定领域的功能实现。它们是模块化的组件，例如处理代码、数据库操作或拼写修复。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhi-ze&quot;&gt;&lt;strong&gt;职责&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;任务执行&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;根据 Agent 的指令执行具体任务。&lt;&#x2F;li&gt;
&lt;li&gt;例如，生成代码、修改文件、运行测试等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;模块化设计&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个 MicroAgent 专注于特定功能，支持动态加载和扩展。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;shi-li-dai-ma-microagent-de-zhi-xing&quot;&gt;&lt;strong&gt;示例代码：MicroAgent 的执行&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CodeGenerationMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 执行代码生成逻辑
&lt;&#x2F;span&gt;&lt;span&gt;        code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_code&lt;&#x2F;span&gt;&lt;span&gt;(task[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;code
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_code&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 简单生成代码
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;def fibonacci(n):&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    if n &amp;lt;= 1: return n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    return fibonacci(n-1) + fibonacci(n-2)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-3-zhi-xing-huan-jing&quot;&gt;&lt;strong&gt;4.3 执行环境&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;执行环境是 OpenHands 的“工作场所”，包括 Sandbox、Browser 和 Shell。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhi-ze-1&quot;&gt;&lt;strong&gt;职责&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全执行&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;提供隔离的执行环境，确保任务执行的安全性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;跨环境支持&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持多种任务类型，例如 Web 自动化、Shell 命令执行等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;shi-li-dai-ma-zhi-xing-huan-jing-de-jiao-hu&quot;&gt;&lt;strong&gt;示例代码：执行环境的交互&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Sandbox&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute_code&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 在隔离环境中执行代码
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;(code)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Browser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;load_page&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 使用浏览器加载网页
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Loaded page: &lt;&#x2F;span&gt;&lt;span&gt;{url}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Shell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_command&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 执行系统命令
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Executed command: &lt;&#x2F;span&gt;&lt;span&gt;{command}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;ji-zhu-tiao-zhan&quot;&gt;&lt;strong&gt;技术挑战&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;解决方案：严格限制沙箱权限，防止恶意代码访问系统资源。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;解决方案：使用轻量级容器技术（如 Docker）减少资源开销。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;5-ji-zhu-zhan-yu-shi-xian-xi-jie&quot;&gt;&lt;strong&gt;5. 技术栈与实现细节&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的技术栈涵盖了后端、前端、通信机制和安全性设计。以下是对每个部分的详细解析。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-1-hou-duan-python&quot;&gt;&lt;strong&gt;5.1 后端（Python）&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;后端是 OpenHands 的核心逻辑层，负责处理用户请求、任务分解和执行。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-yong-de-kuang-jia-yu-ku&quot;&gt;&lt;strong&gt;使用的框架与库&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;框架&#x2F;库名称&lt;&#x2F;th&gt;&lt;th&gt;功能描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Flask&#x2F;FastAPI&lt;&#x2F;td&gt;&lt;td&gt;用于构建 REST API，支持高效的请求处理。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Pytest&lt;&#x2F;td&gt;&lt;td&gt;用于单元测试和集成测试，确保代码质量。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Asyncio&lt;&#x2F;td&gt;&lt;td&gt;实现异步任务处理，提高系统的并发能力。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;dai-ma-zu-zhi-yu-mo-kuai-hua-she-ji&quot;&gt;&lt;strong&gt;代码组织与模块化设计&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;目录结构&lt;&#x2F;th&gt;&lt;th&gt;描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;openhands&#x2F;agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Agent 的实现。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;openhands&#x2F;microagent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;MicroAgent 的实现。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;openhands&#x2F;sandbox&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;执行环境的实现。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;tests&#x2F;unit&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;单元测试代码。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;guan-jian-gong-neng-shi-xian&quot;&gt;&lt;strong&gt;关键功能实现&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;功能&lt;&#x2F;th&gt;&lt;th&gt;描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;任务分解&lt;&#x2F;td&gt;&lt;td&gt;使用规则或 AI 模型解析用户请求并分解任务。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;上下文管理&lt;&#x2F;td&gt;&lt;td&gt;使用字典或树结构存储任务上下文信息。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;错误处理&lt;&#x2F;td&gt;&lt;td&gt;设计错误恢复机制，确保任务失败时能够自动重试。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;5-2-qian-duan-react&quot;&gt;&lt;strong&gt;5.2 前端（React）&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;前端是用户与 OpenHands 交互的界面，提供直观的操作体验。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yong-hu-jie-mian-de-she-ji-yu-jiao-hu&quot;&gt;&lt;strong&gt;用户界面的设计与交互&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React 框架&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;构建动态、响应式的用户界面。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;组件化设计&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个功能模块对应一个独立的 React 组件，支持复用和扩展。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;状态管理&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 Redux 或 Context API 管理应用状态。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;guo-ji-hua-zhi-chi&quot;&gt;&lt;strong&gt;国际化支持&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工具&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 i18next 实现多语言支持。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;环境变量配置&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;frontend&#x2F;.env&lt;&#x2F;code&gt; 文件中设置国际化相关变量。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;gou-jian-yu-you-hua&quot;&gt;&lt;strong&gt;构建与优化&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建工具&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 Webpack 或 Vite 构建前端代码。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过代码分割和懒加载减少页面加载时间。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-3-tong-xin-ji-zhi&quot;&gt;&lt;strong&gt;5.3 通信机制&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;通信机制是前后端以及 Agent 与 MicroAgent 之间的桥梁。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qian-hou-duan-tong-xin&quot;&gt;&lt;strong&gt;前后端通信&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;REST API&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 HTTP 协议实现前后端通信。&lt;&#x2F;li&gt;
&lt;li&gt;例如，前端发送用户请求到后端，后端返回任务结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;实现实时通信，例如任务进度更新。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;agent-yu-microagent-de-tong-xin&quot;&gt;&lt;strong&gt;Agent 与 MicroAgent 的通信&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协议设计&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 JSON 格式传递任务指令和结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;异步调用&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 Python 的 asyncio 实现异步通信。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-4-an-quan-xing&quot;&gt;&lt;strong&gt;5.4 安全性&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;安全性是 OpenHands 的重要设计目标，确保用户数据和任务执行的安全。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ju-an-quan&quot;&gt;&lt;strong&gt;数据安全&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加密&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 HTTPS 加密通信，防止数据泄露。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;权限管理&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;限制用户对系统资源的访问权限。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;ren-wu-zhi-xing-an-quan&quot;&gt;&lt;strong&gt;任务执行安全&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;沙箱技术&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用容器或虚拟机隔离任务执行环境。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;输入验证&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;验证用户输入，防止恶意代码注入。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;xi-tong-an-quan&quot;&gt;&lt;strong&gt;系统安全&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;防火墙&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用防火墙保护系统免受外部攻击。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;日志监控&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;记录系统日志，检测异常行为。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 多账户方案（一）: Backend Server Setup and Deployment with SSL</title>
        <published>2025-03-06T00:00:00+00:00</published>
        <updated>2025-03-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-backend-setup-deployment-ssl/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-backend-setup-deployment-ssl/</id>
        
        <content type="html">&lt;p&gt;OpenHands 是一个基于 Python 的后端服务，使用 FastAPI 框架构建。本文将详细记录如何从源码独立编译部署 OpenHands 的 Server 端，并为其配置 SSL&#x2F;HTTPS，以实现安全的生产环境服务。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fastapi-poetry-uvicorn-nginx-he-ssl-de-guan-xi&quot;&gt;FastAPI、Poetry、Uvicorn、Nginx 和 SSL 的关系&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FastAPI&lt;&#x2F;strong&gt;：
FastAPI 是一个现代的 Python Web 框架，专注于快速开发和高性能。它支持异步编程，能够处理高并发请求。FastAPI 提供了自动生成的交互式 API 文档（如 Swagger UI 和 ReDoc），使开发者能够轻松测试和调试 API。它的类型提示和数据验证功能基于 Python 的 &lt;code&gt;pydantic&lt;&#x2F;code&gt;，确保了数据的可靠性和安全性。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Poetry&lt;&#x2F;strong&gt;：
Poetry 是一个强大的 Python 项目管理工具，用于管理依赖、虚拟环境和项目构建。它通过 &lt;code&gt;pyproject.toml&lt;&#x2F;code&gt; 文件定义项目的依赖关系和元数据，确保开发环境的一致性。Poetry 的虚拟环境隔离功能使得项目之间的依赖不会相互干扰，同时简化了依赖安装和版本管理。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Uvicorn&lt;&#x2F;strong&gt;：
Uvicorn 是一个高性能的 ASGI 服务器，用于运行基于 FastAPI 的应用。ASGI（Asynchronous Server Gateway Interface）是 WSGI 的异步版本，支持 WebSocket 和 HTTP&#x2F;2 等现代协议。Uvicorn 的轻量化设计使其能够快速启动并处理大量并发请求，是运行 FastAPI 应用的理想选择。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nginx&lt;&#x2F;strong&gt;：
Nginx 是一个功能强大的 Web 服务器和反向代理工具，广泛用于处理静态资源、负载均衡和 SSL&#x2F;HTTPS 配置。在本项目中，Nginx 充当反向代理，将外部请求转发到运行在 Uvicorn 上的 FastAPI 应用，同时负责管理 SSL 证书和加密通信。Nginx 的高性能和灵活性使其成为生产环境的首选。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSL&lt;&#x2F;strong&gt;：
SSL（Secure Sockets Layer）是一种加密协议，用于保护客户端与服务器之间的通信安全。通过 HTTPS（HTTP over SSL），可以确保数据在传输过程中不会被窃取或篡改。SSL 证书由受信任的证书颁发机构（CA）签发，验证服务器的身份。在本项目中，SSL 通过 Nginx 或 Caddy 自动管理，提供安全的访问通道。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bu-shu-jia-gou&quot;&gt;部署架构&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span&gt;                      +-------------+
&lt;&#x2F;span&gt;&lt;span&gt;                      |             |
&lt;&#x2F;span&gt;&lt;span&gt;                      |  Internet   |
&lt;&#x2F;span&gt;&lt;span&gt;                      |             |
&lt;&#x2F;span&gt;&lt;span&gt;                      +------+------+
&lt;&#x2F;span&gt;&lt;span&gt;                             |
&lt;&#x2F;span&gt;&lt;span&gt;                             | HTTPS (443)
&lt;&#x2F;span&gt;&lt;span&gt;                             |
&lt;&#x2F;span&gt;&lt;span&gt;                      +------+------+
&lt;&#x2F;span&gt;&lt;span&gt;                      |             |
&lt;&#x2F;span&gt;&lt;span&gt;                      |   Nginx     | SSL 终止
&lt;&#x2F;span&gt;&lt;span&gt;                      |             |
&lt;&#x2F;span&gt;&lt;span&gt;                      +------+------+
&lt;&#x2F;span&gt;&lt;span&gt;                             |
&lt;&#x2F;span&gt;&lt;span&gt;                             | HTTP (localhost:54013)
&lt;&#x2F;span&gt;&lt;span&gt;                             |
&lt;&#x2F;span&gt;&lt;span&gt;       +-----------------+---+---+-----------------+
&lt;&#x2F;span&gt;&lt;span&gt;       |                 |       |                 |
&lt;&#x2F;span&gt;&lt;span&gt;       |                 |       |                 |
&lt;&#x2F;span&gt;&lt;span&gt;+------+------+    +-----+------+     +------+-----+
&lt;&#x2F;span&gt;&lt;span&gt;|             |    |            |     |            |
&lt;&#x2F;span&gt;&lt;span&gt;|  Uvicorn    |    |  Uvicorn   | ... |  Uvicorn   | ASGI 服务器
&lt;&#x2F;span&gt;&lt;span&gt;|  Worker 1   |    |  Worker 2  |     |  Worker n  |
&lt;&#x2F;span&gt;&lt;span&gt;|             |    |            |     |            |
&lt;&#x2F;span&gt;&lt;span&gt;+------+------+    +------+-----+     +------+-----+
&lt;&#x2F;span&gt;&lt;span&gt;       |                 |                  |
&lt;&#x2F;span&gt;&lt;span&gt;       |                 |                  |
&lt;&#x2F;span&gt;&lt;span&gt;+------+------+    +-----+------+     +-----+------+
&lt;&#x2F;span&gt;&lt;span&gt;|             |    |            |     |            |
&lt;&#x2F;span&gt;&lt;span&gt;|  FastAPI    |    |  FastAPI   |     |  FastAPI   | Web 框架
&lt;&#x2F;span&gt;&lt;span&gt;|  App        |    |  App       |     |  App       |
&lt;&#x2F;span&gt;&lt;span&gt;|             |    |            |     |            |
&lt;&#x2F;span&gt;&lt;span&gt;+-------------+    +------------+     +------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;shi-xian-bu-zou&quot;&gt;实现步骤&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-cong-yuan-ma-bian-yi-openhands-server&quot;&gt;1. 从源码编译 OpenHands Server&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;an-zhuang-yi-lai&quot;&gt;安装依赖&lt;&#x2F;h4&gt;
&lt;p&gt;确保服务器上安装以下工具：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.8 或更高版本&lt;&#x2F;li&gt;
&lt;li&gt;Poetry&lt;&#x2F;li&gt;
&lt;li&gt;Make&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;ke-long-yuan-ma&quot;&gt;克隆源码&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 克隆 OpenHands 仓库
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;Polly2014&#x2F;OpenHands.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; OpenHands
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;an-zhuang-yi-lai-1&quot;&gt;安装依赖&lt;&#x2F;h4&gt;
&lt;p&gt;进入后端目录并安装依赖：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; openhands
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;qi-dong-fu-wu&quot;&gt;启动服务&lt;&#x2F;h4&gt;
&lt;p&gt;使用 Uvicorn 启动 FastAPI 应用：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;span&gt; run uvicorn openhands.server.app:app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --host&lt;&#x2F;span&gt;&lt;span&gt; 0.0.0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --port&lt;&#x2F;span&gt;&lt;span&gt; 54013
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此命令会启动 OpenHands 的后端服务，监听端口 &lt;code&gt;54013&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-pei-zhi-ssl-https&quot;&gt;2. 配置 SSL&#x2F;HTTPS&lt;&#x2F;h3&gt;
&lt;p&gt;为了为后端服务添加 HTTPS 支持，可以使用 Nginx 或 Caddy 作为反向代理。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-yong-nginx-pei-zhi-https&quot;&gt;使用 Nginx 配置 HTTPS&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 Nginx&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;申请 SSL 证书&lt;&#x2F;strong&gt;（使用 Let&#x27;s Encrypt 和 Certbot）：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install certbot python3-certbot-nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; certbot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --nginx -d&lt;&#x2F;span&gt;&lt;span&gt; your-domain.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置 Nginx 反向代理&lt;&#x2F;strong&gt;：
编辑 &lt;code&gt;&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;openhands&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nginx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nginx &quot;&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    listen 80;
&lt;&#x2F;span&gt;&lt;span&gt;    server_name your-domain.com;
&lt;&#x2F;span&gt;&lt;span&gt;    return 301 https:&#x2F;&#x2F;$host$request_uri;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    listen 443 ssl;
&lt;&#x2F;span&gt;&lt;span&gt;    server_name your-domain.com;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;your-domain.com&#x2F;fullchain.pem;
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;your-domain.com&#x2F;privkey.pem;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_pass http:&#x2F;&#x2F;127.0.0.1:54013; # 后端服务的地址
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header Host $host;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Real-IP $remote_addr;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Forwarded-Proto $scheme;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用配置并重启 Nginx&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;openhands &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nginx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;shi-yong-caddy-pei-zhi-https&quot;&gt;使用 Caddy 配置 HTTPS&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 Caddy&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; debian-keyring debian-archive-keyring apt-transport-https
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -1sLf &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;dl.cloudsmith.io&#x2F;public&#x2F;caddy&#x2F;stable&#x2F;gpg.key&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;caddy-archive-keyring.asc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -1sLf &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;dl.cloudsmith.io&#x2F;public&#x2F;caddy&#x2F;stable&#x2F;deb.deb.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;caddy-stable.list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install caddy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置 Caddyfile&lt;&#x2F;strong&gt;：
编辑 &lt;code&gt;&#x2F;etc&#x2F;caddy&#x2F;Caddyfile&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;caddy&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-caddy &quot;&gt;&lt;code class=&quot;language-caddy&quot; data-lang=&quot;caddy&quot;&gt;&lt;span&gt;your-domain.com {
&lt;&#x2F;span&gt;&lt;span&gt;   reverse_proxy 127.0.0.1:54013
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启动 Caddy&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart caddy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Caddy 会自动申请和管理 SSL 证书。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-optional-sheng-chan-huan-jing-you-hua&quot;&gt;3. [Optional] 生产环境优化&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;4-optional-jin-cheng-guan-li-yu-zi-qi-dong&quot;&gt;4. [Optional] 进程管理与自启动&lt;&#x2F;h3&gt;
&lt;p&gt;使用 Systemd 管理服务进程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;创建服务配置：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;openhands.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;添加以下内容：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;int&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-int &quot;&gt;&lt;code class=&quot;language-int&quot; data-lang=&quot;int&quot;&gt;&lt;span&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span&gt;Description=OpenHands FastAPI Server
&lt;&#x2F;span&gt;&lt;span&gt;After=network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Service]
&lt;&#x2F;span&gt;&lt;span&gt;User=ubuntu
&lt;&#x2F;span&gt;&lt;span&gt;WorkingDirectory=&#x2F;path&#x2F;to&#x2F;OpenHands&#x2F;openhands
&lt;&#x2F;span&gt;&lt;span&gt;ExecStart=&#x2F;path&#x2F;to&#x2F;poetry&#x2F;bin&#x2F;poetry run uvicorn openhands.server.app:app --host 0.0.0.0 --port 54013
&lt;&#x2F;span&gt;&lt;span&gt;Restart=always
&lt;&#x2F;span&gt;&lt;span&gt;RestartSec=10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Install]
&lt;&#x2F;span&gt;&lt;span&gt;WantedBy=multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;启用并启动服务&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable openhands
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl start openhands
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;5-yan-zheng-bu-shu&quot;&gt;5. 验证部署&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;确保后端服务正在运行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span&gt; http:&#x2F;&#x2F;127.0.0.1:54013
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;通过浏览器访问 &lt;code&gt;https:&#x2F;&#x2F;your-domain.com&lt;&#x2F;code&gt;，验证 HTTPS 是否正常工作。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;nginxxing-neng-you-hua&quot;&gt;Nginx性能优化&lt;&#x2F;h2&gt;
&lt;p&gt;修改 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf，添加以下优化：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nginx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nginx &quot;&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span&gt;worker_processes auto;
&lt;&#x2F;span&gt;&lt;span&gt;worker_connections 1024;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;http {
&lt;&#x2F;span&gt;&lt;span&gt;    # 启用 gzip 压缩
&lt;&#x2F;span&gt;&lt;span&gt;    gzip on;
&lt;&#x2F;span&gt;&lt;span&gt;    gzip_comp_level 5;
&lt;&#x2F;span&gt;&lt;span&gt;    gzip_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;javascript;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    # 调整缓冲区大小
&lt;&#x2F;span&gt;&lt;span&gt;    client_body_buffer_size 10K;
&lt;&#x2F;span&gt;&lt;span&gt;    client_header_buffer_size 1k;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    # 启用 HTTP&#x2F;2
&lt;&#x2F;span&gt;&lt;span&gt;    http2 on;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    # SSL 优化
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_session_cache shared:SSL:10m;
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_session_timeout 10m;
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_protocols TLSv1.2 TLSv1.3;
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_prefer_server_ciphers off;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;chang-jian-wen-ti-pai-cha&quot;&gt;常见问题排查&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;fu-wu-wu-fa-qi-dong&quot;&gt;服务无法启动&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;检查端口是否被占用：&lt;code&gt;sudo lsof -i:54013&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;检查 Python 环境：&lt;code&gt;python --version&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;查看日志：&lt;code&gt;poetry run uvicorn openhands.server.app:app --log-level debug&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ssl-pei-zhi-wen-ti&quot;&gt;SSL 配置问题&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;证书路径错误：确认证书文件路径正确 &lt;&#x2F;li&gt;
&lt;li&gt;Nginx 配置测试：运行 &lt;code&gt;sudo nginx -t&lt;&#x2F;code&gt; 检查配置&lt;&#x2F;li&gt;
&lt;li&gt;防火墙设置：确保 80&#x2F;443 端口已开放 &lt;code&gt;sudo ufw status&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;yu-ming-jie-xi-wen-ti&quot;&gt;域名解析问题&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;确认 DNS 记录已正确设置：&lt;code&gt;dig your-domain.com&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;等待 DNS 缓存更新（可能需要 24-48 小时）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过以上步骤，我们成功实现了 OpenHands Server 端的独立编译部署，并为其配置了 SSL&#x2F;HTTPS。FastAPI、Poetry、Uvicorn、Nginx 和 SSL 的协作确保了服务的高效性和安全性。&lt;&#x2F;p&gt;
&lt;p&gt;这种部署架构具有显著的可扩展性优势：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;水平扩展&lt;&#x2F;strong&gt;：当负载增加时，可以轻松添加更多 Uvicorn 工作进程或部署多个服务实例，由 Nginx 进行负载均衡，实现无缝扩容。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;技术栈灵活性&lt;&#x2F;strong&gt;：架构的各组件可以单独升级或替换（如 Caddy 替代 Nginx），无需重新设计整个系统。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源隔离&lt;&#x2F;strong&gt;：使用 Poetry 创建的虚拟环境确保应用依赖独立，便于多个项目在同一服务器上共存。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;容器化潜力&lt;&#x2F;strong&gt;：此架构可轻松迁移至 Docker 容器或 Kubernetes 集群，进一步提升部署的一致性和可靠性。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;通过这种方式部署的 OpenHands 后端服务既安全可靠，又具备了应对未来业务增长的技术基础。如果有其他问题或需求，请随时联系！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>为 Zola 博客集成 Giscus 评论系统：基于 GitHub Discussions 的互动方案</title>
        <published>2025-03-05T00:00:00+00:00</published>
        <updated>2025-03-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/integrate-giscus-into-blog/" type="text/html"/>
        <id>https://polly2014.github.io/integrate-giscus-into-blog/</id>
        
        <content type="html">&lt;h2 id=&quot;jian-jie&quot;&gt;简介&lt;&#x2F;h2&gt;
&lt;p&gt;本文将详细介绍如何在 Zola 博客中集成 Giscus 评论系统。Giscus 是一个现代化的评论系统，基于 GitHub Discussions，能够为你的博客提供无缝的用户互动体验。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qian-ti-tiao-jian&quot;&gt;前提条件&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;一个基于 Zola 的博客系统。&lt;&#x2F;li&gt;
&lt;li&gt;两个 GitHub 仓库：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;www.polly.com&lt;&#x2F;code&gt;（私有）：包含 Zola 源代码。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;polly2014.github.io&lt;&#x2F;code&gt;（公开）：托管编译后的 &lt;code&gt;public&lt;&#x2F;code&gt; 文件夹。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;polly2014.github.io&lt;&#x2F;code&gt; 仓库中启用了 GitHub Discussions。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ji-cheng-bu-zou&quot;&gt;集成步骤&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;di-yi-bu-pei-zhi-giscus&quot;&gt;第一步：配置 Giscus&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问 &lt;a href=&quot;https:&#x2F;&#x2F;giscus.app&#x2F;&quot;&gt;Giscus&lt;&#x2F;a&gt; 并进行以下配置：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;仓库&lt;&#x2F;strong&gt;：选择 &lt;code&gt;Polly2014&#x2F;polly2014.github.io&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;讨论分类&lt;&#x2F;strong&gt;：创建或选择一个分类（例如 &amp;quot;Announcements&amp;quot;）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;映射方式&lt;&#x2F;strong&gt;：选择 &lt;code&gt;pathname&lt;&#x2F;code&gt;，将讨论与博客页面进行映射。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;主题&lt;&#x2F;strong&gt;：选择 &amp;quot;light&amp;quot; 或其他与你博客匹配的主题。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;语言&lt;&#x2F;strong&gt;：设置为 &lt;code&gt;zh-CN&lt;&#x2F;code&gt;（中文）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;懒加载&lt;&#x2F;strong&gt;：启用以优化性能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;复制生成的嵌入代码。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;di-er-bu-geng-xin-bo-ke-mo-ban&quot;&gt;第二步：更新博客模板&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;code&gt;templates&lt;&#x2F;code&gt; 文件夹中的 &lt;code&gt;blog.html&lt;&#x2F;code&gt; 模板文件。&lt;&#x2F;li&gt;
&lt;li&gt;添加以下代码：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;giscus&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stylesheet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;static&#x2F;css&#x2F;style_new.css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;giscus.app&#x2F;client.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-repo&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Polly2014&#x2F;polly2014.github.io&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-repo-id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;R_kgDOL45duA&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-category&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Announcements&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-category-id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DIC_kwDOL45duM4CnjaK&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-mapping&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pathname&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-strict&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-reactions-enabled&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-emit-metadata&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-input-position&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bottom&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-theme&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;light&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-lang&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;zh-CN&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-loading&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lazy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;crossorigin&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;anonymous&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;async&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;di-san-bu-zi-ding-yi-yang-shi&quot;&gt;第三步：自定义样式&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;code&gt;static&#x2F;css&lt;&#x2F;code&gt; 文件夹中的 &lt;code&gt;style_new.css&lt;&#x2F;code&gt; 文件。&lt;&#x2F;li&gt;
&lt;li&gt;添加以下样式以确保 Giscus 与博客主题一致：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;giscus &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    background-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#f2f2f2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    font-family: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Arial&lt;&#x2F;span&gt;&lt;span&gt;, sans-serif;
&lt;&#x2F;span&gt;&lt;span&gt;    color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#333&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    border-radius: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    box-shadow: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 4px 6px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    margin-top: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;giscus-frame &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    border: none;
&lt;&#x2F;span&gt;&lt;span&gt;    width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;di-si-bu-ce-shi-yu-bu-shu&quot;&gt;第四步：测试与部署&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;使用 Zola 编译你的博客。&lt;&#x2F;li&gt;
&lt;li&gt;将更新后的 &lt;code&gt;public&lt;&#x2F;code&gt; 文件夹推送到 &lt;code&gt;polly2014.github.io&lt;&#x2F;code&gt; 仓库。&lt;&#x2F;li&gt;
&lt;li&gt;访问你的博客，验证 Giscus 评论系统是否正常工作。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;ping-lun-xi-tong-dui-bi-fen-xi&quot;&gt;评论系统对比分析&lt;&#x2F;h2&gt;
&lt;p&gt;除了 Giscus，以下是其他常见评论系统的对比：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;评论系统&lt;&#x2F;th&gt;&lt;th&gt;特点&lt;&#x2F;th&gt;&lt;th&gt;优点&lt;&#x2F;th&gt;&lt;th&gt;缺点&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Giscus&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;基于 GitHub Discussions，支持 Markdown 和多语言。&lt;&#x2F;td&gt;&lt;td&gt;免费、无广告、与 GitHub 集成。&lt;&#x2F;td&gt;&lt;td&gt;需要 GitHub 账号，适合技术博客。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Disqus&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;流行的第三方评论系统，支持社交登录。&lt;&#x2F;td&gt;&lt;td&gt;易于集成，功能丰富。&lt;&#x2F;td&gt;&lt;td&gt;免费版有广告，隐私性较差。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Commento&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;开源评论系统，可自托管。&lt;&#x2F;td&gt;&lt;td&gt;无广告，隐私性好。&lt;&#x2F;td&gt;&lt;td&gt;自托管需要服务器资源。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Remark42&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;开源自托管，支持匿名评论和社交登录。&lt;&#x2F;td&gt;&lt;td&gt;无广告，支持多种登录方式。&lt;&#x2F;td&gt;&lt;td&gt;自托管需要维护，功能较简单。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Utterances&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;基于 GitHub Issues，轻量化。&lt;&#x2F;td&gt;&lt;td&gt;免费、无广告、与 GitHub 集成。&lt;&#x2F;td&gt;&lt;td&gt;需要 GitHub 账号，功能较简单。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;xiao-guo&quot;&gt;效果&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;integrate-giscus-into-blog&#x2F;Blog_Comment.png&quot; alt=&quot;Blog Comment&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过本文的步骤，即可轻松在 Zola 博客中集成 Giscus 评论系统，并为用户提供现代化的互动体验。根据你的需求，也可以选择其他评论系统。&lt;&#x2F;p&gt;
&lt;p&gt;欢迎在评论区分享你的想法或提出问题！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Coding with AI Coder系列（一）：利用OpenHands优化Zola博客分类系统</title>
        <published>2025-03-05T00:00:00+00:00</published>
        <updated>2025-03-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/optimize-blog-category-with-openhands/" type="text/html"/>
        <id>https://polly2014.github.io/optimize-blog-category-with-openhands/</id>
        
        <content type="html">&lt;p&gt;在这篇文章中，我们记录了如何利用OpenHands优化Zola博客的分类系统，将原有的tags系统替换为更合理的category系统。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bei-jing&quot;&gt;背景&lt;&#x2F;h2&gt;
&lt;p&gt;原有的博客系统使用tags来组织内容，但这种方式在分类明确的情况下显得不够直观。我们决定引入category系统，每篇博文对应一个category，同时保留tags作为辅助标签。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-xian-bu-zou&quot;&gt;实现步骤&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-li-yong-openhandssheng-cheng-categorylie-biao&quot;&gt;1. 利用OpenHands生成category列表&lt;&#x2F;h3&gt;
&lt;p&gt;我们通过与OpenHands的对话，生成了一个初步的category列表。以下是与OpenHands的对话示例：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Prompt:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;遍历content&#x2F;blog目录下的所有博文，根据标题和内容生成一个初步的category列表，分类包括：Technology, Essay, Life, Academic, Other。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;OpenHands响应:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;已完成分类：
&lt;&#x2F;span&gt;&lt;span&gt;- Technology: 技术相关内容，如源码解析、系统设计等。
&lt;&#x2F;span&gt;&lt;span&gt;- Essay: 随笔和感悟。
&lt;&#x2F;span&gt;&lt;span&gt;- Life: 旅行和生活。
&lt;&#x2F;span&gt;&lt;span&gt;- Academic: 学术相关内容。
&lt;&#x2F;span&gt;&lt;span&gt;- Other: 其他内容。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-zi-dong-geng-xin-markdownwen-jian&quot;&gt;2. 自动更新Markdown文件&lt;&#x2F;h3&gt;
&lt;p&gt;我们继续与OpenHands对话，自动为每篇博文的Markdown文件添加了&lt;code&gt;category&lt;&#x2F;code&gt;字段，并将其移动到&lt;code&gt;[taxonomies]&lt;&#x2F;code&gt;部分。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Prompt:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;为content&#x2F;blog目录下的所有Markdown文件添加category字段，并将其移动到[taxonomies]部分。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;OpenHands响应:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;所有Markdown文件已更新，category字段已成功添加到[taxonomies]部分。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-xiu-gai-mo-ban-wen-jian&quot;&gt;3. 修改模板文件&lt;&#x2F;h3&gt;
&lt;p&gt;我们通过OpenHands的模板编辑功能，修改了以下模板文件以支持category的展示：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Prompt:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;修改tags&#x2F;list.html，将tags重命名为category，并展示所有分类。
&lt;&#x2F;span&gt;&lt;span&gt;修改tags&#x2F;single.html，展示单个category下的所有文章。
&lt;&#x2F;span&gt;&lt;span&gt;修改blog-list.html，在文章列表中加入category、tags、author、访问量等信息。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;OpenHands响应:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;tags&#x2F;list.html, tags&#x2F;single.html, blog-list.html文件已成功修改，支持category的展示，并在blog-list.html中加入了更多信息：
&lt;&#x2F;span&gt;&lt;span&gt;- Category: 显示文章所属的分类。
&lt;&#x2F;span&gt;&lt;span&gt;- Tags: 展示文章的标签。
&lt;&#x2F;span&gt;&lt;span&gt;- Author: 显示作者信息。
&lt;&#x2F;span&gt;&lt;span&gt;- Views: 显示文章的访问量。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;ce-shi-he-yan-zheng&quot;&gt;测试和验证&lt;&#x2F;h2&gt;
&lt;p&gt;完成修改后，我们启动本地服务器，验证了分类系统的效果。新的分类系统使博客内容更加清晰，用户可以更方便地浏览感兴趣的内容。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过OpenHands的强大功能，我们成功构建了一个更合理的分类系统，为博客的内容组织和用户体验带来了显著提升。如果你也在使用Zola博客系统，希望这篇文章能为你提供一些参考。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>GitHub Actions: 实现Zola博客的自动化部署</title>
        <published>2025-03-04T00:00:00+00:00</published>
        <updated>2025-03-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/blog-automation-with-github-actions/" type="text/html"/>
        <id>https://polly2014.github.io/blog-automation-with-github-actions/</id>
        
        <content type="html">&lt;p&gt;管理一个 Zola 博客是一件令人愉快的事情，但手动构建和部署博客的步骤可能会随着时间的推移变得繁琐。在本文中，我们将探讨如何利用 &lt;strong&gt;GitHub Actions&lt;&#x2F;strong&gt; 来完全自动化 Zola 博客的构建和部署过程。这种方法消除了手动干预的需要，使得工作流程更加高效且无错误。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dang-qian-gong-zuo-liu-cheng-de-tiao-zhan&quot;&gt;当前工作流程的挑战&lt;&#x2F;h2&gt;
&lt;p&gt;之前，管理 Zola 博客的工作流程包括以下步骤：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;www.polly.com&lt;&#x2F;code&gt; 仓库中修改博客内容或配置。&lt;&#x2F;li&gt;
&lt;li&gt;本地运行 &lt;code&gt;zola build&lt;&#x2F;code&gt; 生成 &lt;code&gt;public&lt;&#x2F;code&gt; 文件夹中的静态文件。&lt;&#x2F;li&gt;
&lt;li&gt;手动将 &lt;code&gt;public&lt;&#x2F;code&gt; 文件夹的内容复制到 &lt;code&gt;polly2014.github.io&lt;&#x2F;code&gt; 仓库。&lt;&#x2F;li&gt;
&lt;li&gt;将更改推送到 GitHub，从而触发 GitHub Pages 部署。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;虽然这种工作流程可以正常工作，但它耗时且容易出错，尤其是忘记构建或推送更改时。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wei-shi-yao-xuan-ze-github-actions&quot;&gt;为什么选择 GitHub Actions？&lt;&#x2F;h2&gt;
&lt;p&gt;GitHub Actions 是一个强大的 CI&#x2F;CD 工具，允许直接在 GitHub 仓库中自动化任务。使用 GitHub Actions，可以：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;自动化构建和部署过程。&lt;&#x2F;li&gt;
&lt;li&gt;确保部署管道的一致性。&lt;&#x2F;li&gt;
&lt;li&gt;节省时间并减少人为错误的风险。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;github-pages-yu-github-actions-de-dui-bi&quot;&gt;GitHub Pages 与 GitHub Actions 的对比&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;特性&lt;&#x2F;th&gt;&lt;th&gt;GitHub Pages&lt;&#x2F;th&gt;&lt;th&gt;GitHub Actions&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;自动化程度&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;需要手动构建和推送&lt;&#x2F;td&gt;&lt;td&gt;完全自动化&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;灵活性&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;仅支持静态文件部署&lt;&#x2F;td&gt;&lt;td&gt;支持复杂的构建和部署逻辑&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;适用场景&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;简单的静态网站&lt;&#x2F;td&gt;&lt;td&gt;需要频繁更新或复杂流程的项目&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;集成能力&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;无法轻松集成其他工具&lt;&#x2F;td&gt;&lt;td&gt;可集成测试、代码检查等工具&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;学习成本&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;低&lt;&#x2F;td&gt;&lt;td&gt;需要编写和配置 Workflow 文件&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;如果博客更新频率较低且不需要复杂的构建流程，GitHub Pages 是一个简单的选择。但如果希望提高效率并减少手动操作，GitHub Actions 是更好的选择。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yong-github-actions-she-zhi-zola-zi-dong-hua-bu-shu&quot;&gt;使用 GitHub Actions 设置 Zola 自动化部署&lt;&#x2F;h2&gt;
&lt;p&gt;以下是设置 GitHub Actions 自动化部署 Zola 博客的步骤。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;di-yi-bu-chuang-jian-workflow-wen-jian&quot;&gt;第一步：创建 Workflow 文件&lt;&#x2F;h3&gt;
&lt;p&gt;在 &lt;code&gt;www.polly.com&lt;&#x2F;code&gt; 仓库中，创建一个新文件 &lt;code&gt;.github&#x2F;workflows&#x2F;deploy.yml&lt;&#x2F;code&gt;，内容如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deploy Zola Blog
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 监听 main 分支的提交
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build-and-deploy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Checkout Source Code
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;checkout@v3
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetch-depth&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Install Zola
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        curl -sSf https:&#x2F;&#x2F;sh.rustup.rs | sh -s -- -y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        export PATH=&amp;quot;$HOME&#x2F;.cargo&#x2F;bin:$PATH&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        cargo install zola
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Build Zola Site
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;zola build
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deploy to polly2014.github.io
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;peaceiris&#x2F;actions-gh-pages@v3
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github_token&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.GITHUB_TOKEN }}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publish_dir&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;public
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;external_repository&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;polly2014&#x2F;polly2014.github.io
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publish_branch&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;di-er-bu-workflow-de-guan-jian-dian&quot;&gt;第二步：Workflow 的关键点&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;触发条件&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Workflow 在每次推送到 &lt;code&gt;main&lt;&#x2F;code&gt; 分支时触发。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 Zola&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Rust 的包管理工具 &lt;code&gt;cargo&lt;&#x2F;code&gt; 安装 Zola。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构建站点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;运行 &lt;code&gt;zola build&lt;&#x2F;code&gt; 命令生成 &lt;code&gt;public&lt;&#x2F;code&gt; 文件夹中的静态文件。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;部署&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;peaceiris&#x2F;actions-gh-pages&lt;&#x2F;code&gt; Action 将 &lt;code&gt;public&lt;&#x2F;code&gt; 文件夹的内容部署到 &lt;code&gt;polly2014.github.io&lt;&#x2F;code&gt; 仓库。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;di-san-bu-ce-shi-workflow&quot;&gt;第三步：测试 Workflow&lt;&#x2F;h3&gt;
&lt;p&gt;提交 Workflow 文件后，对博客进行更改并推送到 &lt;code&gt;main&lt;&#x2F;code&gt; 分支。GitHub Actions 将自动：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;检出源代码。&lt;&#x2F;li&gt;
&lt;li&gt;安装 Zola。&lt;&#x2F;li&gt;
&lt;li&gt;构建站点。&lt;&#x2F;li&gt;
&lt;li&gt;将生成的文件部署到 &lt;code&gt;polly2014.github.io&lt;&#x2F;code&gt; 仓库。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;可以在仓库的 &lt;strong&gt;Actions&lt;&#x2F;strong&gt; 标签中监控 Workflow 的进度。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xin-gong-zuo-liu-cheng-de-you-shi&quot;&gt;新工作流程的优势&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自动化&lt;&#x2F;strong&gt;：无需手动构建和复制文件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;&#x2F;strong&gt;：确保每次部署过程都相同。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;高效性&lt;&#x2F;strong&gt;：节省时间并减少错误风险。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;jie-lun&quot;&gt;结论&lt;&#x2F;h2&gt;
&lt;p&gt;通过将GitHub Actions集成到Zola博客工作流程中，可以实现完全自动化的构建和部署管道。这不仅简化了工作流程，还让你能够专注于真正重要的事情——创作优质内容。&lt;&#x2F;p&gt;
&lt;p&gt;如果还没有尝试过 GitHub Actions，现在正是探索其功能并将您的 Zola 博客提升到新水平的最佳时机！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>使用Kubernetes+Azure AAD搭建多租户版OpenHands系统</title>
        <published>2025-03-02T00:00:00+00:00</published>
        <updated>2025-03-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/multi-tenant-openhands-guidance/" type="text/html"/>
        <id>https://polly2014.github.io/multi-tenant-openhands-guidance/</id>
        
        <content type="html">&lt;h2 id=&quot;gai-shu&quot;&gt;概述&lt;&#x2F;h2&gt;
&lt;p&gt;本教程将指导您如何使用 OpenHands、Kubernetes、Ingress 和账户管理系统（接入微软 Azure Active Directory）搭建一个多租户版的 OpenHands 系统。通过本教程，您将实现：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;多用户支持&lt;&#x2F;strong&gt;：每个用户登录后访问自己的 OpenHands 实例。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;身份验证&lt;&#x2F;strong&gt;：通过 Azure AD 实现用户身份验证。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;动态实例分配&lt;&#x2F;strong&gt;：根据用户动态分配 OpenHands 实例。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;数据隔离&lt;&#x2F;strong&gt;：确保每个用户的实例和数据互不干扰。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;xi-tong-jia-gou&quot;&gt;系统架构&lt;&#x2F;h2&gt;
&lt;p&gt;系统架构如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;用户通过浏览器访问系统。&lt;&#x2F;li&gt;
&lt;li&gt;系统引导用户通过 Azure AD 登录。&lt;&#x2F;li&gt;
&lt;li&gt;登录成功后，系统根据用户 ID 查询或分配 OpenHands 实例。&lt;&#x2F;li&gt;
&lt;li&gt;用户被路由到对应的 OpenHands 实例。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[用户] --&amp;gt; [账户管理系统] --&amp;gt; [Azure AD 登录]
&lt;&#x2F;span&gt;&lt;span&gt;       --&amp;gt; [用户实例映射表] --&amp;gt; [Ingress&#x2F;反向代理] --&amp;gt; [OpenHands 实例]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zhun-bei-gong-zuo&quot;&gt;准备工作&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Docker 镜像&lt;&#x2F;strong&gt;：确保 OpenHands 的 Docker 镜像已构建并可用（例如 &lt;code&gt;docker.all-hands.dev&#x2F;all-hands-ai&#x2F;openhands:0.27&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes 集群&lt;&#x2F;strong&gt;：确保 Kubernetes 集群已配置好（可以使用 Minikube、Kind 或云服务如 GKE、EKS 等）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;kubectl 工具&lt;&#x2F;strong&gt;：确保本地安装了 &lt;code&gt;kubectl&lt;&#x2F;code&gt; 并已连接到 Kubernetes 集群。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Azure AD 应用&lt;&#x2F;strong&gt;：在 Azure AD 中注册一个应用，用于用户身份验证。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bu-zou-1-bu-shu-openhands-dao-kubernetes&quot;&gt;步骤 1: 部署 OpenHands 到 Kubernetes&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;chuang-jian-kubernetes-pei-zhi-wen-jian&quot;&gt;创建 Kubernetes 配置文件&lt;&#x2F;h3&gt;
&lt;p&gt;以下是一个示例的 Kubernetes 配置文件，包含 Deployment 和 Service：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;openhands-deployment-yaml&quot;&gt;&lt;code&gt;openhands-deployment.yaml&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands-deployment
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 启动 3 个实例，可以根据需要调整
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker.all-hands.dev&#x2F;all-hands-ai&#x2F;openhands:0.27
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3000
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SANDBOX_RUNTIME_CONTAINER_IMAGE
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker.all-hands.dev&#x2F;all-hands-ai&#x2F;runtime:0.27-nikolaik&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;LOG_ALL_EVENTS
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumeMounts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands-state
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mountPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;.openhands-state
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands-state
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emptyDir&lt;&#x2F;span&gt;&lt;span&gt;: {}
&lt;&#x2F;span&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands-service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;protocol&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TCP
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;targetPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3000
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;LoadBalancer
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bu-shu-dao-kubernetes&quot;&gt;部署到 Kubernetes&lt;&#x2F;h3&gt;
&lt;p&gt;将上述配置文件保存为 &lt;code&gt;openhands-deployment.yaml&lt;&#x2F;code&gt;，然后运行以下命令：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; openhands-deployment.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;yan-zheng-bu-shu&quot;&gt;验证部署&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;检查 Pod 是否运行正常：&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get pods
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;检查 Service 是否分配了外部 IP（如果使用 LoadBalancer 类型）：&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; get service openhands-service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
您可以通过分配的外部 IP 访问 OpenHands 实例。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bu-zou-2-pei-zhi-ingress-shi-xian-lu-you&quot;&gt;步骤 2: 配置 Ingress 实现路由&lt;&#x2F;h2&gt;
&lt;p&gt;使用 Kubernetes 的 Ingress 控制器，通过不同的子路径或子域名分配实例。例如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户 A 访问 &lt;code&gt;http:&#x2F;&#x2F;example.com&#x2F;user-a&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;用户 B 访问 &lt;code&gt;http:&#x2F;&#x2F;example.com&#x2F;user-b&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;shi-li-ingress-pei-zhi&quot;&gt;示例 Ingress 配置&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;networking.k8s.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ingress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands-ingress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example.com
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;paths&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;user-a
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pathType&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Prefix
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;backend&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands-user-a
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;user-b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pathType&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Prefix
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;backend&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands-user-b
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将上述配置保存为 &lt;code&gt;openhands-ingress.yaml&lt;&#x2F;code&gt;，然后运行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kubectl&lt;&#x2F;span&gt;&lt;span&gt; apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; openhands-ingress.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bu-zou-3-jie-ru-azure-ad-shi-xian-shen-fen-yan-zheng&quot;&gt;步骤 3: 接入 Azure AD 实现身份验证&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;zhu-ce-azure-ad-ying-yong&quot;&gt;注册 Azure AD 应用&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;登录 &lt;a href=&quot;https:&#x2F;&#x2F;portal.azure.com&quot;&gt;Azure Portal&lt;&#x2F;a&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;在 Azure AD 中注册一个新的应用：
&lt;ul&gt;
&lt;li&gt;设置重定向 URI，例如 &lt;code&gt;https:&#x2F;&#x2F;example.com&#x2F;auth&#x2F;callback&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;获取应用的 &lt;code&gt;Client ID&lt;&#x2F;code&gt; 和 &lt;code&gt;Client Secret&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;配置 API 权限，确保应用有 &lt;code&gt;openid&lt;&#x2F;code&gt; 和 &lt;code&gt;profile&lt;&#x2F;code&gt; 权限。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;pei-zhi-shen-fen-yan-zheng-zhong-jian-jian&quot;&gt;配置身份验证中间件&lt;&#x2F;h3&gt;
&lt;p&gt;在账户管理系统中，使用支持 OAuth 2.0 或 OIDC 的库（如 Python 的 &lt;code&gt;authlib&lt;&#x2F;code&gt;）来处理用户登录。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-li-dai-ma-python-flask-ying-yong&quot;&gt;示例代码（Python Flask 应用）&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;flask &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Flask, redirect, url_for, session
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;authlib.integrations.flask_client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;OAuth
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;app = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Flask&lt;&#x2F;span&gt;&lt;span&gt;(__name__)
&lt;&#x2F;span&gt;&lt;span&gt;app.secret_key = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random_secret_key&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;oauth = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OAuth&lt;&#x2F;span&gt;&lt;span&gt;(app)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;azure = oauth.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;azure&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client_id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;YOUR_CLIENT_ID&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client_secret&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;YOUR_CLIENT_SECRET&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;server_metadata_url&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;login.microsoftonline.com&#x2F;YOUR_TENANT_ID&#x2F;v2.0&#x2F;.well-known&#x2F;openid-configuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client_kwargs&lt;&#x2F;span&gt;&lt;span&gt;={
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openid profile email&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Welcome to OpenHands! &amp;lt;a href=&amp;quot;&#x2F;login&amp;quot;&amp;gt;Login with Azure AD&amp;lt;&#x2F;a&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;login&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;login&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    redirect_uri = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url_for&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;auth_callback&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_external&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;azure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;authorize_redirect&lt;&#x2F;span&gt;&lt;span&gt;(redirect_uri)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;auth&#x2F;callback&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;auth_callback&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    token = azure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;authorize_access_token&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    user_info = token.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;userinfo&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    session[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = user_info
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span&gt;{user_info[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;:
&lt;&#x2F;span&gt;&lt;span&gt;    app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bu-zou-4-yong-hu-yu-openhands-shi-li-de-ying-she&quot;&gt;步骤 4: 用户与 OpenHands 实例的映射&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;shu-ju-ku-cun-chu-ying-she-guan-xi&quot;&gt;数据库存储映射关系&lt;&#x2F;h3&gt;
&lt;p&gt;使用数据库（如 PostgreSQL 或 MongoDB）存储用户与实例的映射。例如：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;用户 ID (Azure AD)&lt;&#x2F;th&gt;&lt;th&gt;OpenHands 实例 URL&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;user1@domain.com&lt;&#x2F;td&gt;&lt;td&gt;http:&#x2F;&#x2F;openhands-1.com&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;user2@domain.com&lt;&#x2F;td&gt;&lt;td&gt;http:&#x2F;&#x2F;openhands-2.com&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;user3@domain.com&lt;&#x2F;td&gt;&lt;td&gt;http:&#x2F;&#x2F;openhands-3.com&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;dong-tai-lu-you&quot;&gt;动态路由&lt;&#x2F;h3&gt;
&lt;p&gt;使用 Ingress 或反向代理（如 Nginx）根据用户的身份动态路由到对应的实例。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-li-nginx-pei-zhi&quot;&gt;示例 Nginx 配置&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;nginx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nginx &quot;&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    listen 80;
&lt;&#x2F;span&gt;&lt;span&gt;    server_name example.com;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_pass http:&#x2F;&#x2F;openhands-instance-$user_id;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zhu-yi-shi-xiang&quot;&gt;注意事项&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;单用户限制&lt;&#x2F;strong&gt;：OpenHands 默认是单用户模式。如果需要支持多用户共享一个实例，可能需要对 OpenHands 的代码进行修改。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;确保所有通信使用 HTTPS。&lt;&#x2F;li&gt;
&lt;li&gt;配置 Azure AD 的权限范围，避免过多权限暴露。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;扩展性&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 Kubernetes 的自动扩展功能，根据用户数量动态扩展实例。&lt;&#x2F;li&gt;
&lt;li&gt;定期清理未使用的实例，优化资源利用。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;通过本教程，您可以成功搭建一个多租户版的 OpenHands 系统。如果您有任何问题或需要进一步的帮助，请随时联系！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>深度解析OpenHands MicroAgent</title>
        <published>2025-03-01T00:00:00+00:00</published>
        <updated>2025-03-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-micro-agent/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-micro-agent/</id>
        
        <content type="html">&lt;h2 id=&quot;yin-yan&quot;&gt;引言&lt;&#x2F;h2&gt;
&lt;p&gt;MicroAgent 是 OpenHands 系统中的一个重要模块，旨在通过模块化的方式提供特定的知识、任务和仓库相关的功能支持。本文将从 MicroAgent 的分类、作用、协作方式、源码实现以及测试覆盖等多个维度，全面解析其设计理念和技术实现。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;1-microagent-de-fen-lei-yu-zuo-yong&quot;&gt;&lt;strong&gt;1. MicroAgent 的分类与作用&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;MicroAgent 分为三大类，每一类都有其特定的功能和应用场景：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-knowledgemicroagent&quot;&gt;&lt;strong&gt;(1) KnowledgeMicroAgent&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;&#x2F;strong&gt;：提供特定领域的知识支持，例如编程语言的最佳实践、框架指南、常见模式和工具使用等。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;触发机制&lt;&#x2F;strong&gt;：通过关键词触发。例如，当用户输入包含特定关键词的消息时，KnowledgeMicroAgent 会被激活。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;典型场景&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户询问某个框架的最佳实践。&lt;&#x2F;li&gt;
&lt;li&gt;提供工具的使用指南。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-repomicroagent&quot;&gt;&lt;strong&gt;(2) RepoMicroAgent&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;&#x2F;strong&gt;：专注于仓库（Repository）相关的知识和指导，例如团队的代码规范、项目特定的工作流和文档引用。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;加载方式&lt;&#x2F;strong&gt;：从 &lt;code&gt;.openhands&#x2F;microagents&#x2F;repo.md&lt;&#x2F;code&gt; 文件中加载，或者从遗留的 &lt;code&gt;.openhands_instructions&lt;&#x2F;code&gt; 文件中加载。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;典型场景&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;提供项目特定的开发规范。&lt;&#x2F;li&gt;
&lt;li&gt;自动加载与当前仓库相关的文档和说明。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-taskmicroagent&quot;&gt;&lt;strong&gt;(3) TaskMicroAgent&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;&#x2F;strong&gt;：专注于任务驱动的操作，例如执行特定的任务或工作流。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;典型场景&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;自动化执行某些重复性任务。&lt;&#x2F;li&gt;
&lt;li&gt;提供任务的分步指导。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;2-microagent-de-xie-zuo-fang-shi&quot;&gt;&lt;strong&gt;2. MicroAgent 的协作方式&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;MicroAgent 的协作方式体现在以下几个方面：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-mo-kuai-hua-she-ji&quot;&gt;&lt;strong&gt;(1) 模块化设计&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;每个 MicroAgent 都是一个独立的模块，具有自己的元数据（Metadata）和内容（Content）。这种模块化设计使得 MicroAgent 可以独立开发、测试和部署。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-tong-yi-jia-zai-yu-guan-li&quot;&gt;&lt;strong&gt;(2) 统一加载与管理&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;通过 &lt;code&gt;load_microagents_from_dir&lt;&#x2F;code&gt; 函数，系统可以从指定目录加载所有类型的 MicroAgent，并将它们分类存储为字典（&lt;code&gt;repo_agents&lt;&#x2F;code&gt;、&lt;code&gt;knowledge_agents&lt;&#x2F;code&gt;、&lt;code&gt;task_agents&lt;&#x2F;code&gt;）。这确保了 MicroAgent 的统一管理和高效加载。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-dong-tai-hong-fa-yu-zhi-xing&quot;&gt;&lt;strong&gt;(3) 动态触发与执行&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;触发机制&lt;&#x2F;strong&gt;：例如，KnowledgeMicroAgent 会根据用户输入的关键词动态触发。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;执行机制&lt;&#x2F;strong&gt;：TaskMicroAgent 可以根据任务需求执行特定的操作。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-yu-codeact-agent-de-ji-cheng&quot;&gt;&lt;strong&gt;(4) 与 CodeAct Agent 的集成&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;MicroAgent 是 CodeAct Agent 的重要组成部分。CodeAct Agent 可以调用 MicroAgent 提供的知识或任务支持，从而增强其功能。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;3-yuan-ma-jie-xi&quot;&gt;&lt;strong&gt;3. 源码解析&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;以下是对 MicroAgent 核心源码的解析：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-microagent-de-ji-lei&quot;&gt;&lt;strong&gt;(1) MicroAgent 的基类&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;BaseMicroAgent&lt;&#x2F;code&gt; 是所有 MicroAgent 的基类，定义了 MicroAgent 的基本结构和加载逻辑。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BaseMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    name: str
&lt;&#x2F;span&gt;&lt;span&gt;    content: str
&lt;&#x2F;span&gt;&lt;span&gt;    metadata: MicroAgentMetadata
&lt;&#x2F;span&gt;&lt;span&gt;    source: str  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 文件路径
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: MicroAgentType
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;classmethod
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cls&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: Union[str, Path], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file_content&lt;&#x2F;span&gt;&lt;span&gt;: str | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseMicroAgent&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 从文件加载 MicroAgent
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;核心字段&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;&#x2F;code&gt;：MicroAgent 的名称。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;content&lt;&#x2F;code&gt;：MicroAgent 的内容。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;metadata&lt;&#x2F;code&gt;：MicroAgent 的元数据，包括类型、触发器等。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;type&lt;&#x2F;code&gt;：MicroAgent 的类型（Knowledge、Repo 或 Task）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;加载逻辑&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;从文件中读取内容。&lt;&#x2F;li&gt;
&lt;li&gt;根据元数据的类型动态创建对应的子类（&lt;code&gt;KnowledgeMicroAgent&lt;&#x2F;code&gt;、&lt;code&gt;RepoMicroAgent&lt;&#x2F;code&gt; 或 &lt;code&gt;TaskMicroAgent&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-knowledgemicroagent&quot;&gt;&lt;strong&gt;(2) KnowledgeMicroAgent&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;KnowledgeMicroAgent&lt;&#x2F;code&gt; 提供了关键词触发的功能。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KnowledgeMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;match_trigger&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; str | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 匹配消息中的触发器
&lt;&#x2F;span&gt;&lt;span&gt;        message = message.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lower&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;trigger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.triggers:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;trigger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lower&lt;&#x2F;span&gt;&lt;span&gt;() in message:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;trigger
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;triggers&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; list[str]:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.metadata.triggers
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关键词匹配&lt;&#x2F;strong&gt;：通过 &lt;code&gt;match_trigger&lt;&#x2F;code&gt; 方法，判断用户输入是否包含触发关键词。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;触发器列表&lt;&#x2F;strong&gt;：从元数据中提取触发器。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-repomicroagent&quot;&gt;&lt;strong&gt;(3) RepoMicroAgent&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;RepoMicroAgent&lt;&#x2F;code&gt; 专注于仓库相关的知识。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RepoMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加载方式&lt;&#x2F;strong&gt;：从 &lt;code&gt;.openhands&#x2F;microagents&#x2F;repo.md&lt;&#x2F;code&gt; 或 &lt;code&gt;.openhands_instructions&lt;&#x2F;code&gt; 文件中加载。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;&#x2F;strong&gt;：提供项目特定的开发规范和文档。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-taskmicroagent&quot;&gt;&lt;strong&gt;(4) TaskMicroAgent&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;TaskMicroAgent&lt;&#x2F;code&gt; 专注于任务驱动的操作。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TaskMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;&#x2F;strong&gt;：执行特定的任务或工作流。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-microagent-de-jia-zai-han-shu&quot;&gt;&lt;strong&gt;(5) MicroAgent 的加载函数&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;load_microagents_from_dir&lt;&#x2F;code&gt; 函数用于从指定目录加载所有 MicroAgent。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;load_microagents_from_dir&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;microagent_dir&lt;&#x2F;span&gt;&lt;span&gt;: Union[str, Path]) -&amp;gt; tuple[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;]:
&lt;&#x2F;span&gt;&lt;span&gt;    repo_agents = {}
&lt;&#x2F;span&gt;&lt;span&gt;    knowledge_agents = {}
&lt;&#x2F;span&gt;&lt;span&gt;    task_agents = {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;microagent_dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rglob&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*.md&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;):
&lt;&#x2F;span&gt;&lt;span&gt;        agent = BaseMicroAgent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(file)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span&gt;(agent, RepoMicroAgent):
&lt;&#x2F;span&gt;&lt;span&gt;            repo_agents[agent.name] = agent
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span&gt;(agent, KnowledgeMicroAgent):
&lt;&#x2F;span&gt;&lt;span&gt;            knowledge_agents[agent.name] = agent
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span&gt;(agent, TaskMicroAgent):
&lt;&#x2F;span&gt;&lt;span&gt;            task_agents[agent.name] = agent
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;repo_agents, knowledge_agents, task_agents
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：从目录中递归加载所有 &lt;code&gt;.md&lt;&#x2F;code&gt; 文件，并根据类型分类存储。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;返回值&lt;&#x2F;strong&gt;：包含 &lt;code&gt;repo_agents&lt;&#x2F;code&gt;、&lt;code&gt;knowledge_agents&lt;&#x2F;code&gt; 和 &lt;code&gt;task_agents&lt;&#x2F;code&gt; 的字典。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;4-ce-shi-fu-gai&quot;&gt;&lt;strong&gt;4. 测试覆盖&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;MicroAgent 的测试覆盖包括以下几个方面：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-ji-ben-gong-neng-ce-shi&quot;&gt;&lt;strong&gt;(1) 基本功能测试&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;测试 MicroAgent 的加载功能。&lt;&#x2F;li&gt;
&lt;li&gt;验证不同类型的 MicroAgent 是否正确分类。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-te-shu-chang-jing-ce-shi&quot;&gt;&lt;strong&gt;(2) 特殊场景测试&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;测试嵌套目录中的 MicroAgent 加载。&lt;&#x2F;li&gt;
&lt;li&gt;测试带有遗留文件（&lt;code&gt;.openhands_instructions&lt;&#x2F;code&gt;）的加载。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-yi-chang-chu-li-ce-shi&quot;&gt;&lt;strong&gt;(3) 异常处理测试&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;测试无效类型的 MicroAgent 是否抛出异常。&lt;&#x2F;li&gt;
&lt;li&gt;测试缺失文件的场景。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;5-microagent-de-guan-xi-yu-xie-zuo&quot;&gt;&lt;strong&gt;5. MicroAgent 的关系与协作&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;MicroAgent 之间的关系是松耦合的，每个 MicroAgent 独立提供特定的功能。它们通过以下方式协作：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;统一管理&lt;&#x2F;strong&gt;：通过 &lt;code&gt;load_microagents_from_dir&lt;&#x2F;code&gt; 函数统一加载和管理。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;动态调用&lt;&#x2F;strong&gt;：CodeAct Agent 根据需求动态调用不同类型的 MicroAgent。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能互补&lt;&#x2F;strong&gt;：KnowledgeMicroAgent 提供知识支持，RepoMicroAgent 提供项目规范，TaskMicroAgent 执行具体任务。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;&lt;strong&gt;总结&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;MicroAgent 是 OpenHands 系统中一个强大且灵活的模块，通过模块化设计和动态加载机制，为系统提供了知识支持、任务执行和仓库管理等多种功能。其与 CodeAct Agent 的深度集成，使得 OpenHands 能够更高效地满足用户的多样化需求。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 二次开发系列（一）：前端重构设计规划 - GPT-4o版</title>
        <published>2025-02-26T00:00:00+00:00</published>
        <updated>2025-02-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-redevelopment-frontend-001/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-redevelopment-frontend-001/</id>
        
        <content type="html">&lt;h3 id=&quot;1-she-ji-feng-ge-yu-zhu-ti&quot;&gt;1. &lt;strong&gt;设计风格与主题&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;极客风格特点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;暗色主题&lt;&#x2F;strong&gt;：使用深色背景（如黑色、深灰色）搭配高对比度的亮色（如绿色、蓝色、紫色）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;代码元素&lt;&#x2F;strong&gt;：界面中可以融入代码风格的设计，比如终端样式、代码块、矩阵风格的动画等。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;简洁高效&lt;&#x2F;strong&gt;：去除冗余的装饰，突出功能性和科技感。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;动态效果&lt;&#x2F;strong&gt;：使用酷炫的动画和交互效果，比如按钮的悬停动画、加载时的代码流动效果等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;灵感来源&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;电影《黑客帝国》的矩阵风格。&lt;&#x2F;li&gt;
&lt;li&gt;开发者工具（如VSCode、JetBrains IDE）的界面设计。&lt;&#x2F;li&gt;
&lt;li&gt;极简主义的科技风网站。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;2-ji-zhu-zhan-xuan-ze&quot;&gt;2. &lt;strong&gt;技术栈选择&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;前端框架&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt;：当前项目已经使用React，可以继续沿用。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Next.js&lt;&#x2F;strong&gt;：如果需要服务端渲染和更好的SEO支持，可以考虑使用Next.js。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UI库&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tailwind CSS&lt;&#x2F;strong&gt;：快速构建自定义样式，支持暗色主题和响应式设计。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Chakra UI&lt;&#x2F;strong&gt;：提供极简的组件库，支持主题定制。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Framer Motion&lt;&#x2F;strong&gt;：用于实现复杂的动画效果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;图形与动画&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Three.js&lt;&#x2F;strong&gt;：用于3D效果，比如动态背景或酷炫的3D模型。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Lottie&lt;&#x2F;strong&gt;：用于加载和展示高质量的动画。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;GSAP&lt;&#x2F;strong&gt;：强大的动画库，适合实现复杂的交互效果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-gong-neng-mo-kuai-she-ji&quot;&gt;3. &lt;strong&gt;功能模块设计&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;以下是一些可以在前端实现的模块设计建议：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;1-yi-biao-pan-dashboard&quot;&gt;&lt;strong&gt;1. 仪表盘（Dashboard）&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;显示系统状态（通过&lt;code&gt;&#x2F;health&lt;&#x2F;code&gt; API）。&lt;&#x2F;li&gt;
&lt;li&gt;展示用户的会话列表（通过&lt;code&gt;&#x2F;api&#x2F;conversations&lt;&#x2F;code&gt; API）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;设计&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用卡片式布局，每个会话以卡片形式展示。&lt;&#x2F;li&gt;
&lt;li&gt;动态加载数据时，显示代码流动的加载动画。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;2-wen-jian-guan-li&quot;&gt;&lt;strong&gt;2. 文件管理&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;列出文件（通过&lt;code&gt;&#x2F;list-files&lt;&#x2F;code&gt; API）。&lt;&#x2F;li&gt;
&lt;li&gt;上传文件（通过&lt;code&gt;&#x2F;upload-files&lt;&#x2F;code&gt; API）。&lt;&#x2F;li&gt;
&lt;li&gt;查看文件内容（通过&lt;code&gt;&#x2F;select-file&lt;&#x2F;code&gt; API）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;设计&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;文件列表以树形结构展示，支持文件夹展开&#x2F;折叠。&lt;&#x2F;li&gt;
&lt;li&gt;文件内容以代码编辑器风格展示（可以使用&lt;code&gt;Monaco Editor&lt;&#x2F;code&gt;或&lt;code&gt;CodeMirror&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;3-github-ji-cheng&quot;&gt;&lt;strong&gt;3. GitHub 集成&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;显示用户的GitHub仓库（通过&lt;code&gt;&#x2F;api&#x2F;github&#x2F;repositories&lt;&#x2F;code&gt; API）。&lt;&#x2F;li&gt;
&lt;li&gt;搜索仓库（通过&lt;code&gt;&#x2F;api&#x2F;github&#x2F;search&#x2F;repositories&lt;&#x2F;code&gt; API）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;设计&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;仓库列表以卡片或表格形式展示，支持分页和排序。&lt;&#x2F;li&gt;
&lt;li&gt;搜索框带有动态提示效果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;4-she-zhi-yu-pei-zhi&quot;&gt;&lt;strong&gt;4. 设置与配置&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;加载和存储用户设置（通过&lt;code&gt;&#x2F;api&#x2F;settings&lt;&#x2F;code&gt; API）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;设计&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用表单组件，支持实时预览设置效果。&lt;&#x2F;li&gt;
&lt;li&gt;提供“恢复默认设置”按钮。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;5-dong-tai-gui-ji&quot;&gt;&lt;strong&gt;5. 动态轨迹&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;展示会话的动态轨迹（通过&lt;code&gt;&#x2F;trajectory&lt;&#x2F;code&gt; API）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;设计&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用时间轴或动态流动的方式展示事件。&lt;&#x2F;li&gt;
&lt;li&gt;支持实时更新。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;4-jiao-hu-yu-dong-hua&quot;&gt;4. &lt;strong&gt;交互与动画&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态背景&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用Three.js实现3D粒子背景或矩阵风格的代码流动。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;按钮与悬停效果&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用Framer Motion实现按钮的悬停放大、点击波纹效果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;加载动画&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;在数据加载时，显示类似终端的“正在加载...”动画。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;5-kai-fa-bu-zou&quot;&gt;5. &lt;strong&gt;开发步骤&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;搭建项目结构&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;create-react-app&lt;&#x2F;code&gt;或&lt;code&gt;Next.js&lt;&#x2F;code&gt;初始化项目。&lt;&#x2F;li&gt;
&lt;li&gt;配置Tailwind CSS或其他UI库。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现API交互&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;axios&lt;&#x2F;code&gt;或&lt;code&gt;fetch&lt;&#x2F;code&gt;与后端API通信。&lt;&#x2F;li&gt;
&lt;li&gt;创建一个&lt;code&gt;api&lt;&#x2F;code&gt;目录，封装所有API请求。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设计与实现组件&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;按模块划分组件，比如&lt;code&gt;Dashboard&lt;&#x2F;code&gt;、&lt;code&gt;FileManager&lt;&#x2F;code&gt;、&lt;code&gt;GitHubIntegration&lt;&#x2F;code&gt;等。&lt;&#x2F;li&gt;
&lt;li&gt;使用UI库快速构建基础组件。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化与美化&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;添加动画和动态效果。&lt;&#x2F;li&gt;
&lt;li&gt;优化响应式设计，确保在不同设备上的良好体验。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;测试与部署&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;npm run build&lt;&#x2F;code&gt;生成生产环境代码。&lt;&#x2F;li&gt;
&lt;li&gt;部署到Vercel、Netlify或其他平台。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 二次开发系列（二）：前端重构设计规划 - DeepSeek版</title>
        <published>2025-02-26T00:00:00+00:00</published>
        <updated>2025-02-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-redevelopment-frontend-002/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-redevelopment-frontend-002/</id>
        
        <content type="html">&lt;p&gt;要设计一个全新的前端，目标是打造一个酷炫、极客风格的界面，专为程序员用户量身定制。以下是设计思路和实现方案：&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;she-ji-si-lu&quot;&gt;&lt;strong&gt;设计思路&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;极客风格的视觉设计&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配色&lt;&#x2F;strong&gt;: 使用深色主题（黑色、深灰色为主），搭配荧光色（如绿色、蓝色、紫色）作为点缀。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;字体&lt;&#x2F;strong&gt;: 选择编程风格的等宽字体（如 Fira Code、JetBrains Mono）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;动画效果&lt;&#x2F;strong&gt;: 添加流畅的过渡动画、动态背景（如粒子效果、代码雨）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;布局&lt;&#x2F;strong&gt;: 使用简洁的网格布局，突出功能模块。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能模块&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实时交互&lt;&#x2F;strong&gt;: 提供实时反馈的交互体验，如文件上传进度条、会话状态更新。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;API集成&lt;&#x2F;strong&gt;: 前端与后端API无缝对接，展示文件管理、会话管理、GitHub集成等功能。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;可定制性&lt;&#x2F;strong&gt;: 用户可以自定义界面主题、快捷键等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户体验&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;响应式设计&lt;&#x2F;strong&gt;: 支持桌面和移动端访问。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;快捷操作&lt;&#x2F;strong&gt;: 提供键盘快捷键支持，提升操作效率。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;国际化&lt;&#x2F;strong&gt;: 支持多语言切换。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;qian-duan-ye-mian-she-ji&quot;&gt;&lt;strong&gt;前端页面设计&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;1-shou-ye-dashboard&quot;&gt;&lt;strong&gt;1. 首页 (Dashboard)&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;展示用户的会话状态、文件管理入口、GitHub仓库信息。&lt;&#x2F;li&gt;
&lt;li&gt;动态背景（如代码雨或粒子效果）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;布局&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;左侧导航栏：功能入口（会话、文件、GitHub、设置）。&lt;&#x2F;li&gt;
&lt;li&gt;主区域：动态展示用户的当前状态和快捷操作。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;2-hui-hua-guan-li-session-management&quot;&gt;&lt;strong&gt;2. 会话管理 (Session Management)&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;列出所有会话，支持搜索、创建、更新、删除。&lt;&#x2F;li&gt;
&lt;li&gt;实时显示会话的状态（如运行中、已关闭）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;交互&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;点击会话可展开详细信息。&lt;&#x2F;li&gt;
&lt;li&gt;支持拖拽调整会话顺序。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;3-wen-jian-guan-li-file-management&quot;&gt;&lt;strong&gt;3. 文件管理 (File Management)&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;文件浏览器，支持上传、下载、删除文件。&lt;&#x2F;li&gt;
&lt;li&gt;显示文件夹结构，支持路径导航。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;交互&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;文件上传时显示进度条。&lt;&#x2F;li&gt;
&lt;li&gt;支持文件拖拽上传。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;4-githubji-cheng-github-integration&quot;&gt;&lt;strong&gt;4. GitHub集成 (GitHub Integration)&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;显示用户的GitHub仓库列表。&lt;&#x2F;li&gt;
&lt;li&gt;支持搜索和选择仓库。&lt;&#x2F;li&gt;
&lt;li&gt;显示仓库的详细信息（如分支、提交记录）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;交互&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;点击仓库可展开详细信息。&lt;&#x2F;li&gt;
&lt;li&gt;支持一键克隆仓库。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;5-she-zhi-settings&quot;&gt;&lt;strong&gt;5. 设置 (Settings)&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;用户可以配置后端API地址、主题颜色、快捷键等。&lt;&#x2F;li&gt;
&lt;li&gt;支持国际化语言切换。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;交互&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;实时预览设置效果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;ji-zhu-zhan-xuan-ze&quot;&gt;&lt;strong&gt;技术栈选择&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;框架&lt;&#x2F;strong&gt;: React + Vite&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;快速开发和构建，支持现代化的前端工具链。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UI库&lt;&#x2F;strong&gt;: TailwindCSS&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;快速实现极客风格的深色主题和响应式设计。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动画&lt;&#x2F;strong&gt;: Framer Motion &#x2F; GSAP&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;实现流畅的动画效果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;图标库&lt;&#x2F;strong&gt;: Heroicons &#x2F; FontAwesome&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提供极客风格的图标。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字体&lt;&#x2F;strong&gt;: Fira Code &#x2F; JetBrains Mono&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提升程序员的视觉体验。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态管理&lt;&#x2F;strong&gt;: Zustand &#x2F; Redux&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;管理全局状态，如用户会话、文件列表等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;国际化&lt;&#x2F;strong&gt;: i18next&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;实现多语言支持。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;shi-xian-bu-zou&quot;&gt;&lt;strong&gt;实现步骤&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始化项目&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Vite 创建 React 项目。&lt;&#x2F;li&gt;
&lt;li&gt;安装 TailwindCSS、Framer Motion、i18next 等依赖。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设计全局主题&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;配置 TailwindCSS 的深色主题。&lt;&#x2F;li&gt;
&lt;li&gt;定义全局的字体、颜色和动画效果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开发页面组件&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;按模块开发各个页面（如首页、会话管理、文件管理）。&lt;&#x2F;li&gt;
&lt;li&gt;使用 React Router 实现页面路由。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;集成后端API&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Axios 或 Fetch 与后端API交互。&lt;&#x2F;li&gt;
&lt;li&gt;实现文件上传、会话管理、GitHub集成等功能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化用户体验&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;添加键盘快捷键支持。&lt;&#x2F;li&gt;
&lt;li&gt;优化动画效果和加载速度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;测试与部署&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Jest 和 React Testing Library 编写单元测试。&lt;&#x2F;li&gt;
&lt;li&gt;构建生产环境代码并部署。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;shi-li-dai-ma-pian-duan&quot;&gt;&lt;strong&gt;示例代码片段&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;dong-tai-bei-jing-dai-ma-yu-xiao-guo&quot;&gt;&lt;strong&gt;动态背景 (代码雨效果)&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* TailwindCSS 动态背景 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#0d1117&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#c9d1d9&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  font-family: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Fira Code&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, monospace;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;code-rain &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  position: fixed;
&lt;&#x2F;span&gt;&lt;span&gt;  top: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  left: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  height: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  overflow: hidden;
&lt;&#x2F;span&gt;&lt;span&gt;  z-index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;code-rain &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  position: absolute;
&lt;&#x2F;span&gt;&lt;span&gt;  top: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-100px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#00ff00&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  animation: rain &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5s &lt;&#x2F;span&gt;&lt;span&gt;linear infinite;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@keyframes &lt;&#x2F;span&gt;&lt;span&gt;rain {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0% &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;translateY&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100% &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;translateY&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100vh&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;react-zu-jian-shi-li&quot;&gt;&lt;strong&gt;React 组件示例&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;jsx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-jsx &quot;&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span&gt;import React from &amp;#39;react&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;const Dashboard = () =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  return (
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div className=&amp;quot;h-screen flex flex-col items-center justify-center bg-gray-900 text-green-400&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;h1 className=&amp;quot;text-4xl font-bold&amp;quot;&amp;gt;Welcome to OpenHands&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;p className=&amp;quot;mt-4 text-lg&amp;quot;&amp;gt;Your AI-powered coding assistant&amp;lt;&#x2F;p&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;div className=&amp;quot;mt-8&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;button className=&amp;quot;px-4 py-2 bg-green-600 hover:bg-green-700 rounded&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Start a New Session
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;button&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  );
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;export default Dashboard;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands API 使用指南：构建智能化开发体验</title>
        <published>2025-02-25T00:00:00+00:00</published>
        <updated>2025-02-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-server-api-document/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-server-api-document/</id>
        
        <content type="html">&lt;p&gt;This document provides a detailed description of all the server-side APIs available in the OpenHands project. Each API is categorized by its respective route file and includes information about the endpoint, HTTP method, and functionality.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;general-endpoints&quot;&gt;General Endpoints&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Endpoint&lt;&#x2F;th&gt;&lt;th&gt;Method&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;th&gt;Response&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;health&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;A simple health check endpoint.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: Returns the string &lt;code&gt;&amp;quot;OK&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;conversation-api&quot;&gt;Conversation API&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Endpoint&lt;&#x2F;th&gt;&lt;th&gt;Method&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;th&gt;Response&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&#x2F;config&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves the runtime configuration.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with &lt;code&gt;runtime_id&lt;&#x2F;code&gt; and &lt;code&gt;session_id&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&#x2F;vscode-url&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves the VSCode URL.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with &lt;code&gt;vscode_url&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&#x2F;web-hosts&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves the runtime hosts.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with &lt;code&gt;hosts&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;feedback-api&quot;&gt;Feedback API&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Endpoint&lt;&#x2F;th&gt;&lt;th&gt;Method&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;th&gt;Response&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&#x2F;submit-feedback&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;POST&lt;&#x2F;td&gt;&lt;td&gt;Submits user feedback.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with stored feedback data.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;file-management-api&quot;&gt;File Management API&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Endpoint&lt;&#x2F;th&gt;&lt;th&gt;Method&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;th&gt;Response&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&#x2F;list-files&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Lists files in the runtime.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON array of file names.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&#x2F;select-file&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves file content.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with file content.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&#x2F;upload-files&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;POST&lt;&#x2F;td&gt;&lt;td&gt;Uploads files to the workspace.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with upload details.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&#x2F;save-file&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;POST&lt;&#x2F;td&gt;&lt;td&gt;Saves a file to the runtime.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: Success message.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&#x2F;zip-directory&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Compresses the workspace.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: Returns the ZIP file.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;github-api&quot;&gt;GitHub API&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Endpoint&lt;&#x2F;th&gt;&lt;th&gt;Method&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;th&gt;Response&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;github&#x2F;repositories&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves GitHub repositories.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON array of repositories.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;github&#x2F;user&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves GitHub user information.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with user details.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;github&#x2F;installations&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves GitHub installation IDs.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON array of installation IDs.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;github&#x2F;search&#x2F;repositories&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Searches GitHub repositories.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON array of repositories.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;conversation-management-api&quot;&gt;Conversation Management API&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Endpoint&lt;&#x2F;th&gt;&lt;th&gt;Method&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;th&gt;Response&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;POST&lt;&#x2F;td&gt;&lt;td&gt;Initializes a new conversation.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with conversation ID.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Searches for conversations.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with conversation details.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves conversation details.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with conversation details.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;PATCH&lt;&#x2F;td&gt;&lt;td&gt;Updates conversation title.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: Success message.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;DELETE&lt;&#x2F;td&gt;&lt;td&gt;Deletes a conversation.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: Success message.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;public-api&quot;&gt;Public API&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Endpoint&lt;&#x2F;th&gt;&lt;th&gt;Method&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;th&gt;Response&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;options&#x2F;models&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves supported models.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON array of model names.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;options&#x2F;agents&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves supported agents.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON array of agent names.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;options&#x2F;security-analyzers&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves security analyzers.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON array of analyzer names.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;options&#x2F;config&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves server configuration.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with configuration details.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;security-api&quot;&gt;Security API&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Endpoint&lt;&#x2F;th&gt;&lt;th&gt;Method&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;th&gt;Response&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&#x2F;security&#x2F;{path:path}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;ANY&lt;&#x2F;td&gt;&lt;td&gt;Security analyzer API requests.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: Response from the security analyzer.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;settings-api&quot;&gt;Settings API&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Endpoint&lt;&#x2F;th&gt;&lt;th&gt;Method&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;th&gt;Response&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;settings&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Loads current settings.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with settings details.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;settings&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;POST&lt;&#x2F;td&gt;&lt;td&gt;Stores new settings.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: Success message.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;trajectory-api&quot;&gt;Trajectory API&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Endpoint&lt;&#x2F;th&gt;&lt;th&gt;Method&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;th&gt;Response&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;api&#x2F;conversations&#x2F;{conversation_id}&#x2F;trajectory&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Retrieves the current trajectory.&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;200 OK&lt;&#x2F;strong&gt;: JSON object with trajectory details.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 源码解析系列（一）：项目概览与架构设计</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-source-code-analysis-001/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-source-code-analysis-001/</id>
        
        <content type="html">&lt;p&gt;OpenHands 是一个自动化的 AI 软件工程师项目，旨在通过前后端协作和强大的代理系统，帮助开发者完成复杂的任务。本文将深入解析 OpenHands 的整体架构和模块设计，帮助读者理解其核心逻辑和实现细节。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;hou-duan-jia-gou-fen-xi&quot;&gt;后端架构分析&lt;&#x2F;h2&gt;
&lt;p&gt;后端是 OpenHands 的核心部分，负责处理用户请求、分配任务以及与大语言模型（LLM）的交互。以下是后端的主要模块及其职责：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Controller 模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;文件路径：&lt;code&gt;openhands&#x2F;controller&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;主要功能：解析用户输入的意图，并将任务分配给合适的代理。&lt;&#x2F;li&gt;
&lt;li&gt;核心文件：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;action_parser.py&lt;&#x2F;code&gt;：负责将用户输入解析为系统可理解的动作。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;agent_controller.py&lt;&#x2F;code&gt;：根据解析结果选择合适的代理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AgentHub 模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;文件路径：&lt;code&gt;openhands&#x2F;agenthub&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;主要功能：管理不同类型的代理（如代码生成代理、网页浏览代理）。&lt;&#x2F;li&gt;
&lt;li&gt;核心文件：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;browsing_agent&lt;&#x2F;code&gt;：处理网页搜索任务。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;codeact_agent&lt;&#x2F;code&gt;：处理代码生成和分析任务。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LLM 模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;文件路径：&lt;code&gt;openhands&#x2F;llm&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;主要功能：与大语言模型交互，生成自然语言响应或代码。&lt;&#x2F;li&gt;
&lt;li&gt;核心文件：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;llm.py&lt;&#x2F;code&gt;：封装与 LLM 的交互逻辑。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;streaming_llm.py&lt;&#x2F;code&gt;：支持流式响应。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storage 模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;文件路径：&lt;code&gt;openhands&#x2F;storage&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;主要功能：提供数据存储功能，包括本地存储和云存储（如 S3）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Server 模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;文件路径：&lt;code&gt;openhands&#x2F;server&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;主要功能：提供后端服务的入口，处理前端的 API 请求。&lt;&#x2F;li&gt;
&lt;li&gt;核心文件：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app.py&lt;&#x2F;code&gt;：定义了后端的主要路由。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;routes&#x2F;conversation.py&lt;&#x2F;code&gt;：处理与对话相关的 API 请求。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;qian-duan-jia-gou-fen-xi&quot;&gt;前端架构分析&lt;&#x2F;h2&gt;
&lt;p&gt;前端基于 React 构建，提供用户界面和交互逻辑。以下是前端的主要特点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;技术栈&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 React 构建组件化界面。&lt;&#x2F;li&gt;
&lt;li&gt;使用 TypeScript 提供类型安全。&lt;&#x2F;li&gt;
&lt;li&gt;使用 Tailwind CSS 进行样式设计。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;核心组件&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ChatInput&lt;&#x2F;code&gt;：捕获用户输入并发送到后端。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ChatDisplay&lt;&#x2F;code&gt;：显示对话内容并动态更新。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API 调用&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;文件路径：&lt;code&gt;frontend&#x2F;src&#x2F;api&#x2F;conversation.ts&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;功能：封装与后端的 API 交互逻辑。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yun-xing-luo-ji-xiang-jie&quot;&gt;运行逻辑详解&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户输入&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户通过前端的 &lt;code&gt;ChatInput&lt;&#x2F;code&gt; 组件输入内容。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;前端发送请求&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;输入内容通过 &lt;code&gt;conversation.ts&lt;&#x2F;code&gt; 中的 API 方法发送到后端。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;后端处理请求&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;controller&#x2F;action_parser.py&lt;&#x2F;code&gt; 解析用户意图。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;controller&#x2F;agent_controller.py&lt;&#x2F;code&gt; 分配合适的代理。&lt;&#x2F;li&gt;
&lt;li&gt;代理通过 &lt;code&gt;llm&#x2F;llm.py&lt;&#x2F;code&gt; 与大语言模型交互，生成响应。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;前端显示响应&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;后端返回响应，前端更新 &lt;code&gt;ChatDisplay&lt;&#x2F;code&gt; 组件，显示新的对话内容。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;通过以上分析，我们可以看到 OpenHands 的架构设计清晰，模块职责分明，便于扩展和维护。在接下来的文章中，我们将深入解析每个模块的实现细节，带你全面掌握 OpenHands 的源码。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;xiang-mu-gai-lan&quot;&gt;项目概览&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的代码库分为两个主要部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;后端&lt;&#x2F;strong&gt;：基于 Python，负责核心逻辑、代理管理和与大语言模型（LLM）的交互。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;前端&lt;&#x2F;strong&gt;：基于 React，提供用户界面，捕获用户输入并与后端交互。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;此外，项目采用模块化设计，便于扩展和维护。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;jia-gou-she-ji&quot;&gt;架构设计&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-hou-duan-jia-gou&quot;&gt;&lt;strong&gt;1. 后端架构&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;后端代码位于 &lt;code&gt;openhands&lt;&#x2F;code&gt; 目录，主要模块包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;&#x2F;strong&gt;：负责解析用户意图并分配代理。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;AgentHub&lt;&#x2F;strong&gt;：管理不同类型的代理（如代码生成、网页浏览）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;LLM&lt;&#x2F;strong&gt;：与大语言模型交互，生成响应。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Events&lt;&#x2F;strong&gt;：处理事件流。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;&#x2F;strong&gt;：管理数据存储。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Server&lt;&#x2F;strong&gt;：提供 API 接口，与前端通信。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-qian-duan-jia-gou&quot;&gt;&lt;strong&gt;2. 前端架构&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;前端代码位于 &lt;code&gt;frontend&lt;&#x2F;code&gt; 目录，主要特点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 React 构建组件化界面。&lt;&#x2F;li&gt;
&lt;li&gt;通过 API 与后端交互。&lt;&#x2F;li&gt;
&lt;li&gt;提供用户友好的对话界面。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;mo-kuai-zhi-ze&quot;&gt;模块职责&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模块&lt;&#x2F;th&gt;&lt;th&gt;主要职责&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Controller&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;解析用户输入，分配任务给合适的代理。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AgentHub&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供多种代理，完成特定任务（如代码生成、搜索）。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;LLM&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;调用大语言模型，生成自然语言响应或代码。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Events&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;管理事件流，支持异步处理。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Storage&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供本地存储、云存储（如 S3）等多种存储方式。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Server&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供后端服务的入口，处理前端的 API 请求。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yun-xing-luo-ji-gai-lan&quot;&gt;运行逻辑概览&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户输入&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户通过前端输入内容。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;前端发送请求&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;前端将用户输入通过 API 发送到后端。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;后端处理&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;后端解析用户意图，初始化对话上下文。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;前端显示响应&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;前端接收后端的响应并更新界面。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的架构设计清晰，模块职责分明，便于扩展和维护。在接下来的文章中，我们将深入解析每个模块的实现细节，带你全面掌握 OpenHands 的源码。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;下一篇：&lt;a href=&quot;#&quot;&gt;OpenHands 源码解析系列（二）：前端架构与用户交互流程&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 源码解析系列（二）：前端架构与用户交互流程</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-source-code-analysis-002/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-source-code-analysis-002/</id>
        
        <content type="html">&lt;p&gt;OpenHands 的前端基于 React 构建，提供了用户友好的界面和高效的交互体验。本文将深入解析前端的技术栈、组件设计及与后端的交互逻辑，帮助读者理解其实现细节和设计理念。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;ji-zhu-zhan-fen-xi&quot;&gt;技术栈分析&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 前端采用了现代化的技术栈，以下是每个技术的作用：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用于构建用户界面，支持组件化开发。&lt;&#x2F;li&gt;
&lt;li&gt;提供了高效的状态管理和虚拟 DOM 渲染。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TypeScript&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提供静态类型检查，减少运行时错误。&lt;&#x2F;li&gt;
&lt;li&gt;增强了代码的可读性和可维护性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Vite&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;作为构建工具，提供了快速的开发服务器和高效的模块热替换（HMR）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tailwind CSS&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提供了实用的 CSS 类，简化了样式设计。&lt;&#x2F;li&gt;
&lt;li&gt;支持响应式设计，提升了开发效率。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;he-xin-zu-jian-xiang-jie&quot;&gt;核心组件详解&lt;&#x2F;h2&gt;
&lt;p&gt;前端的组件化设计使得代码易于维护和扩展。以下是主要组件的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ChatInput&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：捕获用户输入并触发提交事件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;useState&lt;&#x2F;code&gt; 管理输入框的内容。&lt;&#x2F;li&gt;
&lt;li&gt;监听 &lt;code&gt;onKeyPress&lt;&#x2F;code&gt; 事件，当用户按下回车键时触发提交。&lt;&#x2F;li&gt;
&lt;li&gt;调用 &lt;code&gt;conversation.ts&lt;&#x2F;code&gt; 中的 API 方法，将输入内容发送到后端。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ChatDisplay&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：显示对话内容并动态更新。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;useEffect&lt;&#x2F;code&gt; 监听对话状态的变化。&lt;&#x2F;li&gt;
&lt;li&gt;渲染一个消息列表，每条消息包括用户输入和系统响应。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API 调用模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;src&#x2F;api&#x2F;conversation.ts&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：封装与后端的 API 交互逻辑。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;fetch&lt;&#x2F;code&gt; 或 &lt;code&gt;axios&lt;&#x2F;code&gt; 发送 HTTP 请求。&lt;&#x2F;li&gt;
&lt;li&gt;提供统一的错误处理机制，确保前端的稳定性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yong-hu-jiao-hu-liu-cheng-xiang-jie&quot;&gt;用户交互流程详解&lt;&#x2F;h2&gt;
&lt;p&gt;以下是用户交互的完整流程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户输入&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户在 &lt;code&gt;ChatInput&lt;&#x2F;code&gt; 组件中输入内容。&lt;&#x2F;li&gt;
&lt;li&gt;输入内容通过 &lt;code&gt;onSubmit&lt;&#x2F;code&gt; 事件触发提交。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;发送请求&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conversation.ts&lt;&#x2F;code&gt; 中的 API 方法将输入内容封装为 JSON 格式，并通过 HTTP POST 请求发送到后端。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;后端处理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;后端解析用户输入，生成响应内容。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;接收响应&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;前端接收到后端返回的响应数据。&lt;&#x2F;li&gt;
&lt;li&gt;更新 &lt;code&gt;ChatDisplay&lt;&#x2F;code&gt; 组件的状态，重新渲染对话内容。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shen-du-fen-xi-zhuang-tai-guan-li-yu-xing-neng-you-hua&quot;&gt;深度分析：状态管理与性能优化&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;状态管理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 React 的 &lt;code&gt;useState&lt;&#x2F;code&gt; 和 &lt;code&gt;useReducer&lt;&#x2F;code&gt; 管理组件状态。&lt;&#x2F;li&gt;
&lt;li&gt;对于全局状态，可以引入 Context API 或第三方状态管理库（如 Redux）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能优化&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 React.memo 避免不必要的组件重新渲染。&lt;&#x2F;li&gt;
&lt;li&gt;使用 &lt;code&gt;useCallback&lt;&#x2F;code&gt; 和 &lt;code&gt;useMemo&lt;&#x2F;code&gt; 优化函数和计算属性。&lt;&#x2F;li&gt;
&lt;li&gt;在消息列表中使用虚拟滚动技术（如 react-window）提升渲染性能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;通过以上分析，我们可以看到 OpenHands 前端的设计注重用户体验和代码可维护性。在下一篇文章中，我们将深入解析后端的架构与核心模块，带你了解其实现细节。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;ji-zhu-zhan&quot;&gt;技术栈&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 前端使用了以下技术：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt;：构建用户界面。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;TypeScript&lt;&#x2F;strong&gt;：提供类型安全。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Vite&lt;&#x2F;strong&gt;：快速构建工具。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Tailwind CSS&lt;&#x2F;strong&gt;：用于样式设计。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zu-jian-she-ji&quot;&gt;组件设计&lt;&#x2F;h2&gt;
&lt;p&gt;前端的组件化设计使得代码易于维护和扩展。以下是主要组件：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ChatInput&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;捕获用户输入。&lt;&#x2F;li&gt;
&lt;li&gt;监听 &lt;code&gt;onSubmit&lt;&#x2F;code&gt; 或 &lt;code&gt;onEnter&lt;&#x2F;code&gt; 事件。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ChatDisplay&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;显示对话内容。&lt;&#x2F;li&gt;
&lt;li&gt;动态更新对话状态。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API 调用模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;位于 &lt;code&gt;src&#x2F;api&#x2F;conversation.ts&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;负责与后端交互。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yong-hu-jiao-hu-liu-cheng&quot;&gt;用户交互流程&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户输入&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户在 &lt;code&gt;ChatInput&lt;&#x2F;code&gt; 组件中输入内容。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;发送请求&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;输入内容通过 &lt;code&gt;conversation.ts&lt;&#x2F;code&gt; 中的 API 方法发送到后端。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;接收响应&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;后端返回响应，前端更新状态并重新渲染 &lt;code&gt;ChatDisplay&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的前端设计注重用户体验和代码可维护性。通过组件化和现代化的技术栈，前端能够高效地与后端交互。在下一篇文章中，我们将深入解析后端的架构与核心模块。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;下一篇：&lt;a href=&quot;#&quot;&gt;OpenHands 源码解析系列（三）：后端架构与核心模块&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 源码解析系列（三）：后端架构与核心模块</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-source-code-analysis-003/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-source-code-analysis-003/</id>
        
        <content type="html">&lt;p&gt;OpenHands 的后端基于 Python 构建，负责核心逻辑、代理管理和与大语言模型（LLM）的交互。本文将深入解析后端的模块划分、启动流程及核心逻辑，帮助读者理解其实现细节和设计理念。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;mo-kuai-hua-fen-yu-zhi-ze&quot;&gt;模块划分与职责&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的后端代码位于 &lt;code&gt;openhands&lt;&#x2F;code&gt; 目录，采用模块化设计，以下是主要模块及其职责的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Controller 模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;controller&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;职责&lt;&#x2F;strong&gt;：解析用户输入的意图，并将任务分配给合适的代理。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;核心文件&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;action_parser.py&lt;&#x2F;code&gt;：负责将用户输入解析为系统可理解的动作。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;agent_controller.py&lt;&#x2F;code&gt;：根据解析结果选择合适的代理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AgentHub 模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;agenthub&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;职责&lt;&#x2F;strong&gt;：管理不同类型的代理（如代码生成代理、网页浏览代理）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;核心文件&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;browsing_agent&lt;&#x2F;code&gt;：处理网页搜索任务。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;codeact_agent&lt;&#x2F;code&gt;：处理代码生成和分析任务。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LLM 模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;llm&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;职责&lt;&#x2F;strong&gt;：与大语言模型交互，生成自然语言响应或代码。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;核心文件&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;llm.py&lt;&#x2F;code&gt;：封装与 LLM 的交互逻辑。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;streaming_llm.py&lt;&#x2F;code&gt;：支持流式响应。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Events 模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;events&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;职责&lt;&#x2F;strong&gt;：处理事件流，支持异步处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storage 模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;storage&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;职责&lt;&#x2F;strong&gt;：提供数据存储功能，包括本地存储和云存储（如 S3）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Server 模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;server&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;职责&lt;&#x2F;strong&gt;：提供后端服务的入口，处理前端的 API 请求。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;核心文件&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app.py&lt;&#x2F;code&gt;：定义了后端的主要路由。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;routes&#x2F;conversation.py&lt;&#x2F;code&gt;：处理与对话相关的 API 请求。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;qi-dong-liu-cheng-xiang-jie&quot;&gt;启动流程详解&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的后端启动流程分为以下几个步骤：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;加载配置&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;从配置文件中加载必要的参数，例如数据库连接信息、API 密钥等。&lt;&#x2F;li&gt;
&lt;li&gt;配置文件路径：&lt;code&gt;openhands&#x2F;core&#x2F;config&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始化模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;初始化日志系统（&lt;code&gt;openhands&#x2F;core&#x2F;logger.py&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;li&gt;初始化数据库连接和缓存。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启动服务&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;server&#x2F;app.py&lt;&#x2F;code&gt; 启动后端服务。&lt;&#x2F;li&gt;
&lt;li&gt;使用 FastAPI 框架定义路由和中间件。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;he-xin-luo-ji-fen-xi&quot;&gt;核心逻辑分析&lt;&#x2F;h2&gt;
&lt;p&gt;后端的核心逻辑围绕用户请求的处理展开，以下是主要流程的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;意图解析&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件&lt;&#x2F;strong&gt;：&lt;code&gt;controller&#x2F;action_parser.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：将用户输入解析为系统可理解的动作。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse_action&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_input&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; dict:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; in user_input:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: user_input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;()}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; in user_input:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;details&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: user_input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;()}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: user_input}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代理分配&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件&lt;&#x2F;strong&gt;：&lt;code&gt;controller&#x2F;agent_controller.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：根据解析结果选择合适的代理。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;assign_agent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parsed_action&lt;&#x2F;span&gt;&lt;span&gt;: dict):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;parsed_action[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BrowsingAgent&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;parsed_action[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CodeActAgent&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ChatAgent&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;响应生成&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件&lt;&#x2F;strong&gt;：&lt;code&gt;llm&#x2F;llm.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：通过与大语言模型交互生成响应。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LLM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; str:
&lt;&#x2F;span&gt;&lt;span&gt;        response = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;external_llm_api_call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;=prompt)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;response
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shen-du-fen-xi-kuo-zhan-xing-yu-xing-neng-you-hua&quot;&gt;深度分析：扩展性与性能优化&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扩展性&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;模块化设计使得新增功能（如新代理类型）变得简单。&lt;&#x2F;li&gt;
&lt;li&gt;使用依赖注入（Dependency Injection）管理模块间的依赖关系。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能优化&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用异步编程（async&#x2F;await）提升并发性能。&lt;&#x2F;li&gt;
&lt;li&gt;在事件流中引入缓存机制，减少重复计算。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;通过以上分析，我们可以看到 OpenHands 后端的设计注重模块化和扩展性。在下一篇文章中，我们将深入解析对话管理与意图解析的实现细节，带你了解其核心逻辑。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;mo-kuai-hua-fen&quot;&gt;模块划分&lt;&#x2F;h2&gt;
&lt;p&gt;后端代码位于 &lt;code&gt;openhands&lt;&#x2F;code&gt; 目录，主要模块包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Controller&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;解析用户意图。&lt;&#x2F;li&gt;
&lt;li&gt;分配任务给合适的代理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AgentHub&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;管理不同类型的代理（如代码生成、网页浏览）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LLM&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;与大语言模型交互，生成响应。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Events&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;处理事件流，支持异步处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storage&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提供本地存储、云存储（如 S3）等多种存储方式。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Server&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提供后端服务的入口，处理前端的 API 请求。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;qi-dong-liu-cheng&quot;&gt;启动流程&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;加载配置&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;从配置文件中加载必要的参数。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始化模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;初始化日志系统、数据库连接等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启动服务&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;server&#x2F;app.py&lt;&#x2F;code&gt; 启动后端服务。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;he-xin-luo-ji&quot;&gt;核心逻辑&lt;&#x2F;h2&gt;
&lt;p&gt;后端的核心逻辑包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;意图解析&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;controller&#x2F;action_parser.py&lt;&#x2F;code&gt; 提取用户意图。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代理分配&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;controller&#x2F;agent_controller.py&lt;&#x2F;code&gt; 分配合适的代理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;响应生成&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;代理通过 &lt;code&gt;llm&#x2F;llm.py&lt;&#x2F;code&gt; 与大语言模型交互，生成响应。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的后端设计注重模块化和扩展性。通过清晰的模块划分和启动流程，后端能够高效地处理用户请求。在下一篇文章中，我们将深入解析对话管理与意图解析的实现细节。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;下一篇：&lt;a href=&quot;#&quot;&gt;OpenHands 源码解析系列（四）：对话管理与意图解析&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 源码解析系列（四）：对话管理与意图解析</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-source-code-analysis-004/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-source-code-analysis-004/</id>
        
        <content type="html">&lt;p&gt;在 OpenHands 中，对话管理和意图解析是后端的核心功能之一。本文将深入解析系统如何解析用户输入并分配代理，帮助读者理解其实现细节和设计理念。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yi-tu-jie-xi-xiang-jie&quot;&gt;意图解析详解&lt;&#x2F;h2&gt;
&lt;p&gt;意图解析是 OpenHands 的第一步，负责将用户输入转换为系统可理解的动作。以下是意图解析的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提取意图&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;controller&#x2F;action_parser.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：使用正则表达式或 NLP 技术解析用户输入。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;示例代码&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse_action&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_input&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; dict:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; in user_input:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: user_input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;()}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; in user_input:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;details&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: user_input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;()}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: user_input}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成动作字典&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：将用户输入转换为系统可理解的动作格式。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;输出示例&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Python tutorials&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;dai-li-fen-pei-xiang-jie&quot;&gt;代理分配详解&lt;&#x2F;h2&gt;
&lt;p&gt;代理分配是意图解析的后续步骤，负责将解析结果传递给合适的代理进行处理。以下是代理分配的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;选择代理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;controller&#x2F;agent_controller.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：根据解析出的意图，选择合适的代理（如 &lt;code&gt;browsing_agent&lt;&#x2F;code&gt;、&lt;code&gt;codeact_agent&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;示例代码&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;assign_agent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parsed_action&lt;&#x2F;span&gt;&lt;span&gt;: dict):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;parsed_action[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BrowsingAgent&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;parsed_action[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CodeActAgent&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ChatAgent&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;任务分发&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：将用户请求传递给对应的代理进行处理。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个代理实现 &lt;code&gt;handle_request&lt;&#x2F;code&gt; 方法，处理特定类型的任务。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-li-liu-cheng-xiang-jie&quot;&gt;示例流程详解&lt;&#x2F;h2&gt;
&lt;p&gt;以下是一个完整的示例流程，展示了从用户输入到代理处理的全过程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户输入&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户输入 &amp;quot;search Python tutorials&amp;quot;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;意图解析&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;调用 &lt;code&gt;parse_action&lt;&#x2F;code&gt; 方法，解析为动作字典：&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Python tutorials&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代理分配&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;调用 &lt;code&gt;assign_agent&lt;&#x2F;code&gt; 方法，分配给 &lt;code&gt;BrowsingAgent&lt;&#x2F;code&gt; 处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成响应&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BrowsingAgent&lt;&#x2F;code&gt; 调用搜索引擎 API，返回搜索结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shen-du-fen-xi-kuo-zhan-xing-yu-you-hua&quot;&gt;深度分析：扩展性与优化&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扩展性&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;新增意图解析规则：可以在 &lt;code&gt;action_parser.py&lt;&#x2F;code&gt; 中添加新的解析逻辑。&lt;&#x2F;li&gt;
&lt;li&gt;新增代理类型：可以在 &lt;code&gt;agenthub&lt;&#x2F;code&gt; 模块中添加新的代理类，并在 &lt;code&gt;agent_controller.py&lt;&#x2F;code&gt; 中注册。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能优化&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用缓存机制：对于常见的用户请求，可以缓存解析结果和代理响应，减少重复计算。&lt;&#x2F;li&gt;
&lt;li&gt;异步处理：使用 &lt;code&gt;async&#x2F;await&lt;&#x2F;code&gt; 提升代理处理的并发性能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;通过以上分析，我们可以看到 OpenHands 的对话管理和意图解析逻辑清晰且易于扩展。在下一篇文章中，我们将深入解析代理系统与任务分配的实现细节，带你了解其核心逻辑。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yi-tu-jie-xi&quot;&gt;意图解析&lt;&#x2F;h2&gt;
&lt;p&gt;意图解析的核心逻辑位于 &lt;code&gt;controller&#x2F;action_parser.py&lt;&#x2F;code&gt;，主要功能包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提取意图&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用正则表达式或 NLP 技术解析用户输入。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成动作字典&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;将用户输入转换为系统可理解的动作格式。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;dai-li-fen-pei&quot;&gt;代理分配&lt;&#x2F;h2&gt;
&lt;p&gt;代理分配的核心逻辑位于 &lt;code&gt;controller&#x2F;agent_controller.py&lt;&#x2F;code&gt;，主要功能包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;选择代理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;根据解析出的意图，选择合适的代理（如 &lt;code&gt;browsing_agent&lt;&#x2F;code&gt;、&lt;code&gt;codeact_agent&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;任务分发&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;将用户请求传递给对应的代理进行处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-li-liu-cheng&quot;&gt;示例流程&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户输入&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户输入 &amp;quot;search Python tutorials&amp;quot;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;意图解析&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;解析为动作字典：&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Python tutorials&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代理分配&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;分配给 &lt;code&gt;BrowsingAgent&lt;&#x2F;code&gt; 处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成响应&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;代理返回搜索结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过清晰的意图解析和代理分配逻辑，OpenHands 能够高效地处理用户请求。在下一篇文章中，我们将深入解析代理系统与任务分配的实现细节。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;下一篇：&lt;a href=&quot;#&quot;&gt;OpenHands 源码解析系列（五）：代理系统与任务分配&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 源码解析系列（五）：代理系统与任务分配</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-source-code-analysis-005/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-source-code-analysis-005/</id>
        
        <content type="html">&lt;p&gt;代理系统是 OpenHands 的核心组件之一，负责执行具体任务。本文将深入解析代理的设计模式及其在任务分配中的作用，帮助读者理解其实现细节和设计理念。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;dai-li-de-she-ji-xiang-jie&quot;&gt;代理的设计详解&lt;&#x2F;h2&gt;
&lt;p&gt;代理系统的核心逻辑位于 &lt;code&gt;agenthub&lt;&#x2F;code&gt; 模块，以下是其设计的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块化设计&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;&#x2F;strong&gt;：每个代理负责特定任务（如代码生成、网页浏览）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;&#x2F;strong&gt;：模块化设计使得新增代理类型变得简单。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基类定义&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;agenthub&#x2F;micro&#x2F;microagent.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：定义所有代理的通用接口和行为。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;示例代码&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name = name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_request&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: dict) -&amp;gt; dict:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NotImplementedError&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Subclasses must implement this method&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-li-dai-li-xiang-jie&quot;&gt;示例代理详解&lt;&#x2F;h2&gt;
&lt;p&gt;以下是两个主要代理的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BrowsingAgent&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：处理网页搜索任务。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;agenthub&#x2F;browsing_agent&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用搜索引擎 API，获取搜索结果。&lt;&#x2F;li&gt;
&lt;li&gt;返回结果的格式化数据。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CodeActAgent&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：处理代码生成和分析任务。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;agenthub&#x2F;codeact_agent&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;调用 LLM 模块生成代码。&lt;&#x2F;li&gt;
&lt;li&gt;分析用户提供的代码片段，返回优化建议。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;ren-wu-fen-pei-xiang-jie&quot;&gt;任务分配详解&lt;&#x2F;h2&gt;
&lt;p&gt;任务分配的核心逻辑位于 &lt;code&gt;controller&#x2F;agent_controller.py&lt;&#x2F;code&gt;，以下是其详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;选择代理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：根据用户意图分配合适的代理。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;示例代码&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;assign_agent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parsed_action&lt;&#x2F;span&gt;&lt;span&gt;: dict):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;parsed_action[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BrowsingAgent&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;parsed_action[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CodeActAgent&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ChatAgent&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;执行任务&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：调用代理的 &lt;code&gt;handle_request&lt;&#x2F;code&gt; 方法处理请求。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个代理实现特定的任务逻辑。&lt;&#x2F;li&gt;
&lt;li&gt;返回处理结果给调用方。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shen-du-fen-xi-kuo-zhan-xing-yu-you-hua&quot;&gt;深度分析：扩展性与优化&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扩展性&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;新增代理类型：
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;agenthub&lt;&#x2F;code&gt; 模块中添加新的代理类。&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;agent_controller.py&lt;&#x2F;code&gt; 中注册新代理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;示例：新增一个 &lt;code&gt;DataAnalysisAgent&lt;&#x2F;code&gt;，用于处理数据分析任务。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能优化&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用异步编程：
&lt;ul&gt;
&lt;li&gt;在代理的任务处理中引入 &lt;code&gt;async&#x2F;await&lt;&#x2F;code&gt;，提升并发性能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;缓存机制：
&lt;ul&gt;
&lt;li&gt;对于常见的任务结果进行缓存，减少重复计算。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;通过以上分析，我们可以看到 OpenHands 的代理系统设计清晰且易于扩展。在下一篇文章中，我们将深入解析与大语言模型（LLM）的交互逻辑，带你了解其核心实现。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;dai-li-de-she-ji&quot;&gt;代理的设计&lt;&#x2F;h2&gt;
&lt;p&gt;代理的核心逻辑位于 &lt;code&gt;agenthub&lt;&#x2F;code&gt; 模块，主要特点包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块化设计&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;每个代理负责特定任务（如代码生成、网页浏览）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基类定义&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;所有代理继承自 &lt;code&gt;MicroAgent&lt;&#x2F;code&gt; 基类。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-li-dai-li&quot;&gt;示例代理&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BrowsingAgent&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;处理网页搜索任务。&lt;&#x2F;li&gt;
&lt;li&gt;位于 &lt;code&gt;agenthub&#x2F;browsing_agent&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CodeActAgent&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;处理代码生成和分析任务。&lt;&#x2F;li&gt;
&lt;li&gt;位于 &lt;code&gt;agenthub&#x2F;codeact_agent&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;ren-wu-fen-pei&quot;&gt;任务分配&lt;&#x2F;h2&gt;
&lt;p&gt;任务分配的核心逻辑位于 &lt;code&gt;controller&#x2F;agent_controller.py&lt;&#x2F;code&gt;，主要功能包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;选择代理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;根据用户意图分配合适的代理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;执行任务&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;调用代理的 &lt;code&gt;handle_request&lt;&#x2F;code&gt; 方法处理请求。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过模块化的代理设计，OpenHands 能够高效地执行多种任务。在下一篇文章中，我们将深入解析与大语言模型（LLM）的交互逻辑。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;下一篇：&lt;a href=&quot;#&quot;&gt;OpenHands 源码解析系列（六）：与大语言模型（LLM）的交互&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 源码解析系列（六）：与大语言模型（LLM）的交互</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-source-code-analysis-006/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-source-code-analysis-006/</id>
        
        <content type="html">&lt;p&gt;在 OpenHands 中，大语言模型（LLM）是生成响应的核心组件之一。本文将深入解析系统如何通过 LLM 模块与大语言模型交互，帮助读者理解其实现细节和设计理念。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;llm-mo-kuai-xiang-jie&quot;&gt;LLM 模块详解&lt;&#x2F;h2&gt;
&lt;p&gt;LLM 模块的核心逻辑位于 &lt;code&gt;llm&#x2F;llm.py&lt;&#x2F;code&gt;，以下是其主要功能的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API 调用&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：调用外部 LLM 服务（如 OpenAI GPT）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 HTTP 请求与 LLM 服务交互。&lt;&#x2F;li&gt;
&lt;li&gt;支持多种模型（如 GPT-3.5、GPT-4）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流式响应&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：支持流式生成响应，提升用户体验。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 WebSocket 或 HTTP&#x2F;2 实现流式数据传输。&lt;&#x2F;li&gt;
&lt;li&gt;在前端逐步显示生成的内容。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-li-dai-ma-xiang-jie&quot;&gt;示例代码详解&lt;&#x2F;h2&gt;
&lt;p&gt;以下是一个完整的 LLM 调用示例，展示了如何与外部 LLM 服务交互：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LLM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model_name&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api_key&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.model_name = model_name
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.api_key = api_key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; str:
&lt;&#x2F;span&gt;&lt;span&gt;        headers = {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Authorization&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bearer &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.api_key}&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;        payload = {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.model_name, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: prompt, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;max_tokens&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        response = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.openai.com&#x2F;v1&#x2F;completions&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;=payload, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;=headers)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;choices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;jiao-hu-liu-cheng-xiang-jie&quot;&gt;交互流程详解&lt;&#x2F;h2&gt;
&lt;p&gt;以下是 OpenHands 与 LLM 的交互流程的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成提示&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：代理根据用户输入生成提示（prompt）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;提示可以包含上下文信息，以提高生成结果的相关性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调用 LLM&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：通过 &lt;code&gt;llm.py&lt;&#x2F;code&gt; 调用大语言模型。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;generate_response&lt;&#x2F;code&gt; 方法发送请求并接收响应。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;返回响应&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：LLM 返回生成的响应文本。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;响应可以是完整的文本，也可以是流式数据。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shen-du-fen-xi-kuo-zhan-xing-yu-you-hua&quot;&gt;深度分析：扩展性与优化&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扩展性&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;支持多种 LLM 服务：
&lt;ul&gt;
&lt;li&gt;可以通过配置文件切换不同的 LLM 服务（如 OpenAI、Anthropic）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;自定义提示模板：
&lt;ul&gt;
&lt;li&gt;提供模板化的提示生成方式，适应不同的任务需求。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能优化&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;缓存机制：
&lt;ul&gt;
&lt;li&gt;对于常见的提示和响应结果进行缓存，减少重复调用。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;并发处理：
&lt;ul&gt;
&lt;li&gt;使用异步编程（如 &lt;code&gt;asyncio&lt;&#x2F;code&gt;）同时处理多个 LLM 请求。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;通过以上分析，我们可以看到 OpenHands 的 LLM 模块设计清晰且功能强大。在下一篇文章中，我们将解析事件流与存储管理的实现细节，带你了解其核心逻辑。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;llm-mo-kuai&quot;&gt;LLM 模块&lt;&#x2F;h2&gt;
&lt;p&gt;LLM 模块的核心逻辑位于 &lt;code&gt;llm&#x2F;llm.py&lt;&#x2F;code&gt;，主要功能包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API 调用&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;调用外部 LLM 服务（如 OpenAI GPT）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流式响应&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;支持流式生成响应，提升用户体验。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-li-dai-ma&quot;&gt;示例代码&lt;&#x2F;h2&gt;
&lt;p&gt;以下是一个简单的 LLM 调用示例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LLM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model_name&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.model_name = model_name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; str:
&lt;&#x2F;span&gt;&lt;span&gt;        response = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;external_llm_api_call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.model_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;=prompt)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;response
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;jiao-hu-liu-cheng&quot;&gt;交互流程&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成提示&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;代理生成提示（prompt）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调用 LLM&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;llm.py&lt;&#x2F;code&gt; 调用大语言模型。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;返回响应&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;LLM 返回生成的响应文本。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过与大语言模型的交互，OpenHands 能够生成高质量的响应。在下一篇文章中，我们将解析事件流与存储管理的实现细节。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;下一篇：&lt;a href=&quot;#&quot;&gt;OpenHands 源码解析系列（七）：事件流与存储管理&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 源码解析系列（七）：事件流与存储管理</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-source-code-analysis-007/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-source-code-analysis-007/</id>
        
        <content type="html">&lt;p&gt;在 OpenHands 中，事件流和存储管理是系统的核心功能之一。本文将深入解析事件流的处理逻辑和存储管理模块的实现细节，帮助读者理解其设计理念和实现方式。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-jian-liu-chu-li-luo-ji&quot;&gt;事件流处理逻辑&lt;&#x2F;h2&gt;
&lt;p&gt;事件流是 OpenHands 中用于管理异步任务和数据流的核心机制。以下是事件流处理的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件定义&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;events&#x2F;event.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：定义事件的基本结构和属性。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;示例代码&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event_type&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;payload&lt;&#x2F;span&gt;&lt;span&gt;: dict):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.event_type = event_type
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.payload = payload
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件流管理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;events&#x2F;stream.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：管理事件的发布和订阅。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用发布-订阅模式（Pub&#x2F;Sub）实现事件的异步处理。&lt;&#x2F;li&gt;
&lt;li&gt;支持事件的优先级和延迟处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件序列化&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;events&#x2F;serialization&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：将事件对象序列化为 JSON 格式，便于存储和传输。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;cun-chu-guan-li-mo-kuai&quot;&gt;存储管理模块&lt;&#x2F;h2&gt;
&lt;p&gt;存储管理模块负责管理系统中的数据存储，包括本地存储和云存储。以下是存储管理模块的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;本地存储&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;storage&#x2F;local.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：管理本地文件系统中的数据存储。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;示例代码&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LocalStorage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: bytes):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(path, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wb&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;            f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(data)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; bytes:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(path, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rb&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云存储&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;storage&#x2F;s3.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：与 AWS S3 等云存储服务交互。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 boto3 库与 S3 服务交互。&lt;&#x2F;li&gt;
&lt;li&gt;支持文件的上传、下载和删除操作。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储位置管理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;storage&#x2F;locations.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：管理存储位置的配置和切换。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持多种存储后端（如本地存储、S3）。&lt;&#x2F;li&gt;
&lt;li&gt;提供统一的接口，屏蔽底层存储的实现差异。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-li-liu-cheng&quot;&gt;示例流程&lt;&#x2F;h2&gt;
&lt;p&gt;以下是一个完整的示例流程，展示了事件流和存储管理的协作：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件触发&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户上传文件，触发 &lt;code&gt;FileUploadEvent&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件处理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;事件流管理器将事件分发给存储管理模块。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据存储&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;存储管理模块根据配置选择存储后端（如本地存储或 S3），并保存文件。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件响应&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;存储完成后，生成 &lt;code&gt;FileUploadCompleteEvent&lt;&#x2F;code&gt;，通知用户上传成功。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shen-du-fen-xi-kuo-zhan-xing-yu-you-hua&quot;&gt;深度分析：扩展性与优化&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扩展性&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;新增事件类型：
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;event.py&lt;&#x2F;code&gt; 中定义新的事件类。&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;stream.py&lt;&#x2F;code&gt; 中注册事件处理器。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;新增存储后端：
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;storage&lt;&#x2F;code&gt; 模块中添加新的存储实现。&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;locations.py&lt;&#x2F;code&gt; 中配置新的存储后端。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能优化&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用异步编程：
&lt;ul&gt;
&lt;li&gt;在事件处理和存储操作中引入 &lt;code&gt;asyncio&lt;&#x2F;code&gt;，提升并发性能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;缓存机制：
&lt;ul&gt;
&lt;li&gt;对于常用的数据存储操作，引入缓存机制，减少存储访问的延迟。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;通过以上分析，我们可以看到 OpenHands 的事件流和存储管理模块设计清晰且功能强大。在下一篇文章中，我们将解析系统的安全性与扩展性设计，带你了解其核心实现。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 源码解析系列（八）：安全性与扩展性设计</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-source-code-analysis-008/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-source-code-analysis-008/</id>
        
        <content type="html">&lt;p&gt;在 OpenHands 中，安全性和扩展性是系统设计的重要考量。本文将深入解析 OpenHands 的安全性设计与系统扩展性的实现细节，帮助读者理解其核心逻辑和设计理念。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;an-quan-xing-she-ji&quot;&gt;安全性设计&lt;&#x2F;h2&gt;
&lt;p&gt;安全性是 OpenHands 系统设计的核心目标之一，以下是安全性设计的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全分析模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;security&#x2F;analyzer.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：分析系统中的潜在安全风险。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;提供静态代码分析功能，检测代码中的安全漏洞。&lt;&#x2F;li&gt;
&lt;li&gt;支持动态运行时分析，监控系统的安全状态。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全选项配置&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;security&#x2F;options.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：提供系统的安全选项配置。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持启用或禁用特定的安全功能（如防火墙、访问控制）。&lt;&#x2F;li&gt;
&lt;li&gt;提供默认的安全配置模板，便于快速部署。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不变性检查&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;security&#x2F;invariant&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：确保系统的关键属性在运行时保持不变。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;定义不变性规则（如数据完整性、权限一致性）。&lt;&#x2F;li&gt;
&lt;li&gt;在系统运行时定期检查这些规则。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;kuo-zhan-xing-she-ji&quot;&gt;扩展性设计&lt;&#x2F;h2&gt;
&lt;p&gt;扩展性是 OpenHands 系统的另一大设计目标，以下是扩展性设计的详细分析：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;插件系统&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;runtime&#x2F;plugins&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：支持通过插件扩展系统功能。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;提供插件的注册和加载机制。&lt;&#x2F;li&gt;
&lt;li&gt;支持动态加载和卸载插件。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块化设计&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;&#x2F;strong&gt;：系统的各个功能模块相互独立，便于扩展和维护。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用依赖注入（Dependency Injection）管理模块间的依赖关系。&lt;&#x2F;li&gt;
&lt;li&gt;提供统一的接口，屏蔽模块的实现细节。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置管理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;&#x2F;strong&gt;：&lt;code&gt;openhands&#x2F;core&#x2F;config&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;：管理系统的配置文件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;实现细节&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持多环境配置（如开发、测试、生产）。&lt;&#x2F;li&gt;
&lt;li&gt;提供动态配置更新功能，无需重启系统。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-li-liu-cheng&quot;&gt;示例流程&lt;&#x2F;h2&gt;
&lt;p&gt;以下是一个完整的示例流程，展示了安全性与扩展性设计的协作：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全分析&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;系统启动时，安全分析模块扫描代码和配置文件，检测潜在的安全风险。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;插件加载&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;系统根据配置文件加载必要的插件（如日志插件、监控插件）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行时检查&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;系统在运行时定期检查不变性规则，确保系统的安全性和稳定性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态扩展&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户根据需求动态加载新的插件或更新配置文件，扩展系统功能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shen-du-fen-xi-you-hua-yu-shi-jian&quot;&gt;深度分析：优化与实践&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化建议&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提高安全分析的覆盖率：
&lt;ul&gt;
&lt;li&gt;增加对第三方库的安全扫描。&lt;&#x2F;li&gt;
&lt;li&gt;引入机器学习模型，自动检测潜在的安全威胁。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;提升插件系统的性能：
&lt;ul&gt;
&lt;li&gt;使用缓存机制减少插件加载的延迟。&lt;&#x2F;li&gt;
&lt;li&gt;优化插件的注册和卸载流程。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;定期更新安全配置：
&lt;ul&gt;
&lt;li&gt;根据最新的安全威胁情报，更新系统的安全选项。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;制定扩展性规范：
&lt;ul&gt;
&lt;li&gt;为插件开发者提供详细的开发文档和示例代码。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;通过以上分析，我们可以看到 OpenHands 的安全性与扩展性设计清晰且功能强大。在下一篇文章中，我们将解析如何从源码到实践，帮助开发者快速上手 OpenHands 的开发与部署。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 源码解析系列（九）：从源码到实践</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-source-code-analysis-009/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-source-code-analysis-009/</id>
        
        <content type="html">&lt;p&gt;在 OpenHands 的开发与部署过程中，理解源码结构和实践流程是关键。本文将从源码到实践，帮助开发者快速上手 OpenHands 的开发与部署。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yuan-ma-jie-gou-hui-gu&quot;&gt;源码结构回顾&lt;&#x2F;h2&gt;
&lt;p&gt;在前几篇文章中，我们已经详细解析了 OpenHands 的源码结构。以下是对关键模块的快速回顾：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;后端模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;&#x2F;strong&gt;：解析用户意图并分配代理。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;AgentHub&lt;&#x2F;strong&gt;：管理不同类型的代理。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;LLM&lt;&#x2F;strong&gt;：与大语言模型交互。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Events&lt;&#x2F;strong&gt;：处理事件流。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;&#x2F;strong&gt;：管理数据存储。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;前端模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 React 构建用户界面。&lt;&#x2F;li&gt;
&lt;li&gt;提供与后端交互的 API 模块。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置与安全&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Config&lt;&#x2F;strong&gt;：管理系统配置。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;：提供安全分析和运行时检查。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;kai-fa-huan-jing-da-jian&quot;&gt;开发环境搭建&lt;&#x2F;h2&gt;
&lt;p&gt;在开始开发之前，需要搭建 OpenHands 的开发环境。以下是详细步骤：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;克隆代码仓库&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;openhands&#x2F;openhands.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; openhands
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装依赖&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;后端依赖&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;前端依赖&lt;&#x2F;strong&gt;：&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; frontend
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置环境变量&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;创建 &lt;code&gt;.env&lt;&#x2F;code&gt; 文件，添加必要的环境变量：&lt;pre data-lang=&quot;env&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-env &quot;&gt;&lt;code class=&quot;language-env&quot; data-lang=&quot;env&quot;&gt;&lt;span&gt;GPT_API_KEY=your-api-key
&lt;&#x2F;span&gt;&lt;span&gt;DATABASE_URL=sqlite:&#x2F;&#x2F;&#x2F;openhands.db
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启动服务&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;启动后端服务：&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;span&gt; run python openhands&#x2F;server&#x2F;app.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;启动前端服务：&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; frontend
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span&gt; run dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bu-shu-zhi-nan&quot;&gt;部署指南&lt;&#x2F;h2&gt;
&lt;p&gt;以下是 OpenHands 的部署流程，适用于生产环境：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;准备服务器&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;选择云服务提供商（如 AWS、Azure）。&lt;&#x2F;li&gt;
&lt;li&gt;创建虚拟机，安装必要的软件（如 Docker、Docker Compose）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置生产环境&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;创建生产环境的配置文件（如 &lt;code&gt;.env.production&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;li&gt;配置反向代理（如 Nginx）以处理 HTTPS 和负载均衡。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 Docker 部署&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;构建 Docker 镜像：&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; openhands .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;启动容器：&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;监控与日志&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;配置日志系统（如 ELK Stack）。&lt;&#x2F;li&gt;
&lt;li&gt;使用监控工具（如 Prometheus、Grafana）监控系统运行状态。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;kai-fa-yu-diao-shi-ji-qiao&quot;&gt;开发与调试技巧&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码调试&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 VSCode 或 PyCharm 设置断点调试。&lt;&#x2F;li&gt;
&lt;li&gt;在前端使用浏览器开发者工具调试组件和网络请求。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;测试驱动开发&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;编写单元测试：&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;span&gt; run pytest tests&#x2F;unit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;编写端到端测试：&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; frontend
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span&gt; run test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能优化&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;cProfile&lt;&#x2F;code&gt; 分析后端性能瓶颈。&lt;&#x2F;li&gt;
&lt;li&gt;在前端使用 Lighthouse 工具优化页面加载速度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-jian-an-li&quot;&gt;实践案例&lt;&#x2F;h2&gt;
&lt;p&gt;以下是一个完整的实践案例，展示了如何使用 OpenHands 完成一个任务：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;任务描述&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户希望生成一段 Python 代码，实现文件的批量重命名。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;操作流程&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户在前端输入任务描述。&lt;&#x2F;li&gt;
&lt;li&gt;后端解析用户意图，分配 &lt;code&gt;CodeActAgent&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;CodeActAgent&lt;&#x2F;code&gt; 调用 LLM 模块生成代码。&lt;&#x2F;li&gt;
&lt;li&gt;前端显示生成的代码，并提供下载选项。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结果展示&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户获得一段高质量的 Python 代码，满足其需求。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;通过以上分析，我们可以看到 OpenHands 的开发与部署流程清晰且易于实践。在下一篇文章中，我们将总结整个系列的内容，并展望 OpenHands 的未来发展方向。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands 源码解析系列（十）：总结与展望</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-source-code-analysis-010/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-source-code-analysis-010/</id>
        
        <content type="html">&lt;p&gt;经过前九篇文章的详细解析，我们已经全面了解了 OpenHands 的架构设计、核心模块和实现细节。本篇文章将总结整个系列的核心内容，并展望 OpenHands 的未来发展方向。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;xi-lie-nei-rong-hui-gu&quot;&gt;系列内容回顾&lt;&#x2F;h2&gt;
&lt;p&gt;以下是 OpenHands 源码解析系列的核心内容回顾：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;项目概览与架构设计&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;介绍了 OpenHands 的整体架构和模块划分。&lt;&#x2F;li&gt;
&lt;li&gt;强调了模块化设计的优势。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;前端架构与用户交互流程&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;解析了前端的技术栈、组件设计及与后端的交互逻辑。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;后端架构与核心模块&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;深入分析了后端的模块划分、启动流程及核心逻辑。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对话管理与意图解析&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;详细解析了用户输入的意图解析和代理分配逻辑。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代理系统与任务分配&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;介绍了代理的设计模式及其在任务分配中的作用。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;与大语言模型（LLM）的交互&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;解析了 LLM 模块的实现及其与外部服务的交互逻辑。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件流与存储管理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;分析了事件流处理逻辑和存储管理模块的实现细节。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全性与扩展性设计&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;介绍了系统的安全性设计和扩展性实现。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;从源码到实践&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提供了开发与部署的详细指南，帮助开发者快速上手。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;he-xin-she-ji-li-nian&quot;&gt;核心设计理念&lt;&#x2F;h2&gt;
&lt;p&gt;通过对 OpenHands 的源码解析，我们可以总结出以下核心设计理念：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块化与解耦&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;系统的各个模块相互独立，便于扩展和维护。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全性优先&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提供全面的安全分析和运行时检查，确保系统的稳定性和可靠性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户体验至上&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;前端设计注重用户体验，提供直观的交互界面。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高效的任务处理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;通过代理系统和 LLM 模块，高效地完成复杂任务。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;wei-lai-fa-zhan-fang-xiang&quot;&gt;未来发展方向&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 作为一个自动化的 AI 软件工程师项目，未来有以下发展方向：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;支持更多的 LLM 服务&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;集成更多的大语言模型服务（如 Anthropic、Google Bard）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;增强多任务处理能力&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提升代理系统的并发性能，支持更多任务的同时处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化用户体验&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提供更多的前端组件和模板，满足不同场景的需求。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开源社区建设&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;吸引更多开发者参与，丰富插件生态。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跨平台支持&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;提供移动端和桌面端的支持，扩展使用场景。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zhi-xie&quot;&gt;致谢&lt;&#x2F;h2&gt;
&lt;p&gt;感谢所有参与 OpenHands 开发和维护的开发者，以及阅读本系列文章的读者。希望本系列文章能够帮助您更好地理解 OpenHands 的设计与实现。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;至此，OpenHands 源码解析系列已全部完成。如果您有任何问题或建议，欢迎在评论区留言！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands vs Coding Copilots: 深度剖析与对比</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-vs-coding-copilots/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-vs-coding-copilots/</id>
        
        <content type="html">&lt;p&gt;随着人工智能技术的快速发展，编程助手（Coding Copilot&#x2F;Agent）逐渐成为开发者的重要工具。本文将深度剖析 OpenHands 与 Github Copilot、Cursor 等主流编程助手的区别，探索其设计理念与应用场景。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;he-xin-dui-bi&quot;&gt;核心对比&lt;&#x2F;h2&gt;
&lt;p&gt;以下是 OpenHands 与 Github Copilot、Cursor 的核心对比：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;特性&lt;&#x2F;th&gt;&lt;th&gt;OpenHands&lt;&#x2F;th&gt;&lt;th&gt;Github Copilot&lt;&#x2F;th&gt;&lt;th&gt;Cursor&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;定位&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;自动化 AI 软件工程师&lt;&#x2F;td&gt;&lt;td&gt;编程助手&lt;&#x2F;td&gt;&lt;td&gt;编程助手&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;功能范围&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;全栈开发、任务分配、代码生成、测试&lt;&#x2F;td&gt;&lt;td&gt;代码补全、代码生成&lt;&#x2F;td&gt;&lt;td&gt;代码补全、代码生成&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;交互方式&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;前后端协作，支持复杂任务&lt;&#x2F;td&gt;&lt;td&gt;IDE 插件，专注代码片段生成&lt;&#x2F;td&gt;&lt;td&gt;IDE 插件，专注代码片段生成&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;扩展性&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;模块化设计，支持插件和代理扩展&lt;&#x2F;td&gt;&lt;td&gt;依赖 OpenAI API，扩展性有限&lt;&#x2F;td&gt;&lt;td&gt;依赖 OpenAI API，扩展性有限&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;安全性&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供安全分析和运行时检查&lt;&#x2F;td&gt;&lt;td&gt;无内置安全分析&lt;&#x2F;td&gt;&lt;td&gt;无内置安全分析&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;目标用户&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;团队协作、全栈开发者&lt;&#x2F;td&gt;&lt;td&gt;个人开发者&lt;&#x2F;td&gt;&lt;td&gt;个人开发者&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;she-ji-li-nian&quot;&gt;设计理念&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全栈自动化&lt;&#x2F;strong&gt;：不仅限于代码生成，还支持任务分配、测试和部署。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;模块化与扩展性&lt;&#x2F;strong&gt;：通过插件和代理系统，支持多种任务和场景。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;安全性优先&lt;&#x2F;strong&gt;：内置安全分析模块，确保代码和系统的安全性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Github Copilot&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码补全为核心&lt;&#x2F;strong&gt;：专注于提高代码编写效率。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;深度集成 IDE&lt;&#x2F;strong&gt;：通过插件无缝集成到主流 IDE（如 VSCode）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;依赖 OpenAI&lt;&#x2F;strong&gt;：使用 OpenAI 的 GPT 模型生成代码。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;轻量化设计&lt;&#x2F;strong&gt;：专注于代码片段的生成和补全。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;快速响应&lt;&#x2F;strong&gt;：优化了与 OpenAI API 的交互，提升响应速度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;openhands-agent-shen-du-jie-xi&quot;&gt;OpenHands Agent 深度解析&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的 Agent 系统不仅仅局限于代码补全功能，它是一个多功能的任务执行框架，能够通过模块化设计和代理系统完成多种复杂任务。以下是 OpenHands Agent 系统的核心能力及其具体应用场景的详细解释：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;功能模块&lt;&#x2F;th&gt;&lt;th&gt;功能&lt;&#x2F;th&gt;&lt;th&gt;应用场景&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;任务分配与管理&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统能够根据用户输入的意图，自动分配任务给合适的代理（Agent）。&lt;br&gt;- 通过 Controller 模块中的 agent_controller.py，解析用户意图并选择最适合的代理。&lt;&#x2F;td&gt;&lt;td&gt;- 团队协作：在团队开发中，OpenHands 可以根据任务类型（如代码生成、测试、部署）将任务分配给不同的代理。&lt;br&gt;- 任务优先级管理：支持对任务进行优先级排序，确保关键任务优先完成。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;全栈开发支持&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统支持从需求分析到代码生成，再到测试和部署的全流程开发。&lt;br&gt;- 每个代理专注于特定的开发阶段，例如代码生成代理、测试代理、部署代理等。&lt;&#x2F;td&gt;&lt;td&gt;- 需求分析：通过自然语言处理（NLP）技术，将用户的需求描述转化为开发任务。&lt;br&gt;- 代码生成：调用 LLM 模块生成高质量的代码。&lt;br&gt;- 自动化测试：通过测试代理生成单元测试、集成测试，并自动执行测试。&lt;br&gt;- 部署支持：通过部署代理，自动化完成容器化、CI&#x2F;CD 流水线配置等任务。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;多代理协作&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统支持多个代理之间的协作，完成复杂的任务链。&lt;br&gt;- 通过 AgentHub 模块，管理和协调多个代理的工作。&lt;&#x2F;td&gt;&lt;td&gt;- 复杂任务处理：例如，用户希望实现一个完整的 Web 应用，OpenHands 可以协调代码生成代理、测试代理和部署代理共同完成任务。&lt;br&gt;- 跨领域协作：支持不同领域的代理（如数据分析代理、机器学习代理）协作完成任务。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;数据分析与处理&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统可以通过数据分析代理，处理和分析大规模数据集。&lt;br&gt;- 支持数据清洗、特征工程、模型训练等任务。&lt;&#x2F;td&gt;&lt;td&gt;- 数据清洗：通过代理自动清洗和格式化数据。&lt;br&gt;- 模型训练：调用机器学习代理，完成模型的训练和评估。&lt;br&gt;- 数据可视化：生成数据的可视化报告，帮助用户快速理解数据。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;文档生成与管理&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统可以通过文档代理，生成和管理技术文档。&lt;br&gt;- 支持从代码注释生成文档、从需求生成设计文档等功能。&lt;&#x2F;td&gt;&lt;td&gt;- API 文档生成：根据代码中的注释，自动生成 API 文档。&lt;br&gt;- 设计文档生成：根据用户的需求描述，生成系统设计文档。&lt;br&gt;- 文档版本管理：通过存储模块，管理文档的版本和历史记录。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;安全分析与优化&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统内置安全分析代理，能够检测代码和系统中的潜在安全风险。&lt;br&gt;- 提供优化建议，帮助用户提升系统的安全性。&lt;&#x2F;td&gt;&lt;td&gt;- 代码安全扫描：检测代码中的潜在漏洞（如 SQL 注入、XSS 攻击）。&lt;br&gt;- 运行时安全监控：监控系统的运行状态，发现并修复安全隐患。&lt;br&gt;- 安全优化建议：为用户提供安全配置的优化建议。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;自然语言交互&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统支持通过自然语言与用户交互，理解用户的需求并生成相应的解决方案。&lt;br&gt;- 通过 LLM 模块，支持多轮对话和上下文理解。&lt;&#x2F;td&gt;&lt;td&gt;- 需求沟通：用户可以通过自然语言描述需求，OpenHands 自动生成开发任务。&lt;br&gt;- 问题解答：用户可以提问技术问题，OpenHands 提供详细的解答。&lt;br&gt;- 代码解释：用户可以请求 OpenHands 解释某段代码的功能和逻辑。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;插件与扩展支持&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统支持通过插件扩展功能，适应不同的应用场景。&lt;br&gt;- 插件可以动态加载和卸载，提升系统的灵活性。&lt;&#x2F;td&gt;&lt;td&gt;- 自定义功能：用户可以开发自定义插件，扩展 OpenHands 的功能。&lt;br&gt;- 第三方集成：通过插件集成第三方服务（如 GitHub、Jira、Slack）。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;事件流与任务自动化&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统支持事件驱动的任务自动化。&lt;br&gt;- 通过事件流模块，管理任务的触发和执行。&lt;&#x2F;td&gt;&lt;td&gt;- 自动化工作流：例如，当用户提交代码时，自动触发测试和部署任务。&lt;br&gt;- 实时通知：当任务完成或失败时，自动通知用户。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;知识管理与学习&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统可以通过知识管理代理，帮助用户整理和管理技术知识。&lt;br&gt;- 支持知识的存储、检索和更新。&lt;&#x2F;td&gt;&lt;td&gt;- 技术知识库：为团队创建和维护技术知识库。&lt;br&gt;- 学习建议：根据用户的需求，推荐相关的学习资源。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 与 Github Copilot、Cursor 的核心区别在于定位和功能范围。OpenHands 更像是一个全栈的 AI 软件工程师，适合团队协作和复杂任务；而 Github Copilot 和 Cursor 则专注于代码补全和生成，适合个人开发者的日常需求。&lt;&#x2F;p&gt;
&lt;p&gt;未来，随着技术的不断发展，这些工具将进一步优化和扩展，为开发者提供更高效的支持。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Azure部署OpenHands指南</title>
        <published>2025-02-12T00:00:00+00:00</published>
        <updated>2025-02-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-deployment-guidance/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-deployment-guidance/</id>
        
        <content type="html">&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;在现代软件开发中，自动化和智能化工具的使用变得越来越重要。OpenHands 是一个强大的工具，可以帮助开发者快速部署和管理项目。本指南将详细介绍如何在 Azure 上部署 OpenHands，包括安装 Docker 和 Docker Compose，配置 Azure 的 GPT-4o API 接口，并将服务映射到外网的 80 端口。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bu-zou-1-zai-azure-shang-chuang-jian-xu-ni-ji&quot;&gt;步骤 1: 在 Azure 上创建虚拟机&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;登录 &lt;a href=&quot;https:&#x2F;&#x2F;portal.azure.com&quot;&gt;Azure 门户&lt;&#x2F;a&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;创建一个新的虚拟机，选择以下配置：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作系统&lt;&#x2F;strong&gt;: Ubuntu 20.04 LTS&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;大小&lt;&#x2F;strong&gt;: 至少 2 核 CPU 和 4GB 内存&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;网络&lt;&#x2F;strong&gt;: 确保启用了 HTTP 和 HTTPS 端口。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;启动虚拟机并通过 SSH 连接到它。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh&lt;&#x2F;span&gt;&lt;span&gt; azureuser@your-vm-ip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;bu-zou-2-an-zhuang-docker-he-docker-compose&quot;&gt;步骤 2: 安装 Docker 和 Docker Compose&lt;&#x2F;h2&gt;
&lt;p&gt;在虚拟机中运行以下命令以安装 Docker 和 Docker Compose：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;安装 Docker&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; apt-transport-https ca-certificates curl software-properties-common
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -fsSL&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; gpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --dearmor -o&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deb [arch=&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dpkg --print-architecture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) signed-by=&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lsb_release -cs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) stable&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &amp;gt; &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; docker-ce docker-ce-cli containerd.io
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;安装 Docker Compose&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -L &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;latest &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -oP &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;tag_name&amp;quot;: &amp;quot;\K[^&amp;quot;]+&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&#x2F;docker-compose-&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname -s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)-&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname -m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;验证安装：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker --version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker-compose --version
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;(Optional) 创建 docker 用户组并加入当前用户，上一步验证失败时运行&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; usermod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -aG&lt;&#x2F;span&gt;&lt;span&gt; docker $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;USER
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newgrp&lt;&#x2F;span&gt;&lt;span&gt; docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart docker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;bu-zou-3-bu-shu-openhands&quot;&gt;步骤 3: 部署 OpenHands&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;拉取 OpenHands 镜像文件：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; pull docker.all-hands.dev&#x2F;all-hands-ai&#x2F;runtime:0.25-nikolaik
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;启动 OpenHands 服务：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Option-1: WSL&#x2F;Power Shell运行命令：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -it --rm --pull&lt;&#x2F;span&gt;&lt;span&gt;=always \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    -e&lt;&#x2F;span&gt;&lt;span&gt; SANDBOX_RUNTIME_CONTAINER_IMAGE=docker.all-hands.dev&#x2F;all-hands-ai&#x2F;runtime:0.27-nikolaik \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    -e&lt;&#x2F;span&gt;&lt;span&gt; LOG_ALL_EVENTS=true \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    -v&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    -v ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.openhands-state:&#x2F;.openhands-state \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    -p&lt;&#x2F;span&gt;&lt;span&gt; 80:3000 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --add-host&lt;&#x2F;span&gt;&lt;span&gt; host.docker.internal:host-gateway \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;    --name&lt;&#x2F;span&gt;&lt;span&gt; openhands-app \
&lt;&#x2F;span&gt;&lt;span&gt;    docker.all-hands.dev&#x2F;all-hands-ai&#x2F;openhands:0.27
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Option-2: 创建&lt;code&gt;docker-compose.yaml&lt;&#x2F;code&gt;文件，并在同目录下运行&lt;code&gt;docker-compose up&lt;&#x2F;code&gt;启动服务. yaml文件内容：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;openhands-app&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker.all-hands.dev&#x2F;all-hands-ai&#x2F;openhands:0.27
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands-app
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SANDBOX_RUNTIME_CONTAINER_IMAGE&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker.all-hands.dev&#x2F;all-hands-ai&#x2F;runtime:0.27-nikolaik
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LOG_ALL_EVENTS&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;~&#x2F;.openhands-state:&#x2F;.openhands-state
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;80:3000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extra_hosts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host.docker.internal:host-gateway&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tty&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin_open&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restart&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Option-3：如需挂载本地文件系统，使用如下&lt;code&gt;docker-compose.yaml&lt;&#x2F;code&gt;文件，并在同目录下运行&lt;code&gt;docker-compose up&lt;&#x2F;code&gt;启动服务即可. yaml文件内容：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;openhands-app&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker.all-hands.dev&#x2F;all-hands-ai&#x2F;openhands:0.25
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;openhands-app
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SANDBOX_RUNTIME_CONTAINER_IMAGE&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker.all-hands.dev&#x2F;all-hands-ai&#x2F;runtime:0.27-nikolaik
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LOG_ALL_EVENTS&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SANDBOX_USER_ID&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;polly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WORKSPACE_MOUNT_PATH&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;D:\docker_workspace\OpenHands\StartExperiencesApp
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;~&#x2F;.openhands-state:&#x2F;.openhands-state
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;D:\docker_workspace\OpenHands\StartExperiencesApp:&#x2F;opt&#x2F;workspace_base
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;80:3000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extra_hosts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host.docker.internal:host-gateway&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tty&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdin_open&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restart&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;
&lt;summary&gt;OpenHands 一键安装脚本 (点击展开)&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# filepath: install_openhands.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 打印彩色标题
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;print_title&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-e &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\e[1;36m==================================================\e[0m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-e &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\e[1;36m &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; \e[0m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-e &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\e[1;36m==================================================\e[0m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 检查脚本是否以root运行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id -u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-eq&lt;&#x2F;span&gt;&lt;span&gt; 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;警告: 不建议以root用户运行此脚本。请使用普通用户并配合sudo权限。&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-p &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;是否继续? (y&#x2F;n) &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-n&lt;&#x2F;span&gt;&lt;span&gt; 1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-r
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span&gt;! $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;REPLY &lt;&#x2F;span&gt;&lt;span&gt;=~ ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;Yy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1. 安装Docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print_title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1. 安装Docker&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; apt-transport-https ca-certificates curl software-properties-common
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -fsSL&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; gpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --dearmor -o&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deb [arch=&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dpkg --print-architecture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) signed-by=&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lsb_release -cs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) stable&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &amp;gt; &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; docker-ce docker-ce-cli containerd.io
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 2. 安装Docker Compose
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print_title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2. 安装Docker Compose&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DOCKER_COMPOSE_VERSION&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;latest &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -oP &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;tag_name&amp;quot;: &amp;quot;\K[^&amp;quot;]+&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;安装Docker Compose版本: &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DOCKER_COMPOSE_VERSION&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -L &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DOCKER_COMPOSE_VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;docker-compose-&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname -s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)-&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname -m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 3. 将当前用户添加到docker组
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print_title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3. 配置Docker权限&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; usermod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -aG&lt;&#x2F;span&gt;&lt;span&gt; docker $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;USER
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;已将当前用户添加到docker组，这可能需要重新登录才能生效&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 即时生效权限的几种方法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print_title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3.1 使Docker权限即时生效&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;使用newgrp命令获取新的docker组权限&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-z &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SUDO_USER&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 直接以普通用户运行脚本的情况
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt; sg docker -c &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bash -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  echo &amp;#39;✅ 已成功切换到docker组环境&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  docker --version;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 通过sudo运行脚本的情况
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;脚本通过sudo运行，请在脚本完成后重新登录或执行 &amp;#39;newgrp docker&amp;#39; 以应用权限&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 4. 验证安装
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print_title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;4. 验证Docker安装&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker --version &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Docker安装可能有问题，请退出并重新登录后再验证&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker-compose --version &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Docker Compose安装可能有问题&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 5. 创建工作目录和配置文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print_title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5. 设置OpenHands环境&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建工作目录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_DIR&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WORKSPACE_DIR&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;AICoder_Workspace&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WORKSPACE_DIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;工作目录已创建: &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WORKSPACE_DIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建docker-compose.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;docker-compose.yaml&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;services:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  openhands-app:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    image: docker.all-hands.dev&#x2F;all-hands-ai&#x2F;openhands:latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    container_name: openhands-app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    environment:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      SANDBOX_RUNTIME_CONTAINER_IMAGE: docker.all-hands.dev&#x2F;all-hands-ai&#x2F;runtime:0.27-nikolaik
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      LOG_ALL_EVENTS: &amp;quot;true&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      SANDBOX_USER_ID: &amp;quot;polly&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      WORKSPACE_MOUNT_PATH: &#x2F;home&#x2F;openhands&#x2F;workspace
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    volumes:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - ~&#x2F;.openhands-state:&#x2F;.openhands-state
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WORKSPACE_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&#x2F;home&#x2F;openhands&#x2F;workspace
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    ports:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - &amp;quot;80:3000&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    extra_hosts:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      - &amp;quot;host.docker.internal:host-gateway&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    tty: true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    stdin_open: true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    restart: unless-stopped
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOL
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker-compose.yaml 已创建: &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;docker-compose.yaml&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 6. 尝试启动Docker服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print_title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;6. 启动OpenHands服务&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_DIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 检查用户是否在docker组中
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groups &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;USER &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -q &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\bdocker\b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OpenHands服务已启动&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;当前会话中用户不在docker组，尝试使用新组权限启动服务&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 使用newgrp命令在当前会话中获取docker组权限
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;请在看到此消息后手动执行以下命令:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-e &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\e[1;33mnewgrp docker\e[0m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-e &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\e[1;33mcd &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &amp;amp;&amp;amp; docker-compose up -d\e[0m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 7. 展示使用信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print_title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;7. 使用说明&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OpenHands服务启动成功后，可通过浏览器访问: http:&#x2F;&#x2F;localhost:80&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;可用命令:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;启动服务: cd &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &amp;amp;&amp;amp; docker-compose up -d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;停止服务: cd &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &amp;amp;&amp;amp; docker-compose down&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;查看日志: cd &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &amp;amp;&amp;amp; docker-compose logs -f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;重启服务: cd &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HOME_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &amp;amp;&amp;amp; docker-compose restart&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;工作目录: &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WORKSPACE_DIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;该目录已挂载到OpenHands容器内部的&#x2F;home&#x2F;openhands&#x2F;workspace&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print_title &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;安装完成&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;注意：如果出现权限问题，请尝试注销并重新登录，或重启系统&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;PS：确保 Azure 网络安全组 (NSG) 中允许 HTTP (80) 流量。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bu-zou-4-pei-zhi-azure-de-llm-api-service-jie-kou&quot;&gt;步骤 4: 配置 Azure 的 LLM API Service 接口&lt;&#x2F;h2&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;azure-deepseek-service-deployment-guidance&#x2F;&quot;&gt;Azure部署DeepSeek&#x2F;GPT大模型服务&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bu-zou-5-openhands-zhong-pei-zhi-llm-api-jie-kou&quot;&gt;步骤 5: OpenHands 中配置LLM API 接口&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;浏览器访问 &lt;code&gt;http:&#x2F;&#x2F;&amp;lt;your-azure-server-ip&amp;gt;&lt;&#x2F;code&gt;，打开OpenHands首页
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;openhands-deployment-guidance&#x2F;OpenHands_Homepage.png&quot; alt=&quot;OpenHands Homepage&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;点击左下角“设置”按钮，配置LLM API Servie
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;openhands-deployment-guidance&#x2F;OpenHands_Configuration.png&quot; alt=&quot;OpenHands Configuration&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;开启你的AI Coding旅程
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;openhands-deployment-guidance&#x2F;OpenHands_Coding.png&quot; alt=&quot;OpenHands Coding&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;jie-yu&quot;&gt;结语&lt;&#x2F;h2&gt;
&lt;p&gt;通过以上步骤，您已经成功在 Azure 上部署了 OpenHands，并配置了 GPT-4o API 接口。现在，您可以通过外网访问您的服务，并充分利用 OpenHands 的强大功能来提升开发效率。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Azure部署DeepSeek&#x2F;GPT大模型服务</title>
        <published>2025-02-11T00:00:00+00:00</published>
        <updated>2025-02-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/azure-deepseek-service-deployment-guidance/" type="text/html"/>
        <id>https://polly2014.github.io/azure-deepseek-service-deployment-guidance/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;打开 &lt;a href=&quot;https:&#x2F;&#x2F;ai.azure.com&#x2F;&quot;&gt;Azure Foundry&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;创建project.
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;azure-deepseek-service-deployment-guidance&#x2F;azure_foundry_create_project.png&quot; alt=&quot;Azure Foundry Create Project&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;在project里创建Model Endpoint.
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;azure-deepseek-service-deployment-guidance&#x2F;azure_foundry_model_endpoint.png&quot; alt=&quot;Azure Foundry Model Endpoint&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;打开创建的Model Endpoint，里面就是key和endpoint了.
&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;azure-deepseek-service-deployment-guidance&#x2F;azure_foudnry_model_key.png&quot; alt=&quot;Azure Foundry Endpoint Key&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>如何借助GPT搭建Zola个人博客</title>
        <published>2024-05-01T00:00:00+00:00</published>
        <updated>2024-05-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/how-to-build-blog-with-zola/" type="text/html"/>
        <id>https://polly2014.github.io/how-to-build-blog-with-zola/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;media.licdn.com&#x2F;dms&#x2F;image&#x2F;D5612AQG8OZj2KQEQtg&#x2F;article-cover_image-shrink_720_1280&#x2F;0&#x2F;1694623029215?e=2147483647&amp;amp;v=beta&amp;amp;t=DwGrBLpQS7BA7eYSvw3T2NTNCXjAzw8l86KSTQTb77A&quot; alt=&quot;Zola Logo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Zola是一个使用Rust编写的静态网站生成器。它非常快速，易于使用，并且包含许多有用的功能，如Markdown支持、模板和主题。&lt;&#x2F;p&gt;
&lt;p&gt;在本文中，我将向你展示如何借助GPT搭建Zola个人博客。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-zhuang-zola&quot;&gt;安装Zola&lt;&#x2F;h2&gt;
&lt;p&gt;首先，你需要在你的计算机上安装Zola。你可以从Zola的官方网站下载最新的版本。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;getzola.org&#x2F;install.sh | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;chuang-jian-xin-de-zolaxiang-mu&quot;&gt;创建新的Zola项目&lt;&#x2F;h2&gt;
&lt;p&gt;安装Zola后，你可以使用zola init命令来创建一个新的Zola项目。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; init myblog
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;bian-xie-ni-de-di-yi-pian-bo-wen&quot;&gt;编写你的第一篇博文&lt;&#x2F;h2&gt;
&lt;p&gt;在你的Zola项目中，你可以在content目录下创建一个新的Markdown文件来编写你的第一篇博文。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+++
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;我的第一篇博文&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt; = 2024-05-01
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+++
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;这是我的第一篇博文！
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;gou-jian-he-yu-lan-ni-de-wang-zhan&quot;&gt;构建和预览你的网站&lt;&#x2F;h2&gt;
&lt;p&gt;最后，你可以使用zola serve命令来构建和预览你的网站。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; serve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在，你可以在你的浏览器中打开http:&#x2F;&#x2F;localhost:1111来查看你的网站。&lt;&#x2F;p&gt;
&lt;p&gt;借助GPT，你可以更快速、更高效地搭建你的Zola个人博客。希望你喜欢这篇文章！&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
