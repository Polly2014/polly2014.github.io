<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Polly Blog - AI Assistant, Tutorials, and Insights - AI</title>
    <subtitle>Explore Polly Blog for AI tutorials, insights, and updates on cutting-edge technology.</subtitle>
    <link href="https://polly2014.github.io/tags/ai/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://polly2014.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-03-24T00:00:00+00:00</updated>
    <id>https://polly2014.github.io/tags/ai/atom.xml</id>
    <entry xml:lang="en">
        <title>AI编程助手全面横评：七大工具功能与架构对比</title>
        <published>2025-03-24T00:00:00+00:00</published>
        <updated>2025-03-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/ai-coding-tools-comparison/" type="text/html"/>
        <id>https://polly2014.github.io/ai-coding-tools-comparison/</id>
        
        <content type="html">&lt;p&gt;以下是一份针对 &lt;strong&gt;GitHub Copilot、Cursor、Claude、OpenHands（曾用名OpenDevin）、Devin、CLine 和 Roo Code&lt;&#x2F;strong&gt; 的横向评估分析报告，涵盖功能、技术、适用场景及优缺点对比：&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;1-gai-shu&quot;&gt;&lt;strong&gt;1. 概述&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;工具&lt;&#x2F;th&gt;&lt;th&gt;类型&lt;&#x2F;th&gt;&lt;th&gt;开发商&#x2F;团队&lt;&#x2F;th&gt;&lt;th&gt;核心定位&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;GitHub Copilot&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI代码补全&#x2F;助手&lt;&#x2F;td&gt;&lt;td&gt;GitHub (Microsoft)&lt;&#x2F;td&gt;&lt;td&gt;实时代码生成与补全&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI集成IDE&lt;&#x2F;td&gt;&lt;td&gt;Cursor团队&lt;&#x2F;td&gt;&lt;td&gt;智能代码编辑与项目级上下文理解&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;通用AI助手&lt;&#x2F;td&gt;&lt;td&gt;Anthropic&lt;&#x2F;td&gt;&lt;td&gt;自然语言处理与代码辅助&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;开源AI开发者代理&lt;&#x2F;td&gt;&lt;td&gt;OpenHands社区&lt;&#x2F;td&gt;&lt;td&gt;自主完成开发任务（开源替代Devin）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI全栈开发代理&lt;&#x2F;td&gt;&lt;td&gt;Cognition AI&lt;&#x2F;td&gt;&lt;td&gt;端到端自动化开发&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;终端AI助手&lt;&#x2F;td&gt;&lt;td&gt;CLine团队&lt;&#x2F;td&gt;&lt;td&gt;命令行环境中的AI编程辅助&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;开源代码生成引擎&lt;&#x2F;td&gt;&lt;td&gt;RooVet&lt;&#x2F;td&gt;&lt;td&gt;专注高质量代码生成的开源方案&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;2-he-xin-gong-neng-dui-bi&quot;&gt;&lt;strong&gt;2. 核心功能对比&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;功能&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;GitHub Copilot&lt;&#x2F;th&gt;&lt;th&gt;Cursor&lt;&#x2F;th&gt;&lt;th&gt;Claude&lt;&#x2F;th&gt;&lt;th&gt;OpenHands&lt;&#x2F;th&gt;&lt;th&gt;Devin&lt;&#x2F;th&gt;&lt;th&gt;CLine&lt;&#x2F;th&gt;&lt;th&gt;Roo Code&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;代码补全&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;多语言支持&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;支持主流语言&lt;&#x2F;td&gt;&lt;td&gt;支持主流语言&lt;&#x2F;td&gt;&lt;td&gt;有限支持&lt;&#x2F;td&gt;&lt;td&gt;依赖模型&lt;&#x2F;td&gt;&lt;td&gt;全栈支持&lt;&#x2F;td&gt;&lt;td&gt;终端语言为主&lt;&#x2F;td&gt;&lt;td&gt;支持主流语言&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;项目级上下文理解&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;对话式交互&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;自动化任务执行&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;部分支持&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;调试与错误修复&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;开源&#x2F;可定制性&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;td&gt;⭐⭐⭐⭐⭐&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;集成开发环境&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;插件形式&lt;&#x2F;td&gt;&lt;td&gt;独立IDE&lt;&#x2F;td&gt;&lt;td&gt;无&lt;&#x2F;td&gt;&lt;td&gt;CLI&#x2F;Web&lt;&#x2F;td&gt;&lt;td&gt;独立平台&lt;&#x2F;td&gt;&lt;td&gt;终端&#x2F;VS Code&lt;&#x2F;td&gt;&lt;td&gt;可集成&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;协议支持&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;自有API&lt;&#x2F;td&gt;&lt;td&gt;自有API&lt;&#x2F;td&gt;&lt;td&gt;自有API&lt;&#x2F;td&gt;&lt;td&gt;自有API&lt;&#x2F;td&gt;&lt;td&gt;自有API&lt;&#x2F;td&gt;&lt;td&gt;部分MCP&lt;&#x2F;td&gt;&lt;td&gt;自定义协议&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-ji-zhu-zhan-yu-mo-xing&quot;&gt;&lt;strong&gt;3. 技术栈与模型&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GitHub Copilot&lt;&#x2F;strong&gt;：基于OpenAI Codex（GPT-3.5&#x2F;4衍生模型），深度优化代码生成。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;：结合GPT-4与自有模型，支持项目文件索引和上下文感知。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;：Anthropic自研Claude 3系列，长文本处理能力强，适合文档分析。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;：开源项目，可对接多种模型（如Llama 3、GPT-4），灵活性高。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;：未公开细节，推测使用多模态模型+强化学习，擅长复杂任务分解。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;：基于多种开源模型，支持终端和VS Code双环境集成，专为提升开发者效率而优化。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;：开源框架，可集成多种大语言模型，专注于代码生成质量和准确性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;4-gua-yong-chang-jing&quot;&gt;&lt;strong&gt;4. 适用场景&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;工具&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;最佳场景&lt;&#x2F;th&gt;&lt;th&gt;局限性&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Copilot&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;快速代码片段生成、学习新语言&lt;&#x2F;td&gt;&lt;td&gt;缺乏项目级规划能力&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;中小型项目开发、重构与代码审查&lt;&#x2F;td&gt;&lt;td&gt;依赖云服务，隐私性较弱&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;技术文档生成、代码解释&lt;&#x2F;td&gt;&lt;td&gt;代码生成精度较低&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;定制化开发流程、研究AI代理行为&lt;&#x2F;td&gt;&lt;td&gt;成熟度低，需手动配置&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;全栈项目自动化（从需求到部署）&lt;&#x2F;td&gt;&lt;td&gt;封闭测试中，成本未知&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;终端操作、VS Code开发、DevOps工作流&lt;&#x2F;td&gt;&lt;td&gt;依赖大型模型API，离线能力有限&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;需要本地部署、代码质量要求高的场景&lt;&#x2F;td&gt;&lt;td&gt;配置复杂，资源需求较高&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;5-you-que-dian-zong-jie&quot;&gt;&lt;strong&gt;5. 优缺点总结&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;工具&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;优点&lt;&#x2F;th&gt;&lt;th&gt;缺点&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Copilot&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;轻量级、响应快、生态集成好&lt;&#x2F;td&gt;&lt;td&gt;上下文有限，易产生重复代码&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;智能重构、项目感知、对话式调试&lt;&#x2F;td&gt;&lt;td&gt;收费高，资源占用大&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;免费可用，长文本处理优秀&lt;&#x2F;td&gt;&lt;td&gt;不专精代码，输出需人工验证&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;开源透明，可扩展性强&lt;&#x2F;td&gt;&lt;td&gt;需技术背景部署，功能不完善&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;端到端自动化，减少人工干预&lt;&#x2F;td&gt;&lt;td&gt;尚未开放，可能定价高昂&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;双环境集成，轻量级，中英双语优化&lt;&#x2F;td&gt;&lt;td&gt;API依赖较强，功能广度不及专业IDE工具&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;完全开源，高度可定制，代码质量高&lt;&#x2F;td&gt;&lt;td&gt;社区较小，文档和支持有限&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;6-wei-lai-qu-shi&quot;&gt;&lt;strong&gt;6. 未来趋势&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Copilot&lt;&#x2F;strong&gt;：进一步融入GitHub生态系统（如CI&#x2F;CD）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;：可能增加本地化模型支持以提升隐私性。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;：社区驱动下或成为Devin的平替方案。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;：若开放API，可能颠覆传统开发流程。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;：增强与DevOps工具链集成，提升自动化能力。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;：发展更丰富的插件生态，支持更多编程语言。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;7-tui-jian-xuan-ze&quot;&gt;&lt;strong&gt;7. 推荐选择&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;个人开发者&#x2F;学生&lt;&#x2F;strong&gt;：Copilot + Claude（免费组合）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;中小团队&lt;&#x2F;strong&gt;：Cursor（平衡功能与成本）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;企业研究&lt;&#x2F;strong&gt;：OpenHands（定制化探索）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;全栈自动化&lt;&#x2F;strong&gt;：等待Devin正式发布。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;终端重度用户&lt;&#x2F;strong&gt;：CLine（命令行效率提升）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;注重隐私与开源&lt;&#x2F;strong&gt;：Roo Code（本地部署，完全可控）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;8-mcpyu-codeactshen-du-jie-xi&quot;&gt;&lt;strong&gt;8. MCP与CodeAct深度解析&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;AI编程工具的发展已经从简单的代码补全走向了更复杂的开发者代理。这一演变过程中，涌现出两个关键技术范式：&lt;strong&gt;MCP（Model Context Protocol）&lt;strong&gt;和&lt;&#x2F;strong&gt;CodeAct&lt;&#x2F;strong&gt;，它们分别代表了AI编程工具的&amp;quot;协议标准化&amp;quot;和&amp;quot;行为模式化&amp;quot;方向。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;8-1-mcp-model-context-protocol-pou-xi&quot;&gt;&lt;strong&gt;8.1 MCP（Model Context Protocol）剖析&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;MCP是一种旨在标准化大语言模型与外部环境交互的协议框架，其核心特点包括：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;MCP特性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;描述&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;优势&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;结构化上下文&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;统一定义模型可见的上下文表示方式&lt;&#x2F;td&gt;&lt;td&gt;减少歧义，提高交互稳定性&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;工具调用标准化&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;定义了一致的工具声明和调用格式&lt;&#x2F;td&gt;&lt;td&gt;简化工具集成，提高兼容性&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;多模型兼容&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;一套协议可应用于不同的底层模型&lt;&#x2F;td&gt;&lt;td&gt;降低适配成本，提升可移植性&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;交互状态管理&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;规范化管理对话历史和上下文转换&lt;&#x2F;td&gt;&lt;td&gt;提高长期对话的连贯性和效率&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;目前主流AI编程工具中，只有CLine在部分功能上支持MCP，而大多数工具如Copilot、Cursor和OpenHands都采用各自的专有接口。MCP作为新兴标准，目前仍在探索阶段，尚未得到广泛采用。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;8-2-codeactxing-wei-mo-shi&quot;&gt;&lt;strong&gt;8.2 CodeAct行为模式&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;CodeAct是OpenHands中实现的一种AI代理行为框架，受到ReAct思想启发，专注于代码开发领域的任务执行：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;核心行为模式&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;功能描述&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;应用场景&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;思考（Think）&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;分析问题，规划解决方案&lt;&#x2F;td&gt;&lt;td&gt;需求分析，算法设计&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;编写（Code）&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;生成符合规范的代码实现&lt;&#x2F;td&gt;&lt;td&gt;功能开发，API实现&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;执行（Execute）&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;运行代码测试结果&lt;&#x2F;td&gt;&lt;td&gt;单元测试，功能验证&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;调试（Debug）&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;分析错误，提出修复方案&lt;&#x2F;td&gt;&lt;td&gt;错误修复，性能优化&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;更新（Update）&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;基于反馈改进代码&lt;&#x2F;td&gt;&lt;td&gt;代码重构，需求调整&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;CodeAct的循环迭代模式使AI能够像人类开发者一样思考-编码-测试-调试，显著提升了自主解决编程问题的能力。CLine部分采用了类似思路但主要局限于命令行环境，而Roo Code则更专注于代码生成质量而非完整开发流程。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;8-3-mian-xiang-wei-lai-de-xie-yi-yu-xing-wei-mo-shi&quot;&gt;&lt;strong&gt;8.3 面向未来的协议与行为模式&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;虽然目前MCP和CodeAct尚未在所有工具中得到广泛应用，但它们代表了AI编程助手发展的重要方向：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;标准化协议&lt;&#x2F;strong&gt;：类似MCP的标准化协议可以简化工具开发和模型切换，提高生态兼容性。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;结构化行为&lt;&#x2F;strong&gt;：像CodeAct这样的行为框架能够提高AI代理的自主性和问题解决能力。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;开放生态&lt;&#x2F;strong&gt;：协议标准化和行为模式化的结合，将推动更开放、更灵活的AI编程工具生态。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;未来理想的AI编程工具应该同时具备标准化协议支持和高度结构化的行为模式，既能保证与各种工具和模型的兼容性，又能提供强大的自主编程能力。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;8-4-yu-qi-ta-gong-ju-de-bi-jiao&quot;&gt;&lt;strong&gt;8.4 与其他工具的比较&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;工具&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;协议架构&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;行为模式&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;开放性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;自主性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Copilot&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;封闭专有API&lt;&#x2F;td&gt;&lt;td&gt;简单补全为主&lt;&#x2F;td&gt;&lt;td&gt;低&lt;&#x2F;td&gt;&lt;td&gt;低&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;封闭专有API&lt;&#x2F;td&gt;&lt;td&gt;对话式编辑&lt;&#x2F;td&gt;&lt;td&gt;低&lt;&#x2F;td&gt;&lt;td&gt;中&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;封闭专有API&lt;&#x2F;td&gt;&lt;td&gt;自由对话&lt;&#x2F;td&gt;&lt;td&gt;低&lt;&#x2F;td&gt;&lt;td&gt;中&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;自有API&lt;&#x2F;td&gt;&lt;td&gt;CodeAct结构化循环&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Devin&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;未公开&lt;&#x2F;td&gt;&lt;td&gt;复杂任务分解&lt;&#x2F;td&gt;&lt;td&gt;未知&lt;&#x2F;td&gt;&lt;td&gt;非常高&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CLine&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;部分MCP兼容&lt;&#x2F;td&gt;&lt;td&gt;命令行专用行为&lt;&#x2F;td&gt;&lt;td&gt;中高&lt;&#x2F;td&gt;&lt;td&gt;中&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Roo Code&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;自定义协议&lt;&#x2F;td&gt;&lt;td&gt;代码生成优化&lt;&#x2F;td&gt;&lt;td&gt;高&lt;&#x2F;td&gt;&lt;td&gt;低中&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;9-mcpyu-codeactde-wei-lai-fa-zhan-qian-jing&quot;&gt;&lt;strong&gt;9. MCP与CodeAct的未来发展前景&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;随着AI编程工具的快速演进，MCP与CodeAct这两种核心技术范式的发展方向将在很大程度上决定行业未来格局。基于当前趋势，以下是对这两种范式未来发展可能性的分析：&lt;&#x2F;p&gt;
&lt;h4 id=&quot;9-1-liang-chong-fan-shi-ge-zi-you-shi&quot;&gt;&lt;strong&gt;9.1 两种范式各自优势&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;MCP(模型上下文协议)的优势：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;标准化接口，降低工具间切换成本&lt;&#x2F;li&gt;
&lt;li&gt;提高生态系统互操作性&lt;&#x2F;li&gt;
&lt;li&gt;使不同模型可以共享相同的工具集&lt;&#x2F;li&gt;
&lt;li&gt;有助于形成开放的AI基础设施&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;CodeAct的优势：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;结构化的思考-执行循环，提高解决问题能力&lt;&#x2F;li&gt;
&lt;li&gt;更好地模拟人类开发者的工作流程&lt;&#x2F;li&gt;
&lt;li&gt;增强自主性和任务完成能力&lt;&#x2F;li&gt;
&lt;li&gt;特别适合复杂编程任务的拆解与解决&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;9-2-duo-lu-jing-fa-zhan-ke-neng-xing&quot;&gt;&lt;strong&gt;9.2 多路径发展可能性&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;发展路径&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;主要特点&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;可能性&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;主要推动力&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;融合发展&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;MCP负责接口标准化，CodeAct负责行为模式化&lt;&#x2F;td&gt;&lt;td&gt;★★★★★&lt;&#x2F;td&gt;&lt;td&gt;开发效率与生态兼容性需求&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;MCP主导&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;统一接口协议成为行业标准，行为模式多样化&lt;&#x2F;td&gt;&lt;td&gt;★★★★&lt;&#x2F;td&gt;&lt;td&gt;大型科技公司战略推动&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CodeAct演进&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;多样化的专业领域行为框架，接口各自为政&lt;&#x2F;td&gt;&lt;td&gt;★★★&lt;&#x2F;td&gt;&lt;td&gt;开源社区与垂直领域需求&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;替代范式出现&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;全新交互模式取代现有范式&lt;&#x2F;td&gt;&lt;td&gt;★★&lt;&#x2F;td&gt;&lt;td&gt;前沿研究突破&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;融合发展路线（最可能）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我认为最理想且可能的发展路径是MCP与CodeAct的融合，形成&amp;quot;标准化的行为范式&amp;quot;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;协议层面：MCP负责定义标准化交互接口&lt;&#x2F;li&gt;
&lt;li&gt;行为层面：CodeAct负责结构化问题解决流程&lt;&#x2F;li&gt;
&lt;li&gt;具体实现：可能出现支持MCP标准的CodeAct框架，允许不同模型采用相同的行为模式
这种融合将使AI编程助手既具备广泛兼容性，又拥有强大的自主性，例如：一个基于MCP的编辑器可以无缝切换不同的AI模型，同时保持CodeAct式的结构化工作流程。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;作为最可能的发展路径，MCP与CodeAct的融合将带来以下优势：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;互补性强：MCP解决&amp;quot;如何交互&amp;quot;问题，CodeAct解决&amp;quot;如何行动&amp;quot;问题&lt;&#x2F;li&gt;
&lt;li&gt;生态效应：标准化接口促进工具繁荣，结构化行为提升能力水平&lt;&#x2F;li&gt;
&lt;li&gt;用户体验：既有统一交互模式，又有智能问题解决能力&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;同时面临的主要挑战：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;标准制定难度：需要多方参与的复杂协商过程&lt;&#x2F;li&gt;
&lt;li&gt;利益平衡：开源社区与商业公司的目标可能存在冲突&lt;&#x2F;li&gt;
&lt;li&gt;实现复杂性：完整支持两种范式的系统设计难度大&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;在大型企业推动下的MCP主导路线&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果微软、谷歌等大型企业决定推动MCP或类似协议成为行业标准：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;将出现更统一的API接口标准&lt;&#x2F;li&gt;
&lt;li&gt;工具生态系统将快速扩展&lt;&#x2F;li&gt;
&lt;li&gt;不同模型之间的互换性增强&lt;&#x2F;li&gt;
&lt;li&gt;但可能对行为模式创新有所限制&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;在开源社区推动下的CodeAct进化路线&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果开源社区(如OpenHands)继续推动CodeAct式的行为框架发展：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;将出现更多专业化的行为模式变体(如DataAct、TestAct等)&lt;&#x2F;li&gt;
&lt;li&gt;更多针对特定领域优化的自主代理&lt;&#x2F;li&gt;
&lt;li&gt;行为模式会更加复杂和人类化&lt;&#x2F;li&gt;
&lt;li&gt;但可能面临生态碎片化问题&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;9-3-jin-qi-yu-qi-fa-zhan&quot;&gt;&lt;strong&gt;9.3 近期预期发展&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;在未来2-3年内，我们可能会看到：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开源MCP实现增多&lt;&#x2F;strong&gt;：更多工具尝试兼容MCP或类似协议&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;CodeAct专业化&lt;&#x2F;strong&gt;：针对特定领域的行为模式变体出现（如DB-Act、Test-Act）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;混合能力工具&lt;&#x2F;strong&gt;：同时支持标准协议和高级行为模式的集成工具增加&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;更多本地解决方案&lt;&#x2F;strong&gt;：降低API依赖，提升隐私保护的混合运行模式&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;9-4-chang-qi-fa-zhan-yuan-jing&quot;&gt;&lt;strong&gt;9.4 长期发展愿景&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;从长远来看，AI编程助手将朝着&amp;quot;协议标准化+行为智能化+领域专业化&amp;quot;的方向演进。理想的未来状态是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;开发者可以使用统一的交互方式访问不同的AI模型&lt;&#x2F;li&gt;
&lt;li&gt;AI助手能够自主理解、规划和执行复杂的开发任务&lt;&#x2F;li&gt;
&lt;li&gt;针对特定领域有深度优化的专业能力&lt;&#x2F;li&gt;
&lt;li&gt;保持较高的透明度和可控性，增强开发者信任&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;总体而言，MCP与CodeAct代表了AI编程助手的两个关键发展方向：标准化与智能化。虽然两者各有所长，但真正的突破很可能来自于它们的融合与互补。未来最成功的AI编程工具将既支持标准化的交互协议，又采用结构化的任务解决模式，同时根据特定场景进行优化。&lt;&#x2F;p&gt;
&lt;p&gt;由此可见，未来最强大的AI编程助手很可能既采用标准化协议实现广泛兼容，又具备结构化的行为模式提供深度能力，同时根据特定领域进行专业化优化，为开发者提供全方位的智能辅助。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands：端到端流程原理深度剖析</title>
        <published>2025-03-07T00:00:00+00:00</published>
        <updated>2025-03-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-e2e-workflow-deep-dive/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-e2e-workflow-deep-dive/</id>
        
        <content type="html">&lt;h2 id=&quot;1-yin-yan&quot;&gt;&lt;strong&gt;1. 引言&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在现代软件开发中，自动化工具已经成为不可或缺的一部分。然而，传统的自动化工具往往局限于特定场景，无法灵活适应复杂的用户需求。为了解决这一问题，OpenHands 应运而生。&lt;&#x2F;p&gt;
&lt;p&gt;OpenHands 是一个自动化 AI 软件工程师，旨在通过端到端的交互流程，帮助用户完成从代码生成到测试运行、从文件操作到 Web 自动化等多种任务。它的核心组件——Agent，能够智能地解析用户请求、分解任务并协调执行环境完成操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;openhands-de-du-te-you-shi&quot;&gt;&lt;strong&gt;OpenHands 的独特优势&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自然语言交互&lt;&#x2F;strong&gt;：用户可以通过简单的自然语言描述任务，无需掌握复杂的技术细节。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;模块化设计&lt;&#x2F;strong&gt;：系统由多个独立模块组成，支持灵活扩展和动态调用。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;安全性与隔离&lt;&#x2F;strong&gt;：通过沙箱技术和严格的权限管理，确保任务执行的安全性。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;端到端自动化&lt;&#x2F;strong&gt;：从用户请求到任务完成，全流程自动化，无需人工干预。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2-openhands-de-zheng-ti-jia-gou&quot;&gt;&lt;strong&gt;2. OpenHands 的整体架构&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;jia-gou-tu&quot;&gt;&lt;strong&gt;架构图&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;openhands-e2e-workflow-deep-dive&#x2F;OpenHands_Architecture.png&quot; alt=&quot;OpenHands Architecture&quot; &#x2F;&gt;
上图展示了 OpenHands 的整体架构，包括用户、前端、Server、Agent、MicroAgent、Sandbox&#x2F;Browser&#x2F;Shell 等模块之间的交互关系。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mo-kuai-jian-jie&quot;&gt;&lt;strong&gt;模块简介&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模块名称&lt;&#x2F;th&gt;&lt;th&gt;描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;用户&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;用户通过自然语言描述任务，例如“生成一个 Python 函数并编写单元测试”。用户请求是整个流程的起点。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;前端&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供用户交互界面，支持文件上传、任务配置和结果展示，基于 React 构建，确保用户体验流畅。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Server&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;基于 FastAPI 构建，负责接收用户请求并将其转发给 Agent。Server 提供 RESTful API 接口，支持任务的分发、会话管理和请求验证，同时与前端交互，确保用户请求能够被正确解析并传递到后端的 Agent。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Agent&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;OpenHands 的核心组件，负责解析用户请求、分解任务并协调执行。它是整个系统的“大脑”，通过调用 MicroAgent 和执行环境完成复杂任务。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;MicroAgent&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;执行具体任务的子模块，例如文件操作、代码生成、测试运行等。每个 MicroAgent 专注于特定功能，支持动态加载和扩展，确保任务的灵活性和高效性。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;LLM&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供强大的自然语言处理能力，支持任务解析、语义分析和动态评分标准生成，确保复杂任务能够被准确理解和执行。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Memory&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;管理会话记忆和上下文信息，确保任务执行的连续性。通过 Condenser 和 ConversationMemory 模块实现高效的记忆管理。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;负责权限管理和安全审计，确保任务执行的安全性。通过沙箱技术和严格的输入验证防止恶意代码注入。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Storage&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;负责数据存储和检索，支持任务结果的持久化，确保用户能够随时访问历史任务结果。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Sandbox&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供安全、隔离的任务执行环境，确保任务执行不会影响系统的其他部分。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Browser&#x2F;Shell&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;实际的执行环境，用于完成 Web 自动化或 Shell 命令操作，支持跨平台和多种任务类型。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;本文将对 OpenHands 的架构、工作流程、技术实现以及应用场景进行全面解析。通过深入剖析每个组件的设计原理与技术细节，帮助读者理解 OpenHands 的工作机制，并探索其在自动化领域的潜力。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-gong-zuo-liu-cheng-cong-yong-hu-dao-zhi-xing-huan-jing&quot;&gt;&lt;strong&gt;3. 工作流程：从用户到执行环境&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的工作流程是一个端到端的自动化过程，从用户请求到任务完成，每个步骤都经过精心设计以确保高效、准确和安全。以下是以自动化开发与部署一个 Web 应用为核心的详细工作流程解析。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-1-yong-hu-qing-qiu-de-chu-li&quot;&gt;&lt;strong&gt;3.1 用户请求的处理&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户交互&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户通过前端描述任务，例如：
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;创建一个待办事项管理工具，前端用 React，后端用 FastAPI，支持添加、删除和标记任务为完成。将其部署到 Vercel。&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;前端通过 RESTful API 将请求发送到 Server。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Server 的作用&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Server 接收用户请求并通过 FastAPI 路由处理，定义在 &lt;code&gt;openhands.server.routes.conversation.py&lt;&#x2F;code&gt; 中：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;@router.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;v1&#x2F;execute&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute_task&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: Request):
&lt;&#x2F;span&gt;&lt;span&gt;    data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    task_description = data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task_description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    agent = Agent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_cls&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CodeActAgent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)()
&lt;&#x2F;span&gt;&lt;span&gt;    result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;agent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle_task&lt;&#x2F;span&gt;&lt;span&gt;(task_description)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: result}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-2-codeactagent-de-ren-wu-fen-jie&quot;&gt;&lt;strong&gt;3.2 CodeActAgent 的任务分解&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;任务分解&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeActAgent 接收用户请求后，将其分解为多个子任务：
&lt;ol&gt;
&lt;li&gt;生成前端代码。&lt;&#x2F;li&gt;
&lt;li&gt;生成后端代码。&lt;&#x2F;li&gt;
&lt;li&gt;优化代码（调用 LLM）。&lt;&#x2F;li&gt;
&lt;li&gt;在本地运行测试。&lt;&#x2F;li&gt;
&lt;li&gt;打包代码并上传到 Vercel。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调用 LLM&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 CodeActAgent 的 &lt;code&gt;step&lt;&#x2F;code&gt; 方法与 LLM 交互，优化代码：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: State) -&amp;gt; Action:
&lt;&#x2F;span&gt;&lt;span&gt;    messages = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_get_messages&lt;&#x2F;span&gt;&lt;span&gt;(state)
&lt;&#x2F;span&gt;&lt;span&gt;    params = {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.llm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format_messages_for_llm&lt;&#x2F;span&gt;&lt;span&gt;(messages)}
&lt;&#x2F;span&gt;&lt;span&gt;    response = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.llm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;completion&lt;&#x2F;span&gt;&lt;span&gt;(**params)
&lt;&#x2F;span&gt;&lt;span&gt;    actions = codeact_function_calling.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response_to_actions&lt;&#x2F;span&gt;&lt;span&gt;(response)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;actions:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.pending_actions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(action)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.pending_actions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;popleft&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文管理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Memory 模块（如 &lt;code&gt;ConversationMemory&lt;&#x2F;code&gt; 和 &lt;code&gt;Condenser&lt;&#x2F;code&gt;）管理会话记忆和上下文信息：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.conversation_memory = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ConversationMemory&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.prompt_manager)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.condenser = Condenser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from_config&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.config.condenser)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-3-microagent-de-ren-wu-zhi-xing&quot;&gt;&lt;strong&gt;3.3 MicroAgent 的任务执行&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在 OpenHands 中，MicroAgent 是执行具体任务的核心模块。以下是与 Todo App 开发和部署相关的 MicroAgent 实现：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CodeGenerationMicroAgent&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;负责生成前端和后端代码。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码（非 OpenHands 源码，仅为案例展示）：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CodeGenerationMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_frontend_code&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        import React, { useState } from &amp;#39;react&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        function App() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            const [tasks, setTasks] = useState([]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            const addTask = (task) =&amp;gt; setTasks([...tasks, { task, completed: false }]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            const toggleTask = (index) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                const newTasks = [...tasks];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                newTasks[index].completed = !newTasks[index].completed;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                setTasks(newTasks);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            return (
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                    &amp;lt;h1&amp;gt;Todo List&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                    &amp;lt;input id=&amp;quot;taskInput&amp;quot; placeholder=&amp;quot;Add a task&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                    &amp;lt;button onClick={() =&amp;gt; addTask(document.getElementById(&amp;#39;taskInput&amp;#39;).value)}&amp;gt;Add&amp;lt;&#x2F;button&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                    &amp;lt;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                        {tasks.map((t, i) =&amp;gt; (
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                            &amp;lt;li key=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{i}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; onClick={() =&amp;gt; toggleTask(i)} style=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; textDecoration: t.completed ? &amp;#39;line-through&amp;#39; : &amp;#39;none&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{t.task}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                            &amp;lt;&#x2F;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                        ))}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                    &amp;lt;&#x2F;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        export default App;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_backend_code&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        from fastapi import FastAPI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        app = FastAPI()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        tasks = []
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        @app.post(&amp;quot;&#x2F;add_task&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        def add_task(task: str):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            tasks.append({&amp;quot;task&amp;quot;: task, &amp;quot;completed&amp;quot;: False})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            return {&amp;quot;message&amp;quot;: &amp;quot;Task added successfully&amp;quot;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        @app.get(&amp;quot;&#x2F;tasks&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        def get_tasks():
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            return tasks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        @app.put(&amp;quot;&#x2F;toggle_task&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{index}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        def toggle_task(index: int):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            if 0 &amp;lt;= index &amp;lt; len(tasks):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                tasks[index][&amp;quot;completed&amp;quot;] = not tasks[index][&amp;quot;completed&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                return {&amp;quot;message&amp;quot;: &amp;quot;Task updated successfully&amp;quot;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            return {&amp;quot;error&amp;quot;: &amp;quot;Invalid index&amp;quot;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BrowserMicroAgent&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;负责自动化部署到 Vercel。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码（非 OpenHands 源码，仅为案例展示）：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BrowserMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deploy_to_vercel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;project_path&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 使用浏览器自动化完成部署
&lt;&#x2F;span&gt;&lt;span&gt;        browser = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialize_browser&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goto&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;vercel.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;login&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user@example.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;upload_project&lt;&#x2F;span&gt;&lt;span&gt;(project_path)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;todo-app.vercel.app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-4-zhi-xing-huan-jing-de-jiao-hu&quot;&gt;&lt;strong&gt;3.4 执行环境的交互&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;OpenHands 的执行环境交互通过文件操作和路径解析实现，确保任务执行的安全性和隔离性。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件路径解析&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;resolve_path&lt;&#x2F;code&gt; 方法将用户提供的路径解析为主机文件系统上的路径，同时确保路径安全性。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码（真实代码）：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;resolve_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file_path&lt;&#x2F;span&gt;&lt;span&gt;: str,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;working_directory&lt;&#x2F;span&gt;&lt;span&gt;: str,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_base&lt;&#x2F;span&gt;&lt;span&gt;: str,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_mount_path_in_sandbox&lt;&#x2F;span&gt;&lt;span&gt;: str,
&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    path_in_sandbox = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;(file_path)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not path_in_sandbox.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_absolute&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        path_in_sandbox = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;(working_directory) &#x2F; path_in_sandbox
&lt;&#x2F;span&gt;&lt;span&gt;    abs_path_in_sandbox = path_in_sandbox.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not abs_path_in_sandbox.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_relative_to&lt;&#x2F;span&gt;&lt;span&gt;(workspace_mount_path_in_sandbox):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PermissionError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;File access not permitted: &lt;&#x2F;span&gt;&lt;span&gt;{file_path}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    path_in_workspace = abs_path_in_sandbox.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;relative_to&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;(workspace_mount_path_in_sandbox)
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;(workspace_base) &#x2F; path_in_workspace
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件读取&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;read_file&lt;&#x2F;code&gt; 方法读取文件内容，返回 &lt;code&gt;FileReadObservation&lt;&#x2F;code&gt; 对象。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码（真实代码）：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;read_file&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workdir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_base&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_mount_path_in_sandbox&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;=-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Observation:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        whole_path = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            path, workdir, workspace_base, workspace_mount_path_in_sandbox
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;PermissionError:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrorObservation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;You&amp;#39;re not allowed to access this path: &lt;&#x2F;span&gt;&lt;span&gt;{path}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;. You can only access paths inside the workspace.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(whole_path, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;file:
&lt;&#x2F;span&gt;&lt;span&gt;            lines = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read_lines&lt;&#x2F;span&gt;&lt;span&gt;(file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readlines&lt;&#x2F;span&gt;&lt;span&gt;(), start, end)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;FileNotFoundError:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrorObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;File not found: &lt;&#x2F;span&gt;&lt;span&gt;{path}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;UnicodeDecodeError:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrorObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;File could not be decoded as utf-8: &lt;&#x2F;span&gt;&lt;span&gt;{path}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;IsADirectoryError:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrorObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Path is a directory: &lt;&#x2F;span&gt;&lt;span&gt;{path}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;. You can only read files&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    code_view = &amp;#39;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(lines)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FileReadObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=path, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=code_view)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件写入&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;write_file&lt;&#x2F;code&gt; 方法支持在指定范围内插入或覆盖文件内容。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码（真实代码）：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;write_file&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workdir&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_base&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace_mount_path_in_sandbox&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;=-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Observation:
&lt;&#x2F;span&gt;&lt;span&gt;    insert = content.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        whole_path = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            path, workdir, workspace_base, workspace_mount_path_in_sandbox
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span&gt;(os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirname&lt;&#x2F;span&gt;&lt;span&gt;(whole_path)):
&lt;&#x2F;span&gt;&lt;span&gt;            os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;makedirs&lt;&#x2F;span&gt;&lt;span&gt;(os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirname&lt;&#x2F;span&gt;&lt;span&gt;(whole_path))
&lt;&#x2F;span&gt;&lt;span&gt;        mode = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span&gt;(whole_path) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r+&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(whole_path, mode, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;file:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;mode != &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;:
&lt;&#x2F;span&gt;&lt;span&gt;                all_lines = file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readlines&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                new_file = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert_lines&lt;&#x2F;span&gt;&lt;span&gt;(insert, all_lines, start, end)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                new_file = [i + &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;insert]
&lt;&#x2F;span&gt;&lt;span&gt;            file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;seek&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writelines&lt;&#x2F;span&gt;&lt;span&gt;(new_file)
&lt;&#x2F;span&gt;&lt;span&gt;            file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;truncate&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;PermissionError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ErrorObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Permission error on &lt;&#x2F;span&gt;&lt;span&gt;{path}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{e}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FileWriteObservation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=path)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;沙箱隔离&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;文件操作严格限制在工作区内，确保任务执行的安全性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-5-jie-guo-fan-hui&quot;&gt;&lt;strong&gt;3.5 结果返回&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结果整合&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;CodeActAgent 整合 MicroAgent 的结果，并通过前端返回 Web 应用的部署链接。&lt;&#x2F;li&gt;
&lt;li&gt;示例返回结果：&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Web 应用已成功部署！访问链接：https:&#x2F;&#x2F;todo-app.vercel.app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;bu-chong-mo-kuai&quot;&gt;&lt;strong&gt;补充模块&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;确保任务执行的安全性，防止恶意代码注入。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Security&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate_input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input_data&lt;&#x2F;span&gt;&lt;span&gt;: dict):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 验证用户输入，防止恶意代码注入
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dangerous_command&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; in input_data:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Invalid input detected!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storage&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;负责任务结果的持久化存储，支持用户随时访问历史任务结果。&lt;&#x2F;li&gt;
&lt;li&gt;示例代码：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Storage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;save_result&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task_id&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;: dict):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{task_id}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_result.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;            json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dump&lt;&#x2F;span&gt;&lt;span&gt;(result, f)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;4-he-xin-zu-jian-shen-du-jie-xi&quot;&gt;&lt;strong&gt;4. 核心组件深度解析&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的核心组件包括 Agent、MicroAgent 和执行环境。这些组件共同构成了系统的核心功能，确保任务能够高效、安全地完成。以下是对每个组件的详细剖析。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-1-agent&quot;&gt;&lt;strong&gt;4.1 Agent&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Agent 是 OpenHands 的“大脑”，负责接收用户请求、解析任务并协调 MicroAgent 执行具体操作。每个 Agent 都专注于特定的功能领域，例如代码生成、网页浏览或任务分发。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;agent-fen-lei-biao-ge&quot;&gt;&lt;strong&gt;Agent 分类表格&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Agent 名称&lt;&#x2F;th&gt;&lt;th&gt;路径&lt;&#x2F;th&gt;&lt;th&gt;功能描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;BrowsingAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;browsing_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;处理网页浏览相关任务，例如从网页中提取信息。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CodeActAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;codeact_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;专注于代码相关任务，例如代码生成、修复或分析。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DelegatorAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;delegator_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;负责任务的分解和分发，协调多个 Agent 和 MicroAgent 的工作。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DummyAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;dummy_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;一个简单的占位 Agent，主要用于测试或演示。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;VisualBrowsingAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;visualbrowsing_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;专注于视觉浏览任务，例如处理网页的视觉元素或截图。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;MicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;包含多个子模块，专注于特定领域的微任务，例如代码处理、数据库操作等。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;microagent-fen-lei-biao-ge&quot;&gt;&lt;strong&gt;MicroAgent 分类表格&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;MicroAgent 名称&lt;&#x2F;th&gt;&lt;th&gt;路径&lt;&#x2F;th&gt;&lt;th&gt;功能描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;InstructionsMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;instructions.py&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;加载和组织指令文件，构建嵌套字典结构。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;RegistryMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;registry.py&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;注册所有 MicroAgent，加载其定义和提示文件。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;BaseMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;agent.py&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;定义 MicroAgent 的基础功能，包括历史事件序列化、模板渲染和 LLM 调用。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ManagerMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;manager&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;管理任务的分配和执行。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CommitWriterMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;commit_writer&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;负责生成和提交代码变更。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;TypoFixerMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;typo_fixer_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;自动修复代码中的拼写错误。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;StudyRepoMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;study_repo_for_task&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;分析代码仓库以支持任务执行。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;MathMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;math_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;执行数学计算任务。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;RepoExplorerMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;repo_explorer&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;浏览和分析代码仓库。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;VerifierMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;verifier&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;验证任务执行结果的正确性。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;PostgresMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;postgres_agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;执行 PostgreSQL 数据库相关操作。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CoderMicroAgent&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;agenthub&#x2F;micro&#x2F;coder&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;负责代码生成和优化。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;agent-de-zhu-ce-yu-diao-yong&quot;&gt;&lt;strong&gt;Agent 的注册与调用&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注册&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个 Agent 在初始化时会注册到 Agent Hub。&lt;&#x2F;li&gt;
&lt;li&gt;注册信息包括 Agent 的名称、功能描述和路径。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;调用&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户请求通过 Agent Hub 分发到合适的 Agent。&lt;&#x2F;li&gt;
&lt;li&gt;Agent Hub 根据任务类型选择合适的 Agent 或 MicroAgent。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;shi-li-dai-ma-agent-de-zhu-ce&quot;&gt;&lt;strong&gt;示例代码：Agent 的注册&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.agenthub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;AgentHub
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 注册 BrowsingAgent
&lt;&#x2F;span&gt;&lt;span&gt;AgentHub.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;register_agent&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BrowsingAgent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;agenthub&#x2F;browsing_agent&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;处理网页浏览相关任务&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 注册 CodeActAgent
&lt;&#x2F;span&gt;&lt;span&gt;AgentHub.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;register_agent&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CodeActAgent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;agenthub&#x2F;codeact_agent&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;专注于代码相关任务&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;shi-li-dai-ma-agent-de-diao-yong&quot;&gt;&lt;strong&gt;示例代码：Agent 的调用&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.agenthub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;AgentHub
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 用户请求
&lt;&#x2F;span&gt;&lt;span&gt;user_request = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;提取 https:&#x2F;&#x2F;example.com 的标题和内容&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 调用合适的 Agent
&lt;&#x2F;span&gt;&lt;span&gt;agent = AgentHub.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_agent&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BrowsingAgent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;result = agent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle_request&lt;&#x2F;span&gt;&lt;span&gt;(user_request)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(result)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-2-microagent&quot;&gt;&lt;strong&gt;4.2 MicroAgent&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;MicroAgent 是 Agent 的子模块，专注于特定领域的功能实现。它们是模块化的组件，例如处理代码、数据库操作或拼写修复。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhi-ze&quot;&gt;&lt;strong&gt;职责&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;任务执行&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;根据 Agent 的指令执行具体任务。&lt;&#x2F;li&gt;
&lt;li&gt;例如，生成代码、修改文件、运行测试等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;模块化设计&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个 MicroAgent 专注于特定功能，支持动态加载和扩展。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;shi-li-dai-ma-microagent-de-zhi-xing&quot;&gt;&lt;strong&gt;示例代码：MicroAgent 的执行&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CodeGenerationMicroAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 执行代码生成逻辑
&lt;&#x2F;span&gt;&lt;span&gt;        code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_code&lt;&#x2F;span&gt;&lt;span&gt;(task[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;code
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_code&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 简单生成代码
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;def fibonacci(n):&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    if n &amp;lt;= 1: return n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    return fibonacci(n-1) + fibonacci(n-2)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-3-zhi-xing-huan-jing&quot;&gt;&lt;strong&gt;4.3 执行环境&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;执行环境是 OpenHands 的“工作场所”，包括 Sandbox、Browser 和 Shell。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zhi-ze-1&quot;&gt;&lt;strong&gt;职责&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全执行&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;提供隔离的执行环境，确保任务执行的安全性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;跨环境支持&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持多种任务类型，例如 Web 自动化、Shell 命令执行等。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;shi-li-dai-ma-zhi-xing-huan-jing-de-jiao-hu&quot;&gt;&lt;strong&gt;示例代码：执行环境的交互&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Sandbox&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute_code&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 在隔离环境中执行代码
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;(code)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Browser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;load_page&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 使用浏览器加载网页
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Loaded page: &lt;&#x2F;span&gt;&lt;span&gt;{url}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Shell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_command&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 执行系统命令
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Executed command: &lt;&#x2F;span&gt;&lt;span&gt;{command}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;ji-zhu-tiao-zhan&quot;&gt;&lt;strong&gt;技术挑战&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;解决方案：严格限制沙箱权限，防止恶意代码访问系统资源。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;解决方案：使用轻量级容器技术（如 Docker）减少资源开销。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;5-ji-zhu-zhan-yu-shi-xian-xi-jie&quot;&gt;&lt;strong&gt;5. 技术栈与实现细节&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的技术栈涵盖了后端、前端、通信机制和安全性设计。以下是对每个部分的详细解析。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-1-hou-duan-python&quot;&gt;&lt;strong&gt;5.1 后端（Python）&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;后端是 OpenHands 的核心逻辑层，负责处理用户请求、任务分解和执行。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shi-yong-de-kuang-jia-yu-ku&quot;&gt;&lt;strong&gt;使用的框架与库&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;框架&#x2F;库名称&lt;&#x2F;th&gt;&lt;th&gt;功能描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Flask&#x2F;FastAPI&lt;&#x2F;td&gt;&lt;td&gt;用于构建 REST API，支持高效的请求处理。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Pytest&lt;&#x2F;td&gt;&lt;td&gt;用于单元测试和集成测试，确保代码质量。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Asyncio&lt;&#x2F;td&gt;&lt;td&gt;实现异步任务处理，提高系统的并发能力。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;dai-ma-zu-zhi-yu-mo-kuai-hua-she-ji&quot;&gt;&lt;strong&gt;代码组织与模块化设计&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;目录结构&lt;&#x2F;th&gt;&lt;th&gt;描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;openhands&#x2F;agent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Agent 的实现。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;openhands&#x2F;microagent&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;MicroAgent 的实现。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;openhands&#x2F;sandbox&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;执行环境的实现。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;tests&#x2F;unit&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;单元测试代码。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;guan-jian-gong-neng-shi-xian&quot;&gt;&lt;strong&gt;关键功能实现&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;功能&lt;&#x2F;th&gt;&lt;th&gt;描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;任务分解&lt;&#x2F;td&gt;&lt;td&gt;使用规则或 AI 模型解析用户请求并分解任务。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;上下文管理&lt;&#x2F;td&gt;&lt;td&gt;使用字典或树结构存储任务上下文信息。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;错误处理&lt;&#x2F;td&gt;&lt;td&gt;设计错误恢复机制，确保任务失败时能够自动重试。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;5-2-qian-duan-react&quot;&gt;&lt;strong&gt;5.2 前端（React）&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;前端是用户与 OpenHands 交互的界面，提供直观的操作体验。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yong-hu-jie-mian-de-she-ji-yu-jiao-hu&quot;&gt;&lt;strong&gt;用户界面的设计与交互&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React 框架&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;构建动态、响应式的用户界面。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;组件化设计&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个功能模块对应一个独立的 React 组件，支持复用和扩展。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;状态管理&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 Redux 或 Context API 管理应用状态。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;guo-ji-hua-zhi-chi&quot;&gt;&lt;strong&gt;国际化支持&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工具&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 i18next 实现多语言支持。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;环境变量配置&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;frontend&#x2F;.env&lt;&#x2F;code&gt; 文件中设置国际化相关变量。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;gou-jian-yu-you-hua&quot;&gt;&lt;strong&gt;构建与优化&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建工具&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 Webpack 或 Vite 构建前端代码。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过代码分割和懒加载减少页面加载时间。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-3-tong-xin-ji-zhi&quot;&gt;&lt;strong&gt;5.3 通信机制&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;通信机制是前后端以及 Agent 与 MicroAgent 之间的桥梁。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;qian-hou-duan-tong-xin&quot;&gt;&lt;strong&gt;前后端通信&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;REST API&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 HTTP 协议实现前后端通信。&lt;&#x2F;li&gt;
&lt;li&gt;例如，前端发送用户请求到后端，后端返回任务结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;实现实时通信，例如任务进度更新。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;agent-yu-microagent-de-tong-xin&quot;&gt;&lt;strong&gt;Agent 与 MicroAgent 的通信&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协议设计&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 JSON 格式传递任务指令和结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;异步调用&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 Python 的 asyncio 实现异步通信。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-4-an-quan-xing&quot;&gt;&lt;strong&gt;5.4 安全性&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;安全性是 OpenHands 的重要设计目标，确保用户数据和任务执行的安全。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shu-ju-an-quan&quot;&gt;&lt;strong&gt;数据安全&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加密&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 HTTPS 加密通信，防止数据泄露。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;权限管理&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;限制用户对系统资源的访问权限。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;ren-wu-zhi-xing-an-quan&quot;&gt;&lt;strong&gt;任务执行安全&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;沙箱技术&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用容器或虚拟机隔离任务执行环境。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;输入验证&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;验证用户输入，防止恶意代码注入。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;xi-tong-an-quan&quot;&gt;&lt;strong&gt;系统安全&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;防火墙&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用防火墙保护系统免受外部攻击。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;日志监控&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;记录系统日志，检测异常行为。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>时代浪潮，舟楫争流</title>
        <published>2025-03-05T00:00:00+00:00</published>
        <updated>2025-03-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/qinyuanchun-changsha/" type="text/html"/>
        <id>https://polly2014.github.io/qinyuanchun-changsha/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;独立寒秋，湘江北去，橘子洲头。&lt;&#x2F;p&gt;
&lt;p&gt;看万山红遍，层林尽染；漫江碧透，百舸争流。&lt;&#x2F;p&gt;
&lt;p&gt;鹰击长空，鱼翔浅底，万类霜天竞自由。&lt;&#x2F;p&gt;
&lt;p&gt;怅寥廓，问苍茫大地，谁主沉浮？&lt;&#x2F;p&gt;
&lt;p&gt;携来百侣曾游。忆往昔峥嵘岁月稠。&lt;&#x2F;p&gt;
&lt;p&gt;恰同学少年，风华正茂；书生意气，挥斥方遒。&lt;&#x2F;p&gt;
&lt;p&gt;指点江山，激扬文字，粪土当年万户侯。&lt;&#x2F;p&gt;
&lt;p&gt;曾记否，到中流击水，浪遏飞舟？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;昨夜与一良友觥筹交错，杯盏流转之间，不觉谈及当今AI技术之迅猛。酒阑人散，漫步归程，仰望星空，忽有所感。&lt;&#x2F;p&gt;
&lt;p&gt;彼时教员立于橘子洲头，放眼苍茫，胸怀天下，写下&amp;quot;怅寥廓，问苍茫大地，谁主沉浮&amp;quot;之雄文，其气势之磅礴，格局之宏大，令后世赞叹不已。如今千百年历史长河奔涌至此，吾辈身处AI浪潮澎湃之势，亦如当年百舸争流，各展所长。&lt;&#x2F;p&gt;
&lt;p&gt;今观AI之浪潮，汹涌而来，如湘江之水，奔腾不息。GPT、Claude、Gemini、DeepSeek一众模型层出不穷，算力较量亦如群雄逐鹿，GitHub Copilot、Cluade、Cursor、Devin百家争鸣，恰似&amp;quot;万类霜天竞自由&amp;quot;。此般景象，与教员所见&amp;quot;鹰击长空，鱼翔浅底&amp;quot;之自然生态，竟有异曲同工之妙。&lt;&#x2F;p&gt;
&lt;p&gt;余尝思，当此之际，吾辈何以入局？&lt;&#x2F;p&gt;
&lt;p&gt;今夜忽有所悟，&amp;quot;曾记否，到中流击水，浪遏飞舟？&amp;quot;教员此句，一扫胸中阴霾。唯有置身浪潮，沧海横流，方显英雄本色！&lt;&#x2F;p&gt;
&lt;p style=&quot;text-align:right&quot;&gt;—— 庚寅三月，酒醒而记&lt;&#x2F;p&gt;</content>
        
    </entry>
</feed>
