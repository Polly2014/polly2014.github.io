<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Polly Blog - AI Assistant, Tutorials, and Insights - AI Agent</title>
    <subtitle>Explore Polly Blog for AI tutorials, insights, and updates on cutting-edge technology.</subtitle>
    <link href="https://polly2014.github.io/tags/ai-agent/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://polly2014.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-05-12T00:00:00+00:00</updated>
    <id>https://polly2014.github.io/tags/ai-agent/atom.xml</id>
    <entry xml:lang="en">
        <title>AI工程师的田园梦：用AI重塑舅舅的丽江古城客栈</title>
        <published>2025-05-12T00:00:00+00:00</published>
        <updated>2025-05-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/ai-engineer-renovates-lijiang-guesthouse/" type="text/html"/>
        <id>https://polly2014.github.io/ai-engineer-renovates-lijiang-guesthouse/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;ai-engineer-renovates-lijiang-guesthouse&#x2F;LiJiang_Designer.jpg&quot; alt=&quot;LiJiang GuestHouse Designer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;!--
# 博文插图的DALL-E提示词

为&quot;AI工程师的田园梦：用AI重塑舅舅的丽江古城客栈&quot;博文创建一张完美的开篇插图，以下是精心设计的DALL-E提示词：

```
A split-screen digital illustration showing the juxtaposition of technology and tradition. On the left side, a modern AI engineer with glasses working on holographic displays showing Naxi architectural designs. On the right side, a traditional Lijiang guesthouse with wooden beams, courtyard, and Eastern Asian architectural elements. In the center where the images merge, digital wireframes transform into actual wooden structures. Include Jade Dragon Snow Mountain in the background, soft evening lighting, some Dongba symbols subtly integrated into the design. Photorealistic style with vibrant colors. Top-down view perspective.
```

这个提示词的设计思路：

1. **风格对比**：通过分屏效果展现科技与传统的碰撞，呼应&quot;AI工程师外甥 × 丽江客栈舅舅&quot;的核心定位

2. **人物元素**：一侧展示代表你的AI工程师形象，另一侧展示传统客栈，体现双主角设定

3. **融合点**：中间的转变区域（数字框架变为实际木结构）暗示AI技术如何实际应用于传统建筑

4. **文化元素**：
   - 纳西族建筑特色
   - 东巴符号的巧妙融入
   - 玉龙雪山背景增添丽江标志性景观

5. **艺术处理**：
   - 照片级逼真风格，增强专业感
   - 鲜艳色彩提高视觉吸引力
   - 傍晚柔和光线营造温馨氛围

这张插图将完美体现文章的核心理念：技术与传统的和谐融合，以及AI如何赋能传统行业的创新发展，非常适合作为博文的开篇视觉元素。
--&gt;
&lt;h2 id=&quot;xin-zhang-hao-ding-wei-yu-feng-ge&quot;&gt;新账号定位与风格&lt;&#x2F;h2&gt;
&lt;p&gt;以&amp;quot;AI工程师外甥 × 丽江客栈舅舅&amp;quot;为核心，打造一个科技与传统碰撞的特色账号。这种差异化定位能在众多丽江客栈账号中脱颖而出。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhang-hao-ming-cheng-jing-xuan&quot;&gt;账号名称精选&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;「AI工程师的田园梦」&lt;&#x2F;li&gt;
&lt;li&gt;「码农外甥与客栈舅舅」&lt;&#x2F;li&gt;
&lt;li&gt;「AI助手×丽江客栈：科技改造传统」&lt;&#x2F;li&gt;
&lt;li&gt;「代码与木梁：微软工程师重建舅舅的古城客栈」&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ren-she-zhong-gou&quot;&gt;人设重构&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;我（外甥）&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;微软中国（北京）的AI 工程师，专注AI Agent开发&lt;&#x2F;li&gt;
&lt;li&gt;将前沿AI技术应用到传统行业的实践者&lt;&#x2F;li&gt;
&lt;li&gt;擅长AI内容创作、设计生成和智能助手开发&lt;&#x2F;li&gt;
&lt;li&gt;特点：理性分析与创意结合，技术与人文并重&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;舅舅&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;经验丰富的丽江客栈主，对传统文化有独到理解&lt;&#x2F;li&gt;
&lt;li&gt;对AI技术既好奇又保持健康怀疑&lt;&#x2F;li&gt;
&lt;li&gt;代表传统行业面对数字化转型的真实态度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;nei-rong-kuang-jia-sheng-ji&quot;&gt;内容框架升级&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-ai-agentzhu-li-ke-zhan-zhong-jian-xi-lie&quot;&gt;1. 「AI Agent助力客栈重建」系列&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;视频标题&lt;&#x2F;th&gt;&lt;th&gt;核心内容&lt;&#x2F;th&gt;&lt;th&gt;技术亮点&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;《我为舅舅开发的AI客栈助手，让他震惊了》&lt;&#x2F;td&gt;&lt;td&gt;展示客栈AI助手功能与舅舅反应&lt;&#x2F;td&gt;&lt;td&gt;AI Agent自动规划功能&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《用AI Agent解决丽江客栈最难的3个设计难题》&lt;&#x2F;td&gt;&lt;td&gt;针对古城建筑限制的AI解决方案&lt;&#x2F;td&gt;&lt;td&gt;多约束条件下的空间优化&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《舅舅第一次用AI Agent规划客房布局，结果太惊艳》&lt;&#x2F;td&gt;&lt;td&gt;记录舅舅使用AI工具的过程与成果&lt;&#x2F;td&gt;&lt;td&gt;用户友好的AI交互界面设计&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;2-aichuang-yi-she-ji-xi-lie&quot;&gt;2. 「AI创意设计」系列&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;视频标题&lt;&#x2F;th&gt;&lt;th&gt;核心内容&lt;&#x2F;th&gt;&lt;th&gt;技术亮点&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;《我用Midjourney设计了10种客栈风格，舅舅选了最意外的那个》&lt;&#x2F;td&gt;&lt;td&gt;多风格设计方案生成与选择&lt;&#x2F;td&gt;&lt;td&gt;Prompt精确控制风格技巧&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《如何用Prompt技术生成完美的纳西族风格室内设计》&lt;&#x2F;td&gt;&lt;td&gt;纳西族元素的AI设计指南&lt;&#x2F;td&gt;&lt;td&gt;文化元素提取与Prompt编写&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《当AI遇见传统工艺：我为舅舅生成的木雕图案被当地匠人采用了》&lt;&#x2F;td&gt;&lt;td&gt;AI设计与传统工艺结合案例&lt;&#x2F;td&gt;&lt;td&gt;传统与现代审美的AI融合&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;3-aigong-cheng-shi-de-shi-yong-ji-neng-fen-xiang-xi-lie&quot;&gt;3. 「AI工程师的实用技能分享」系列&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;视频标题&lt;&#x2F;th&gt;&lt;th&gt;核心内容&lt;&#x2F;th&gt;&lt;th&gt;技术亮点&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;《教舅舅用AI写出爆款民宿文案，订单暴增》&lt;&#x2F;td&gt;&lt;td&gt;AI文案写作实战教程&lt;&#x2F;td&gt;&lt;td&gt;行业垂直领域Prompt优化&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《用GPT-4优化客栈运营流程，效率提升300%》&lt;&#x2F;td&gt;&lt;td&gt;AI流程优化实例展示&lt;&#x2F;td&gt;&lt;td&gt;系统思维的AI应用&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《我开发的AI定价助手如何帮舅舅制定最优房价策略》&lt;&#x2F;td&gt;&lt;td&gt;AI定价算法与应用&lt;&#x2F;td&gt;&lt;td&gt;数据驱动决策的AI工具&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;4-ke-ji-xchuan-tong-wen-hua-si-kao-xi-lie&quot;&gt;4. 「科技×传统」文化思考系列&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;视频标题&lt;&#x2F;th&gt;&lt;th&gt;核心内容&lt;&#x2F;th&gt;&lt;th&gt;思考维度&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;《AI能理解纳西东巴文化吗？一次有趣的实验》&lt;&#x2F;td&gt;&lt;td&gt;AI对传统文化的理解实验&lt;&#x2F;td&gt;&lt;td&gt;技术与文化传承&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《从北京写代码到丽江砌墙：两种生活的思考》&lt;&#x2F;td&gt;&lt;td&gt;不同生活方式的对比与反思&lt;&#x2F;td&gt;&lt;td&gt;现代与传统生活的平衡&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;《当微软工程师爱上古城：我对数字游民生活的新理解》&lt;&#x2F;td&gt;&lt;td&gt;数字游民生活方式探索&lt;&#x2F;td&gt;&lt;td&gt;技术人的生活方式变革&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;nei-rong-cheng-xian-xing-shi&quot;&gt;内容呈现形式&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;shi-pin-biao-zhun-hua-jie-gou&quot;&gt;视频标准化结构&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;开场白：&amp;quot;我是微软的AI工程师，这是我用AI技术帮舅舅重建客栈的第X天...&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;核心环节：AI工具操作演示 + 实际应用效果对比&lt;&#x2F;li&gt;
&lt;li&gt;互动钩子：&amp;quot;你想让AI为你的传统行业解决什么问题？&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zhuan-ye-wen-an-shi-li&quot;&gt;专业文案示例&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;【视频标题】我用100个Prompt设计出舅舅心目中完美的丽江客栈
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;【开场】&amp;quot;作为微软的AI工程师，我从没想过有一天我会用这项技能来帮舅舅重建他的丽江古城客栈...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;【展开】&amp;quot;我为舅舅定制的这个AI设计助手能根据纳西族建筑特点、客流量预测和预算限制，自动生成最优的空间方案...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;【高潮】&amp;quot;当地设计师看到AI生成的方案后说：&amp;#39;这比我见过的大部分手工设计都要合理，而且保留了纳西族的灵魂&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;aiji-zhu-zhan-shi-huan-jie&quot;&gt;AI技术展示环节&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;aigong-cheng-shi-gong-ju-xiang-xi-lie&quot;&gt;&amp;quot;AI工程师工具箱&amp;quot;系列&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;技术类型&lt;&#x2F;th&gt;&lt;th&gt;展示内容&lt;&#x2F;th&gt;&lt;th&gt;受众价值&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Prompt工程展示&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;编写高效Prompt技巧、模板库分享、结果对比&lt;&#x2F;td&gt;&lt;td&gt;可立即应用的实用技能&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI Agent开发演示&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;客栈专用AI助手构建、自动规划流程、文化理解训练&lt;&#x2F;td&gt;&lt;td&gt;垂直领域AI应用思路&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI设计工具实操&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;Midjourney&#x2F;DALL-E使用、照片修复转化、3D空间规划&lt;&#x2F;td&gt;&lt;td&gt;视觉创意实现方法&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;jing-pin-nei-rong-qi-hua&quot;&gt;精品内容企划&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-kai-pian-xi-lie-wei-ruan-aigong-cheng-shi-de-xiang-cun-ji-hua&quot;&gt;1. 开篇系列：《微软AI工程师的乡村计划》&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一集：《我告诉微软同事要用AI技术重建舅舅的客栈，他们的反应太真实了》
&lt;ul&gt;
&lt;li&gt;介绍你的AI工程师背景和整体计划&lt;&#x2F;li&gt;
&lt;li&gt;展示技术与传统的碰撞点&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-aishe-ji-xi-lie-aiyan-zhong-de-li-jiang-gu-cheng&quot;&gt;2. AI设计系列：《AI眼中的丽江古城》&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一集：《我用10个不同Prompt让AI设计客栈外观，结果惊艳了整条古街》
&lt;ul&gt;
&lt;li&gt;详细展示Prompt编写技巧&lt;&#x2F;li&gt;
&lt;li&gt;对比不同AI设计工具的效果&lt;&#x2F;li&gt;
&lt;li&gt;记录舅舅和当地人的真实反应&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-ai-agentxi-lie-wei-jiu-jiu-da-zao-de-zhi-neng-zhu-shou&quot;&gt;3. AI Agent系列：《为舅舅打造的智能助手》&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一集：《我为舅舅开发的客栈AI助手能做这些事，连他都不敢相信》
&lt;ul&gt;
&lt;li&gt;展示如何构建垂直领域AI助手&lt;&#x2F;li&gt;
&lt;li&gt;演示AI如何帮助决策和解决问题&lt;&#x2F;li&gt;
&lt;li&gt;分享开发过程中的技巧和坑&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-shi-yong-gong-ju-xi-lie-aigong-cheng-shi-de-zhuang-xiu-mi-ji&quot;&gt;4. 实用工具系列：《AI工程师的装修秘籍》&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一集：《用AI生成完美客栈平面图，比设计师省钱还高效》
&lt;ul&gt;
&lt;li&gt;分享AI空间设计工具使用方法&lt;&#x2F;li&gt;
&lt;li&gt;提供实用的Prompt模板&lt;&#x2F;li&gt;
&lt;li&gt;展示从生成到实施的全过程&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-wen-hua-rong-he-xi-lie-airu-he-li-jie-na-xi-wen-hua&quot;&gt;5. 文化融合系列：《AI如何理解纳西文化》&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;第一集：《我训练AI理解东巴文化，结果超出预期》
&lt;ul&gt;
&lt;li&gt;展示如何引导AI学习传统文化元素&lt;&#x2F;li&gt;
&lt;li&gt;分享AI创作带有文化底蕴的设计&lt;&#x2F;li&gt;
&lt;li&gt;探讨技术如何传承和创新传统&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bian-xian-fang-xiang-zhong-gou&quot;&gt;变现方向重构&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;aifu-neng-fu-wu&quot;&gt;AI赋能服务&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;服务类型&lt;&#x2F;th&gt;&lt;th&gt;具体产品&lt;&#x2F;th&gt;&lt;th&gt;目标客户&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI助手定制服务&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;客栈AI运营助手、智能管理系统、AI设计顾问&lt;&#x2F;td&gt;&lt;td&gt;民宿客栈主、旅游行业从业者&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI培训课程&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI客栈经营指南、AI民宿设计工作坊、Prompt工程训练营&lt;&#x2F;td&gt;&lt;td&gt;行业从业者、AI爱好者&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;数字产品&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI工具包订阅、Prompt模板库、云南特色AI设计素材&lt;&#x2F;td&gt;&lt;td&gt;设计师、内容创作者、旅游业主&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;yun-ying-ce-lue-you-hua&quot;&gt;运营策略优化&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;chuang-xin-hu-dong-fang-shi&quot;&gt;创新互动方式&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;活动类型&lt;&#x2F;th&gt;&lt;th&gt;活动内容&lt;&#x2F;th&gt;&lt;th&gt;预期效果&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI共创活动&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;一句话生成梦想客栈&amp;quot;、&amp;quot;AI×传统设计PK赛&amp;quot;、&amp;quot;训练AI理解家乡文化&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;提高用户参与度、获得UGC内容&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;技术社区链接&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;案例分享、线上沙龙、连接微软&#x2F;AI社区资源&lt;&#x2F;td&gt;&lt;td&gt;扩大技术圈影响力、获取专业认可&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;双圈层运营&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;技术实现分享、实用性展示、跨界话题创造&lt;&#x2F;td&gt;&lt;td&gt;构建多元受众群体、促进跨界交流&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;xi-hua-shi-shi-shi-jian-biao&quot;&gt;细化实施时间表&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;阶段&lt;&#x2F;th&gt;&lt;th&gt;时间&lt;&#x2F;th&gt;&lt;th&gt;重点任务&lt;&#x2F;th&gt;&lt;th&gt;目标&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;启动与概念验证&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第1-4周&lt;&#x2F;td&gt;&lt;td&gt;账号建设、工具准备、首批内容发布、验证调整&lt;&#x2F;td&gt;&lt;td&gt;初步形成账号定位，获得首批粉丝&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;深度内容开发&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第5-8周&lt;&#x2F;td&gt;&lt;td&gt;AI设计展示、AI Agent功能开发、互动活动、商业合作&lt;&#x2F;td&gt;&lt;td&gt;内容体系完善，粉丝互动增强&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;扩展影响力&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第9-12周&lt;&#x2F;td&gt;&lt;td&gt;付费课程推出、KOL合作、工作坊、服务测试&lt;&#x2F;td&gt;&lt;td&gt;影响力扩大，初步变现&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;开业准备与商业化&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第13-16周&lt;&#x2F;td&gt;&lt;td&gt;商业模式完善、系统优化、预售活动、长期规划&lt;&#x2F;td&gt;&lt;td&gt;形成稳定商业模式，为客栈开业助力&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;shu-ju-zhi-biao-jian-kong&quot;&gt;数据指标监控&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;fen-si-zeng-chang-zhi-biao&quot;&gt;粉丝增长指标&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;阶段&lt;&#x2F;th&gt;&lt;th&gt;时间段&lt;&#x2F;th&gt;&lt;th&gt;粉丝目标&lt;&#x2F;th&gt;&lt;th&gt;日均增长&lt;&#x2F;th&gt;&lt;th&gt;重点指标&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;启动期&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第1-4周&lt;&#x2F;td&gt;&lt;td&gt;1万+&lt;&#x2F;td&gt;&lt;td&gt;250-350人&#x2F;日&lt;&#x2F;td&gt;&lt;td&gt;关注转化率&amp;gt;5%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;成长期&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第5-8周&lt;&#x2F;td&gt;&lt;td&gt;3万+&lt;&#x2F;td&gt;&lt;td&gt;500-700人&#x2F;日&lt;&#x2F;td&gt;&lt;td&gt;互动率&amp;gt;8%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;加速期&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第9-12周&lt;&#x2F;td&gt;&lt;td&gt;7万+&lt;&#x2F;td&gt;&lt;td&gt;800-1000人&#x2F;日&lt;&#x2F;td&gt;&lt;td&gt;完播率&amp;gt;60%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;成熟期&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;第13-16周&lt;&#x2F;td&gt;&lt;td&gt;10万+&lt;&#x2F;td&gt;&lt;td&gt;700-900人&#x2F;日&lt;&#x2F;td&gt;&lt;td&gt;转发率&amp;gt;3%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;nei-rong-xiao-guo-ping-gu-zhi-biao&quot;&gt;内容效果评估指标&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;内容类型&lt;&#x2F;th&gt;&lt;th&gt;互动率目标&lt;&#x2F;th&gt;&lt;th&gt;完播率目标&lt;&#x2F;th&gt;&lt;th&gt;转化率目标&lt;&#x2F;th&gt;&lt;th&gt;关键评估方式&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AI Agent系列&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;10%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;65%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;2%技术咨询&lt;&#x2F;td&gt;&lt;td&gt;技术问题咨询量&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;设计创意系列&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;12%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;70%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;3%模板下载&lt;&#x2F;td&gt;&lt;td&gt;Prompt模板使用量&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;实用技能系列&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;15%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;75%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;4%课程转化&lt;&#x2F;td&gt;&lt;td&gt;课程注册量&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;文化思考系列&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;8%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;55%&lt;&#x2F;td&gt;&lt;td&gt;&amp;gt;1%深度互动&lt;&#x2F;td&gt;&lt;td&gt;长评论与讨论量&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;shang-ye-zhuan-hua-zhi-biao&quot;&gt;商业转化指标&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;变现产品&lt;&#x2F;th&gt;&lt;th&gt;第一阶段目标&lt;&#x2F;th&gt;&lt;th&gt;最终转化率目标&lt;&#x2F;th&gt;&lt;th&gt;客单价目标&lt;&#x2F;th&gt;&lt;th&gt;评估周期&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;AI助手定制服务&lt;&#x2F;td&gt;&lt;td&gt;10次咨询&#x2F;周&lt;&#x2F;td&gt;&lt;td&gt;转化率&amp;gt;20%&lt;&#x2F;td&gt;&lt;td&gt;3000-5000元&lt;&#x2F;td&gt;&lt;td&gt;双周评估&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;线上课程销售&lt;&#x2F;td&gt;&lt;td&gt;50次浏览&#x2F;日&lt;&#x2F;td&gt;&lt;td&gt;转化率&amp;gt;3%&lt;&#x2F;td&gt;&lt;td&gt;299-599元&lt;&#x2F;td&gt;&lt;td&gt;周评估&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Prompt模板库&lt;&#x2F;td&gt;&lt;td&gt;100次下载&#x2F;周&lt;&#x2F;td&gt;&lt;td&gt;付费转化&amp;gt;5%&lt;&#x2F;td&gt;&lt;td&gt;99-199元&lt;&#x2F;td&gt;&lt;td&gt;周评估&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;客栈预订引流&lt;&#x2F;td&gt;&lt;td&gt;30次咨询&#x2F;周&lt;&#x2F;td&gt;&lt;td&gt;转化率&amp;gt;15%&lt;&#x2F;td&gt;&lt;td&gt;因季节浮动&lt;&#x2F;td&gt;&lt;td&gt;月度评估&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;ping-tai-biao-xian-chai-yi-hua-zhi-biao&quot;&gt;平台表现差异化指标&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;平台&lt;&#x2F;th&gt;&lt;th&gt;粉丝增长占比&lt;&#x2F;th&gt;&lt;th&gt;互动率预期&lt;&#x2F;th&gt;&lt;th&gt;转化特点&lt;&#x2F;th&gt;&lt;th&gt;重点优化方向&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;抖音&lt;&#x2F;td&gt;&lt;td&gt;占总目标的65%&lt;&#x2F;td&gt;&lt;td&gt;点赞率&amp;gt;8%&lt;&#x2F;td&gt;&lt;td&gt;流量转化快&lt;&#x2F;td&gt;&lt;td&gt;前15秒吸引力&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;小红书&lt;&#x2F;td&gt;&lt;td&gt;占总目标的35%&lt;&#x2F;td&gt;&lt;td&gt;收藏率&amp;gt;12%&lt;&#x2F;td&gt;&lt;td&gt;种草效果好&lt;&#x2F;td&gt;&lt;td&gt;图文质量与标签&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;微信视频号&lt;&#x2F;td&gt;&lt;td&gt;辅助平台&lt;&#x2F;td&gt;&lt;td&gt;留存率&amp;gt;30%&lt;&#x2F;td&gt;&lt;td&gt;忠实粉丝多&lt;&#x2F;td&gt;&lt;td&gt;深度内容与社群引导&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;hu-dong-yu-she-qu-jian-she&quot;&gt;互动与社区建设&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;zhuan-ye-she-qun-yun-ying&quot;&gt;专业社群运营&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;双层社群结构&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;公开群：AI与传统行业爱好者&lt;&#x2F;li&gt;
&lt;li&gt;付费社群：AI民宿设计与运营深度交流&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定期活动&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;每周AI工具更新分享会&lt;&#x2F;li&gt;
&lt;li&gt;月度&amp;quot;我的AI设计&amp;quot;展示会&lt;&#x2F;li&gt;
&lt;li&gt;季度线上技术沙龙&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源共享&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;建立Prompt模板共享库&lt;&#x2F;li&gt;
&lt;li&gt;开发AI工具使用指南&lt;&#x2F;li&gt;
&lt;li&gt;创建行业特定AI应用案例集&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;ying-dui-tiao-zhan-ce-lue&quot;&gt;应对挑战策略&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-ji-zhu-shi-shi-yu-xian-shi-luo-di-de-chai-ju&quot;&gt;1. 技术实施与现实落地的差距&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;潜在挑战&lt;&#x2F;th&gt;&lt;th&gt;具体表现&lt;&#x2F;th&gt;&lt;th&gt;应对策略&lt;&#x2F;th&gt;&lt;th&gt;责任人&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;设计方案不可行&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI生成设计不符合建筑规范&lt;&#x2F;td&gt;&lt;td&gt;• 建立本地设计师审核机制&lt;br&gt;• 提前收集丽江建筑限制条例&lt;br&gt;• 为AI设计增加现实约束参数&lt;&#x2F;td&gt;&lt;td&gt;我+当地设计师&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;施工技术限制&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;当地工匠无法实现AI设计效果&lt;&#x2F;td&gt;&lt;td&gt;• 邀请工匠提前参与设计评审&lt;br&gt;• 准备设计方案的简化版本&lt;br&gt;• 记录落地过程的妥协与创新&lt;&#x2F;td&gt;&lt;td&gt;舅舅+工程队&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;预算超支风险&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI方案实施成本超出预期&lt;&#x2F;td&gt;&lt;td&gt;• 每个设计标注成本估算&lt;br&gt;• 设定20%应急预算&lt;br&gt;• 优先实施投资回报率高的设计&lt;&#x2F;td&gt;&lt;td&gt;我+舅舅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;2-nei-rong-chuang-zuo-yu-yun-ying-tiao-zhan&quot;&gt;2. 内容创作与运营挑战&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;潜在挑战&lt;&#x2F;th&gt;&lt;th&gt;具体表现&lt;&#x2F;th&gt;&lt;th&gt;应对策略&lt;&#x2F;th&gt;&lt;th&gt;应急预案&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;内容同质化&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;与其他装修账号区分度不够&lt;&#x2F;td&gt;&lt;td&gt;• 强化&amp;quot;AI工程师&amp;quot;独特视角&lt;br&gt;• 每周至少1个创新型内容实验&lt;br&gt;• 建立内容差异化评估机制&lt;&#x2F;td&gt;&lt;td&gt;调整内容比例，增加技术深度&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;技术内容过于专业&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;普通观众理解困难&lt;&#x2F;td&gt;&lt;td&gt;• 建立三层解释模型&lt;br&gt;• 使用生动比喻和可视化&lt;br&gt;• 测试不同专业度的内容效果&lt;&#x2F;td&gt;&lt;td&gt;增加内容前测，收集5-10人反馈&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;算法推荐波动&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;单个平台流量突然下降&lt;&#x2F;td&gt;&lt;td&gt;• 多平台并行运营&lt;br&gt;• 建立自有流量池&lt;br&gt;• 储备3-5个爆款内容应对&lt;&#x2F;td&gt;&lt;td&gt;启动紧急互动活动，刺激算法&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;3-wen-hua-chong-tu-yu-ping-heng&quot;&gt;3. 文化冲突与平衡&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;潜在挑战&lt;&#x2F;th&gt;&lt;th&gt;具体表现&lt;&#x2F;th&gt;&lt;th&gt;应对策略&lt;&#x2F;th&gt;&lt;th&gt;文化顾问&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;传统与现代平衡&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;当地人对现代设计反感&lt;&#x2F;td&gt;&lt;td&gt;• 邀请纳西族文化顾问参与&lt;br&gt;• 举办社区意见征集活动&lt;br&gt;• 分阶段温和引入现代元素&lt;&#x2F;td&gt;&lt;td&gt;当地文化学者或年长居民&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;符号使用不当&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;东巴文化元素使用引发争议&lt;&#x2F;td&gt;&lt;td&gt;• 提前研究文化禁忌&lt;br&gt;• 尊重符号原意&lt;br&gt;• 请当地文化专家审核&lt;&#x2F;td&gt;&lt;td&gt;东巴文化研究者&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;游客与本地需求冲突&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;设计无法同时满足双方&lt;&#x2F;td&gt;&lt;td&gt;• 明确区分游客区与本地体验区&lt;br&gt;• 创建文化过渡空间&lt;br&gt;• 记录并展示平衡过程&lt;&#x2F;td&gt;&lt;td&gt;有经验的客栈主+游客代表&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;4-fu-mian-ping-lun-yu-wei-ji-guan-li&quot;&gt;4. 负面评论与危机管理&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;评论类型&lt;&#x2F;th&gt;&lt;th&gt;可能触发点&lt;&#x2F;th&gt;&lt;th&gt;应对原则&lt;&#x2F;th&gt;&lt;th&gt;反应时间&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;技术质疑&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;AI只是噱头，没有实际价值&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;• 展示具体技术效果对比&lt;br&gt;• 分享实际成本节约数据&lt;br&gt;• 邀请质疑者参与线下体验&lt;&#x2F;td&gt;&lt;td&gt;12小时内回应&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;文化批评&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;破坏传统文化，过度商业化&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;• 展示文化保护措施&lt;br&gt;• 分享与当地匠人合作案例&lt;br&gt;• 邀请文化专家进行客观评价&lt;&#x2F;td&gt;&lt;td&gt;6小时内回应&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;商业质疑&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;纯粹为了卖课&#x2F;引流&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;• 保持内容高质量与实用性&lt;br&gt;• 限制商业信息比例&amp;lt;10%&lt;br&gt;• 提供免费高价值资源&lt;&#x2F;td&gt;&lt;td&gt;24小时内调整&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;5-ji-zhu-shi-shi-feng-xian-guan-kong&quot;&gt;5. 技术实施风险管控&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;风险点&lt;&#x2F;th&gt;&lt;th&gt;风险级别&lt;&#x2F;th&gt;&lt;th&gt;预防措施&lt;&#x2F;th&gt;&lt;th&gt;应急预案&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;数据安全隐患&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;高风险&lt;&#x2F;td&gt;&lt;td&gt;• 客人信息脱敏处理&lt;br&gt;• 不在公开内容中展示系统细节&lt;br&gt;• 使用企业级安全解决方案&lt;&#x2F;td&gt;&lt;td&gt;立即下线相关内容，发布澄清&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;系统稳定性问题&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;中风险&lt;&#x2F;td&gt;&lt;td&gt;• 线下备份管理系统&lt;br&gt;• 关键功能冗余设计&lt;br&gt;• 分阶段部署，先小规模测试&lt;&#x2F;td&gt;&lt;td&gt;激活备用系统，人工接管&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;AI生成内容争议&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;中风险&lt;&#x2F;td&gt;&lt;td&gt;• 明确标注AI生成内容&lt;br&gt;• 设立内容审核机制&lt;br&gt;• 尊重原创权，引用需授权&lt;&#x2F;td&gt;&lt;td&gt;迅速删除有争议内容，道歉并更正&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;chai-yi-hua-you-shi-zong-jie&quot;&gt;差异化优势总结&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;优势点&lt;&#x2F;th&gt;&lt;th&gt;具体表现&lt;&#x2F;th&gt;&lt;th&gt;价值&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;独特专业交叉&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;AI技术×传统客栈的稀缺视角&lt;&#x2F;td&gt;&lt;td&gt;填补市场空白，创造独特价值&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;双重身份&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;微软AI工程师+客栈改造实践者&lt;&#x2F;td&gt;&lt;td&gt;增强专业可信度与内容真实性&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;工具实用性&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供即学即用的AI应用方法&lt;&#x2F;td&gt;&lt;td&gt;满足用户实际需求，提高粘性&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;真实记录&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;展示真实项目进展与效果对比&lt;&#x2F;td&gt;&lt;td&gt;增强内容代入感与说服力&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;技术普惠&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;将前沿AI技术转化为大众可理解内容&lt;&#x2F;td&gt;&lt;td&gt;扩大受众面，促进技术民主化&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;你对AI技术在传统行业的应用有什么想法？欢迎在评论区分享&lt;&#x2F;p&gt;
&lt;!--
这一全新定位将你微软AI工程师的专业身份和传统客栈改造的实践完美结合。通过AI Agent开发、Prompt工程和AI设计等核心技能展示，打造专业性与趣味性兼具的内容矩阵。这不仅能吸引传统旅游民宿圈粉丝，也能引来技术爱好者和数字化转型关注者，形成独特而广泛的受众群体。该方案充分发挥你的AI技术专长，同时保持项目的真实性和情感温度，为传统行业数字化转型提供可复制的范例。
--&gt;
&lt;!--

# 第一篇小红书文章规划

## 选定主题
我为您选择的主题是：**《纳西族东巴符号×现代设计：AI重塑丽江古城客栈接待区》**

这个主题很适合作为第一篇小红书文章，因为它:
1. 结合了文化传统与现代科技的碰撞点
2. 有视觉冲击力，适合小红书图文展示
3. 可以展现您作为AI工程师的专业能力
4. 触及丽江旅游爱好者和设计爱好者双重圈层

## 文案创作

```
【当东巴符号遇见AI设计，微软工程师的舅舅惊呆了】

作为微软AI工程师，我用一周时间帮舅舅重新设计了他丽江古城客栈的接待区，结果连本地纳西族老人都说：「这比专业设计师做得还有文化感」🤯

✨ 过程超简单：我只用了Midjourney+GPT-4，就把传统东巴符号与现代设计元素完美融合

📝 首先让AI分析了42个东巴经典符号的文化含义
🏮 然后设计了三种风格：现代简约、复古文艺、传统创新
🪑 最后为每个角落都匹配了最适合的家具与装饰品

舅舅最喜欢的是接待台背后的那面墙：AI把&quot;水&quot;、&quot;山&quot;、&quot;人&quot;三个东巴符号重新演绎，配上柔和灯光投影，远看是玉龙雪山轮廓，近看是东巴文字韵律。

💡小贴士：用AI设计传统元素时，记得先让AI学习文化背景，这样生成的内容才有灵魂！

有没有住过带有民族特色的精品客栈？你最喜欢哪些设计元素？👇🏻

#丽江旅行 #AI设计 #民宿改造 #东巴文化 #数字游民 #设计灵感
```

## Midjourney提示词

```
A reception area of a boutique guesthouse in Lijiang Ancient Town, featuring modern interpretation of Dongba symbols on the feature wall, natural wood materials, soft ambient lighting highlighting the wooden carved patterns, view of Jade Dragon Snow Mountain through window, clean minimalist furniture with Naxi ethnic textiles, high ceiling with exposed wooden beams, muted earth tones with touches of indigo blue, wide angle view, architectural photography style, realistic lighting, 8k resolution --ar 4:5
```

这个提示词包含了:
1. 基本场景：丽江古城精品客栈的接待区
2. 文化元素：东巴符号的现代演绎，纳西族纺织品
3. 建筑特点：高天花板，露出的木梁
4. 色调氛围：低调的大地色系，点缀靛蓝色
5. 拍摄风格：建筑摄影风格，宽角度视图
6. 技术参数：真实照明，8K分辨率，4:5的比例(适合小红书展示)

这个提示词将生成一张极具视觉冲击力且兼具传统文化与现代设计的接待区图片，完美配合您的文案内容。

--&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>ExecuGen: What You Get is More Than What You See - An End-to-End Agent System for Transforming Technical Content into Executable Applications</title>
        <published>2025-04-26T00:00:00+00:00</published>
        <updated>2025-04-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/execugen-transforming-technical-content-into-applications/" type="text/html"/>
        <id>https://polly2014.github.io/execugen-transforming-technical-content-into-applications/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Still Under Draft&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;execugen-what-you-get-is-more-than-what-you-see-an-end-to-end-agent-system-for-transforming-technical-content-into-executable-applications&quot;&gt;ExecuGen: What You Get is More Than What You See - An End-to-End Agent System for Transforming Technical Content into Executable Applications&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;Abstract:&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
We present ExecuGen, a novel end-to-end agent system that transforms technical blog content into executable applications. ExecuGen redefines the traditional &amp;quot;What You See Is What You Get&amp;quot; paradigm by enabling users to obtain functional implementations directly from technical documentation—providing more than what is merely visible on screen. The system consists of a browser extension (ExecuGen Extractor) that extracts content from technical blogs, a code generation component (ExecuGen Core) that understands and translates this content into executable code, and a distributed runtime environment (ExecuGen Runtime) that compiles, executes, and deploys the generated applications. To address performance challenges, we introduce an innovative Docker pool and container preheating mechanism within a Kubernetes cluster architecture. Comprehensive evaluation on 300 technical blog posts and 100 code repositories demonstrates that ExecuGen achieves higher completion rates and faster execution times compared to state-of-the-art systems. By bridging the gap between reading technical content and experiencing functional implementations, ExecuGen represents a significant advancement in intelligent agent systems for software development and technical education.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Keywords:&lt;&#x2F;strong&gt; Intelligent Agents, Code Generation, Container Orchestration, Technical Documentation, Software Automation&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;Software developers regularly consult technical blogs to learn about new technologies, algorithms, and programming techniques. However, understanding and implementing concepts from these articles often requires significant manual effort, creating a substantial gap between knowledge acquisition and practical implementation. This disconnect represents a fundamental limitation in how developers interact with technical content—requiring them to tediously translate written explanations into functional code.&lt;&#x2F;p&gt;
&lt;p&gt;Traditional approaches to software development involve reading documentation, understanding concepts, and manually implementing solutions. While recent advancements in code generation have improved this workflow, there remains a significant gap between content consumption and code execution. Existing tools often operate in isolation, requiring developers to switch between reading platforms and development environments, disrupting the learning flow and reducing productivity.&lt;&#x2F;p&gt;
&lt;p&gt;In this paper, we introduce ExecuGen, an end-to-end agent system that transforms technical blog content into executable applications. ExecuGen provides a seamless bridge between reading about technology and experiencing it firsthand. When browsing technical content, users can activate the ExecuGen Extractor browser extension to analyze the current page, extract relevant technical information, and transmit it to the ExecuGen Core. The Core component generates appropriate code, which is then compiled, executed, and deployed by the ExecuGen Runtime, ultimately providing the user with a functional implementation of the concepts described in the original content.&lt;&#x2F;p&gt;
&lt;p&gt;The key contributions of our work include:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;A novel end-to-end system architecture&lt;&#x2F;strong&gt; that seamlessly bridges technical content consumption and code execution&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A distributed agent-based design&lt;&#x2F;strong&gt; that separates content extraction, code generation, and execution into loosely coupled components&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;An innovative Docker pool and container preheating mechanism&lt;&#x2F;strong&gt; that significantly improves application startup and execution time&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A comprehensive evaluation&lt;&#x2F;strong&gt; on diverse datasets demonstrating ExecuGen&#x27;s effectiveness across various technical domains and content types&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;By transforming &amp;quot;what you see&amp;quot; (technical blog content) into &amp;quot;more than what you get&amp;quot; (functional applications), ExecuGen represents a significant advancement in how developers interact with technical information. We believe this approach has broad implications for technical education, documentation, and software development workflows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-related-work&quot;&gt;2. Related Work&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;2-1-code-generation-from-natural-language&quot;&gt;2.1 Code Generation from Natural Language&lt;&#x2F;h3&gt;
&lt;p&gt;Recent advances in large language models (LLMs) have enabled increasingly sophisticated code generation from natural language descriptions. Systems like GitHub Copilot [1] and other code-oriented LLMs have demonstrated impressive capabilities in translating natural language specifications into code snippets. However, these systems typically focus on generating code fragments rather than complete, executable applications.&lt;&#x2F;p&gt;
&lt;p&gt;Manus [2] represents a step toward more comprehensive code generation, offering an agent-based approach for creating applications from specifications. While effective for certain use cases, Manus lacks integration with existing technical content and requires users to explicitly formulate requirements. Other research has explored structured approaches to code generation [3, 4], but these typically require specialized inputs rather than working with arbitrary technical content.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-2-browser-extensions-for-developer-productivity&quot;&gt;2.2 Browser Extensions for Developer Productivity&lt;&#x2F;h3&gt;
&lt;p&gt;Browser extensions have become an important component of the modern developer toolset. Extensions like StackOverflow&#x27;s code snippet integration [5] and GitHub&#x27;s code navigation tools [6] enhance the browsing experience by providing contextual information and functionality. However, most existing extensions focus on augmenting the reading experience rather than transforming content into executable artifacts.&lt;&#x2F;p&gt;
&lt;p&gt;Some research has explored more interactive extensions [7, 8] that provide executable code snippets within documentation. These approaches typically rely on predefined examples rather than dynamically generating code from arbitrary content. ExecuGen builds upon this research by creating a more comprehensive and flexible system for content-to-code transformation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-3-container-orchestration-and-runtime-environments&quot;&gt;2.3 Container Orchestration and Runtime Environments&lt;&#x2F;h3&gt;
&lt;p&gt;Container orchestration platforms such as Kubernetes [9] have revolutionized application deployment and management. Research in this area has explored automated scaling [10], service mesh architectures [11], and efficient resource allocation [12]. However, few studies have addressed the specific challenges of container management for dynamically generated applications.&lt;&#x2F;p&gt;
&lt;p&gt;The concept of container preheating has been explored in different contexts [13, 14], particularly for serverless computing environments. These approaches typically focus on reducing cold-start latency for predetermined function types rather than supporting dynamically generated applications. Our Docker pool and preheating mechanism extends these concepts to support the diverse and unpredictable nature of applications generated from technical content.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-4-end-to-end-agent-systems&quot;&gt;2.4 End-to-End Agent Systems&lt;&#x2F;h3&gt;
&lt;p&gt;Agent-based systems have been applied to various software engineering tasks, including requirements analysis [15], testing [16], and deployment [17]. These systems typically focus on specific phases of the software lifecycle rather than providing an integrated solution across content consumption, code generation, and execution.&lt;&#x2F;p&gt;
&lt;p&gt;Recent work on autonomous coding agents [18, 19] has demonstrated the potential for more integrated approaches. However, these systems generally assume a development-focused workflow rather than bridging technical content consumption with code execution. ExecuGen builds upon this research by providing a more comprehensive agent-based solution that spans the entire workflow from content consumption to application execution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-execugen-system-architecture&quot;&gt;3. ExecuGen System Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;ExecuGen is designed as a distributed, agent-based system that seamlessly transforms technical content into executable applications. The architecture consists of three primary components: ExecuGen Extractor, ExecuGen Core, and ExecuGen Runtime, orchestrated within a Kubernetes cluster environment. Figure 1 provides an overview of the system architecture.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-1-overall-architecture&quot;&gt;3.1 Overall Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;The ExecuGen system follows an agent-based architecture where distinct components collaborate to transform technical content into executable applications. The workflow proceeds as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The user activates the ExecuGen Extractor while viewing a technical blog&lt;&#x2F;li&gt;
&lt;li&gt;The Extractor analyzes and extracts relevant content, transmitting it to the ExecuGen Core&lt;&#x2F;li&gt;
&lt;li&gt;The Core component processes the content, generating appropriate code&lt;&#x2F;li&gt;
&lt;li&gt;The ExecuGen Runtime compiles, executes, and deploys the generated code&lt;&#x2F;li&gt;
&lt;li&gt;The user receives a URL to access the deployed application&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This agent-based design allows each component to focus on specific responsibilities while maintaining loose coupling through well-defined interfaces. Communication between components occurs via secure API endpoints, with message queues handling asynchronous processing for improved scalability.&lt;&#x2F;p&gt;
&lt;p&gt;The entire system is deployed within a Kubernetes cluster, which provides robust orchestration, scaling, and failure recovery capabilities. The cluster architecture enables efficient resource allocation across components, particularly for the computationally intensive code generation and execution processes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-2-execugen-extractor&quot;&gt;3.2 ExecuGen Extractor&lt;&#x2F;h3&gt;
&lt;p&gt;The ExecuGen Extractor is implemented as a browser extension compatible with major browsers (Chrome, Firefox, Edge). It consists of three main modules:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content Analysis Module&lt;&#x2F;strong&gt;: Identifies and extracts relevant technical content from the current webpage, including code snippets, algorithms, technical descriptions, and contextual information.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content Transformation Module&lt;&#x2F;strong&gt;: Processes the extracted content into a structured format suitable for transmission to the ExecuGen Core. This includes identifying programming languages, separating code from explanatory text, and preserving important contextual information.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User Interface Module&lt;&#x2F;strong&gt;: Provides an intuitive sidebar interface that allows users to initiate the extraction process, monitor progress, and access the resulting application.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The Extractor employs several techniques to accurately identify and extract relevant content:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DOM traversal and analysis to identify content structure&lt;&#x2F;li&gt;
&lt;li&gt;Language detection for code snippets&lt;&#x2F;li&gt;
&lt;li&gt;Semantic analysis of surrounding text to establish context&lt;&#x2F;li&gt;
&lt;li&gt;Metadata extraction from the webpage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After processing, the structured content is securely transmitted to the ExecuGen Core via authenticated API calls.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-3-execugen-core&quot;&gt;3.3 ExecuGen Core&lt;&#x2F;h3&gt;
&lt;p&gt;The ExecuGen Core serves as the central intelligence of the system, transforming extracted content into executable code. It consists of four primary modules:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content Understanding Module&lt;&#x2F;strong&gt;: Analyzes the structured content received from the Extractor, identifying key concepts, requirements, and implementation details.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Generation Module&lt;&#x2F;strong&gt;: Utilizes advanced language models to generate appropriate code based on the understood content. This module selects appropriate programming languages, frameworks, and libraries based on the content analysis.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Verification Module&lt;&#x2F;strong&gt;: Performs static analysis and validation of the generated code to ensure correctness, completeness, and security.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Orchestration Module&lt;&#x2F;strong&gt;: Manages the overall workflow, including communication with the Extractor and Runtime components, handling error conditions, and providing status updates.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The Core component employs a multi-stage processing pipeline that progressively refines the understanding of the content and the corresponding code generation:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Initial content analysis to identify core concepts and requirements&lt;&#x2F;li&gt;
&lt;li&gt;Generation of high-level architecture and component design&lt;&#x2F;li&gt;
&lt;li&gt;Detailed implementation of individual components&lt;&#x2F;li&gt;
&lt;li&gt;Integration of components into a cohesive application&lt;&#x2F;li&gt;
&lt;li&gt;Verification and optimization of the generated code&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This progressive refinement approach helps ensure that the generated application accurately reflects the concepts presented in the original content while maintaining code quality and security.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-4-execugen-runtime&quot;&gt;3.4 ExecuGen Runtime&lt;&#x2F;h3&gt;
&lt;p&gt;The ExecuGen Runtime handles the compilation, execution, and deployment of applications generated by the Core component. It consists of three primary modules:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build System&lt;&#x2F;strong&gt;: Compiles and packages the generated code, managing dependencies and build configurations for various programming languages and frameworks.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Execution Environment&lt;&#x2F;strong&gt;: Provides containerized environments for running the compiled applications, ensuring isolation, security, and resource management.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deployment Manager&lt;&#x2F;strong&gt;: Configures networking, routes, and access control for deployed applications, providing users with accessible URLs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The Runtime leverages container technology to provide isolated execution environments for generated applications. Each application is deployed within its own container, with appropriate resource limits and security constraints to ensure safe execution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-5-resource-scheduling-and-docker-pool&quot;&gt;3.5 Resource Scheduling and Docker Pool&lt;&#x2F;h3&gt;
&lt;p&gt;A key innovation in ExecuGen is our Docker pool and container preheating mechanism, which significantly improves application startup and execution time. Traditional container-based approaches suffer from cold start issues, where container initialization introduces significant latency. Our approach addresses this challenge through several techniques:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Docker Pool Management&lt;&#x2F;strong&gt;: We maintain a pool of pre-initialized container images for common runtime environments (Python, JavaScript, Java, etc.). These base images include frequently used libraries and frameworks, reducing initialization time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Container Preheating&lt;&#x2F;strong&gt;: Based on content analysis in the early stages of processing, we predict the likely runtime requirements and proactively initialize appropriate containers from the pool. This preheating occurs concurrently with code generation, ensuring that a suitable environment is ready when code execution is required.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Prediction&lt;&#x2F;strong&gt;: We employ machine learning techniques to predict the resource requirements (CPU, memory, disk) for generated applications based on content characteristics. This enables more efficient resource allocation and container placement within the Kubernetes cluster.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Adaptive Scaling&lt;&#x2F;strong&gt;: The system continuously monitors resource utilization and adjusts the size and composition of the Docker pool based on observed usage patterns. This ensures efficient resource utilization while maintaining responsive performance.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Figure 2 illustrates the Docker pool and preheating mechanism, highlighting how containers are managed throughout the application lifecycle.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-implementation&quot;&gt;4. Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;This section describes the implementation details of the ExecuGen system, focusing on key algorithms, optimization techniques, and integration approaches.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-1-content-extraction-and-understanding&quot;&gt;4.1 Content Extraction and Understanding&lt;&#x2F;h3&gt;
&lt;p&gt;The content extraction process involves several steps to accurately identify and process technical content from blog posts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DOM Analysis&lt;&#x2F;strong&gt;: The Extractor employs a hierarchical DOM traversal algorithm to identify content sections, distinguishing between explanatory text, code snippets, images, and other elements. This analysis considers HTML structure, class names, and common patterns used in technical blogs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Identification&lt;&#x2F;strong&gt;: Code snippets are identified through a combination of HTML markup (e.g., &lt;code&gt;&amp;lt;pre&amp;gt;&lt;&#x2F;code&gt;, &lt;code&gt;&amp;lt;code&amp;gt;&lt;&#x2F;code&gt; tags), syntax highlighting elements, and text pattern analysis. For unmarked code, we employ a language identification model that achieves 94% accuracy across 15 common programming languages.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Context Association&lt;&#x2F;strong&gt;: To maintain relationships between explanatory text and code snippets, we implement a proximity-based association algorithm that links related content elements. This contextual information is critical for accurate code generation, as it provides intent and explanation for code fragments.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Knowledge Graph Construction&lt;&#x2F;strong&gt;: The extracted content is organized into a knowledge graph that represents concepts, relationships, and implementation details. This structured representation facilitates more accurate code generation by providing a coherent view of the technical concepts.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The content understanding algorithm employs a multi-pass approach:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;analyze_content&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extracted_content&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# First pass: Identify major components and their relationships
&lt;&#x2F;span&gt;&lt;span&gt;    components = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;identify_components&lt;&#x2F;span&gt;&lt;span&gt;(extracted_content)
&lt;&#x2F;span&gt;&lt;span&gt;    relationships = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extract_relationships&lt;&#x2F;span&gt;&lt;span&gt;(components, extracted_content)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Second pass: Extract implementation details
&lt;&#x2F;span&gt;&lt;span&gt;    implementation_details = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extract_implementation_details&lt;&#x2F;span&gt;&lt;span&gt;(components, relationships, extracted_content)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Third pass: Validate consistency and completeness
&lt;&#x2F;span&gt;&lt;span&gt;    issues = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validate_consistency&lt;&#x2F;span&gt;&lt;span&gt;(components, relationships, implementation_details)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;issues:
&lt;&#x2F;span&gt;&lt;span&gt;        components, relationships, implementation_details = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve_issues&lt;&#x2F;span&gt;&lt;span&gt;(issues, extracted_content)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Construct knowledge graph
&lt;&#x2F;span&gt;&lt;span&gt;    knowledge_graph = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;construct_knowledge_graph&lt;&#x2F;span&gt;&lt;span&gt;(components, relationships, implementation_details)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;knowledge_graph
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This algorithm achieves 89% accuracy in correctly identifying key technical concepts and their relationships across our test dataset.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-2-code-generation-strategies&quot;&gt;4.2 Code Generation Strategies&lt;&#x2F;h3&gt;
&lt;p&gt;The code generation process leverages advanced language models with domain-specific optimizations for software development. The generation strategy follows these steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Architecture Planning&lt;&#x2F;strong&gt;: Based on the knowledge graph, the system first generates a high-level architecture plan that outlines major components, their responsibilities, and interactions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Progressive Implementation&lt;&#x2F;strong&gt;: Components are implemented in order of dependency, starting with core data structures and utilities, then moving to business logic and finally user interfaces.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency Enforcement&lt;&#x2F;strong&gt;: A dedicated consistency checker ensures naming conventions, coding standards, and architectural patterns are maintained throughout the generated code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Testing Logic Generation&lt;&#x2F;strong&gt;: For each component, appropriate unit tests are generated to verify correctness and document expected behavior.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The code generation employs a specialized prompting technique that we term &amp;quot;Layered Contextual Prompting&amp;quot;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_code&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;knowledge_graph&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;framework&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Generate high-level architecture
&lt;&#x2F;span&gt;&lt;span&gt;    architecture_prompt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;construct_architecture_prompt&lt;&#x2F;span&gt;&lt;span&gt;(knowledge_graph)
&lt;&#x2F;span&gt;&lt;span&gt;    architecture = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_with_model&lt;&#x2F;span&gt;&lt;span&gt;(architecture_prompt)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Generate individual components
&lt;&#x2F;span&gt;&lt;span&gt;    components = []
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extract_components&lt;&#x2F;span&gt;&lt;span&gt;(architecture):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Create component-specific prompt with architectural context
&lt;&#x2F;span&gt;&lt;span&gt;        component_prompt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;construct_component_prompt&lt;&#x2F;span&gt;&lt;span&gt;(component, architecture, knowledge_graph)
&lt;&#x2F;span&gt;&lt;span&gt;        component_code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_with_model&lt;&#x2F;span&gt;&lt;span&gt;(component_prompt)
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Refine with consistency enforcement
&lt;&#x2F;span&gt;&lt;span&gt;        component_code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enforce_consistency&lt;&#x2F;span&gt;&lt;span&gt;(component_code, components, architecture)
&lt;&#x2F;span&gt;&lt;span&gt;        components.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(component_code)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Generate integration code
&lt;&#x2F;span&gt;&lt;span&gt;    integration_prompt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;construct_integration_prompt&lt;&#x2F;span&gt;&lt;span&gt;(components, architecture, knowledge_graph)
&lt;&#x2F;span&gt;&lt;span&gt;    integration_code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_with_model&lt;&#x2F;span&gt;&lt;span&gt;(integration_prompt)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Generate tests
&lt;&#x2F;span&gt;&lt;span&gt;    test_code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generate_tests&lt;&#x2F;span&gt;&lt;span&gt;(components, integration_code, knowledge_graph)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assemble_application&lt;&#x2F;span&gt;&lt;span&gt;(components, integration_code, test_code)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach ensures that each generated component maintains awareness of the overall architecture and other components, resulting in more coherent and integrated applications.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-3-docker-pool-management&quot;&gt;4.3 Docker Pool Management&lt;&#x2F;h3&gt;
&lt;p&gt;The Docker pool management subsystem is implemented as a custom Kubernetes operator that manages the lifecycle of preheated containers. The key components include:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pool Manager&lt;&#x2F;strong&gt;: Maintains pools of pre-initialized containers based on runtime type (Python, Node.js, Java, etc.) and common library combinations.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Predictive Initializer&lt;&#x2F;strong&gt;: Analyzes incoming content to predict required runtime environments and proactively initializes appropriate containers.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Monitor&lt;&#x2F;strong&gt;: Tracks resource utilization across the cluster and adjusts pool sizes accordingly.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The container preheating algorithm operates as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;manage_container_pool&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;current_workload&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resource_availability&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Analyze current workload patterns
&lt;&#x2F;span&gt;&lt;span&gt;    language_distribution = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;analyze_language_distribution&lt;&#x2F;span&gt;&lt;span&gt;(current_workload)
&lt;&#x2F;span&gt;&lt;span&gt;    resource_usage = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;analyze_resource_usage&lt;&#x2F;span&gt;&lt;span&gt;(current_workload)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Predict future needs based on historical patterns
&lt;&#x2F;span&gt;&lt;span&gt;    predicted_needs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;predict_container_needs&lt;&#x2F;span&gt;&lt;span&gt;(language_distribution, historical_patterns)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Adjust pool sizes based on predictions and available resources
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;container_type, predicted_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;predicted_needs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        current_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_current_pool_size&lt;&#x2F;span&gt;&lt;span&gt;(container_type)
&lt;&#x2F;span&gt;&lt;span&gt;        target_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculate_target_count&lt;&#x2F;span&gt;&lt;span&gt;(predicted_count, resource_availability)
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;current_count &amp;lt; target_count:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Warm up additional containers
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialize_containers&lt;&#x2F;span&gt;&lt;span&gt;(container_type, target_count - current_count)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;current_count &amp;gt; target_count:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Reduce pool size
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decommission_containers&lt;&#x2F;span&gt;&lt;span&gt;(container_type, current_count - target_count)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Return updated pool status
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_pool_status&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To optimize container initialization, we implement a layered approach where base images contain commonly used libraries, and additional libraries are dynamically installed based on specific application requirements. This balances the benefits of pre-initialization with the flexibility needed for diverse applications.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-4-inter-component-communication&quot;&gt;4.4 Inter-Component Communication&lt;&#x2F;h3&gt;
&lt;p&gt;Communication between ExecuGen components is implemented using a combination of synchronous REST APIs and asynchronous message queues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extractor to Core&lt;&#x2F;strong&gt;: Uses authenticated REST API calls to transmit extracted content and receive status updates.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Core to Runtime&lt;&#x2F;strong&gt;: Uses a combination of message queues for task distribution and REST APIs for status queries and control operations.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Runtime to Core&lt;&#x2F;strong&gt;: Reports execution status and results via callback APIs and status streams.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;All communication is secured using TLS encryption and token-based authentication, with rate limiting and circuit breakers to ensure system stability under load.&lt;&#x2F;p&gt;
&lt;p&gt;The message format uses a standardized JSON schema that includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Content metadata (source URL, extraction timestamp)&lt;&#x2F;li&gt;
&lt;li&gt;Structured content representation (knowledge graph)&lt;&#x2F;li&gt;
&lt;li&gt;Processing directives and preferences&lt;&#x2F;li&gt;
&lt;li&gt;System-generated identifiers for tracking&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This structured communication approach enables loose coupling between components while maintaining end-to-end traceability of processing tasks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-evaluation&quot;&gt;5. Evaluation&lt;&#x2F;h2&gt;
&lt;p&gt;We conducted extensive evaluations to assess ExecuGen&#x27;s effectiveness, performance, and reliability across diverse technical content and runtime environments.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-1-datasets-and-methodology&quot;&gt;5.1 Datasets and Methodology&lt;&#x2F;h3&gt;
&lt;p&gt;Our evaluation utilized two primary datasets:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blog Dataset&lt;&#x2F;strong&gt;: 300 technical blog posts from CSDN, covering web development, data science, mobile development, systems programming, and DevOps topics. Posts were selected to represent varying levels of complexity, from introductory tutorials to advanced technical discussions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Repository Dataset&lt;&#x2F;strong&gt;: 100 open-source code repositories from GitHub, selected across similar domains as the blog dataset. These repositories provided real-world code examples for comparison with ExecuGen-generated applications.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For each evaluation, we measured:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Completion Rate&lt;&#x2F;strong&gt;: Percentage of content items successfully transformed into running applications&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Functional Correctness&lt;&#x2F;strong&gt;: Degree to which generated applications properly implemented the described functionality&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Execution Time&lt;&#x2F;strong&gt;: Time from content extraction to deployed application&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Resource Utilization&lt;&#x2F;strong&gt;: CPU, memory, and storage requirements during processing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Tests were conducted in a Kubernetes cluster consisting of 8 nodes, each with 16 vCPUs and 64GB RAM, running across three geographic regions for latency evaluation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-2-content-transformation-results&quot;&gt;5.2 Content Transformation Results&lt;&#x2F;h3&gt;
&lt;p&gt;Table 1 presents the completion rates and functional correctness scores across different technical domains.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Domain&lt;&#x2F;th&gt;&lt;th&gt;Completion Rate&lt;&#x2F;th&gt;&lt;th&gt;Functional Correctness&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Web Development&lt;&#x2F;td&gt;&lt;td&gt;92%&lt;&#x2F;td&gt;&lt;td&gt;87%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Data Science&lt;&#x2F;td&gt;&lt;td&gt;88%&lt;&#x2F;td&gt;&lt;td&gt;82%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Mobile Development&lt;&#x2F;td&gt;&lt;td&gt;84%&lt;&#x2F;td&gt;&lt;td&gt;79%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Systems Programming&lt;&#x2F;td&gt;&lt;td&gt;76%&lt;&#x2F;td&gt;&lt;td&gt;72%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DevOps&lt;&#x2F;td&gt;&lt;td&gt;89%&lt;&#x2F;td&gt;&lt;td&gt;84%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Overall&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;86%&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;81%&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Analysis of failure cases revealed that most incompletions were due to:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Highly specialized dependencies not available in standard repositories (38%)&lt;&#x2F;li&gt;
&lt;li&gt;Ambiguous or incomplete technical descriptions (31%)&lt;&#x2F;li&gt;
&lt;li&gt;Complex multi-stage build processes (19%)&lt;&#x2F;li&gt;
&lt;li&gt;Other issues (12%)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Functional correctness was evaluated through a combination of automated test suite execution and manual verification by domain experts. The results demonstrate that ExecuGen successfully transforms most technical content into working applications, with particularly strong performance in web development and DevOps domains.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-3-performance-analysis&quot;&gt;5.3 Performance Analysis&lt;&#x2F;h3&gt;
&lt;p&gt;Figure 3 illustrates the end-to-end processing time for applications of varying complexity, comparing standard container initialization with our Docker pool and preheating approach.&lt;&#x2F;p&gt;
&lt;p&gt;The results demonstrate that our Docker pool and preheating mechanism reduces average application deployment time by 72% compared to standard container initialization. This improvement is particularly pronounced for complex applications, where preheating provides up to 86% reduction in deployment time.&lt;&#x2F;p&gt;
&lt;p&gt;Resource utilization measurements showed that the Docker pool consumes approximately 18% additional cluster resources during idle periods, but this overhead is justified by the significant performance improvements during active use.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-4-comparison-with-existing-systems&quot;&gt;5.4 Comparison with Existing Systems&lt;&#x2F;h3&gt;
&lt;p&gt;We compared ExecuGen with two state-of-the-art systems:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Manus&lt;&#x2F;strong&gt;: A popular agent-based code generation system&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A popular open-source code generation framework&lt;&#x2F;strong&gt; (which we&#x27;ll refer to as Framework-X)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Table 2 presents the comparative results across key metrics.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Metric&lt;&#x2F;th&gt;&lt;th&gt;ExecuGen&lt;&#x2F;th&gt;&lt;th&gt;Manus&lt;&#x2F;th&gt;&lt;th&gt;Framework-X&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Completion Rate&lt;&#x2F;td&gt;&lt;td&gt;86%&lt;&#x2F;td&gt;&lt;td&gt;74%&lt;&#x2F;td&gt;&lt;td&gt;69%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Avg. Execution Time (s)&lt;&#x2F;td&gt;&lt;td&gt;42&lt;&#x2F;td&gt;&lt;td&gt;118&lt;&#x2F;td&gt;&lt;td&gt;95&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Resource Efficiency*&lt;&#x2F;td&gt;&lt;td&gt;0.76&lt;&#x2F;td&gt;&lt;td&gt;0.65&lt;&#x2F;td&gt;&lt;td&gt;0.72&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Multi-file Support&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;td&gt;Limited&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Container Integration&lt;&#x2F;td&gt;&lt;td&gt;Native&lt;&#x2F;td&gt;&lt;td&gt;Manual&lt;&#x2F;td&gt;&lt;td&gt;Limited&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;*Resource Efficiency: Applications successfully deployed per GB of RAM-hour&lt;&#x2F;p&gt;
&lt;p&gt;ExecuGen outperformed both comparison systems across all metrics, with particularly significant advantages in execution time (64% faster than Manus) and completion rate (17% higher than Manus, 25% higher than Framework-X).&lt;&#x2F;p&gt;
&lt;p&gt;The most substantial differences were observed for complex applications requiring multi-file codebases and sophisticated runtime environments, where ExecuGen&#x27;s container preheating and comprehensive code generation approach provided significant advantages.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-5-model-performance-analysis&quot;&gt;5.5 Model Performance Analysis&lt;&#x2F;h3&gt;
&lt;p&gt;We evaluated ExecuGen&#x27;s performance with different language models to understand the impact of model selection on generation quality and resource requirements. Table 3 presents the results for three different model configurations.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Model Configuration&lt;&#x2F;th&gt;&lt;th&gt;Completion Rate&lt;&#x2F;th&gt;&lt;th&gt;Functional Correctness&lt;&#x2F;th&gt;&lt;th&gt;Avg. Generation Time (s)&lt;&#x2F;th&gt;&lt;th&gt;Cost per Application ($)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Small (7B parameters)&lt;&#x2F;td&gt;&lt;td&gt;78%&lt;&#x2F;td&gt;&lt;td&gt;73%&lt;&#x2F;td&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;0.04&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Medium (13B parameters)&lt;&#x2F;td&gt;&lt;td&gt;84%&lt;&#x2F;td&gt;&lt;td&gt;79%&lt;&#x2F;td&gt;&lt;td&gt;36&lt;&#x2F;td&gt;&lt;td&gt;0.09&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Large (70B parameters)&lt;&#x2F;td&gt;&lt;td&gt;86%&lt;&#x2F;td&gt;&lt;td&gt;81%&lt;&#x2F;td&gt;&lt;td&gt;45&lt;&#x2F;td&gt;&lt;td&gt;0.22&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;These results demonstrate a clear correlation between model size and generation quality, but with diminishing returns as model size increases. The medium configuration provides an attractive balance between performance and cost, achieving 84% completion rate at less than half the cost of the large configuration.&lt;&#x2F;p&gt;
&lt;p&gt;Our analysis suggests that domain-specific fine-tuning of smaller models may be a more cost-effective approach than simply using larger general-purpose models. This represents an important direction for future work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;6-discussion-and-future-work&quot;&gt;6. Discussion and Future Work&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;6-1-current-limitations&quot;&gt;6.1 Current Limitations&lt;&#x2F;h3&gt;
&lt;p&gt;Despite ExecuGen&#x27;s strong performance, several limitations remain:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ambiguity Handling&lt;&#x2F;strong&gt;: The system sometimes struggles with highly ambiguous or incomplete technical descriptions, requiring human intervention to resolve uncertainties.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Specialized Domains&lt;&#x2F;strong&gt;: Performance is lower for highly specialized technical domains with complex dependencies or non-standard development practices.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User Customization&lt;&#x2F;strong&gt;: The current implementation offers limited opportunities for users to customize the generated applications according to their preferences or requirements.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Intensity&lt;&#x2F;strong&gt;: The system requires significant computational resources, particularly for the language model components, which may limit deployment options.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Long-Term Maintenance&lt;&#x2F;strong&gt;: Generated applications may require ongoing maintenance and updates, which is currently beyond the scope of ExecuGen.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These limitations highlight important areas for future research and development.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-2-future-directions&quot;&gt;6.2 Future Directions&lt;&#x2F;h3&gt;
&lt;p&gt;Several promising directions for future work include:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interactive Refinement&lt;&#x2F;strong&gt;: Developing mechanisms for users to provide feedback and guidance during the generation process, enabling collaborative refinement of generated applications.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Incremental Updates&lt;&#x2F;strong&gt;: Extending ExecuGen to support updating generated applications when the source content changes, maintaining synchronization between documentation and implementation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cross-Source Integration&lt;&#x2F;strong&gt;: Enhancing the system to combine information from multiple content sources, enabling more comprehensive application generation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Efficiency Optimizations&lt;&#x2F;strong&gt;: Investigating techniques to reduce computational requirements, such as distilled models, caching of common generation patterns, and more efficient container management.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Expanded Content Types&lt;&#x2F;strong&gt;: Extending support to additional content formats, including academic papers, video tutorials, and interactive documentation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enterprise Integration&lt;&#x2F;strong&gt;: Developing features for integration with enterprise development workflows, including CI&#x2F;CD pipelines, code review processes, and governance frameworks.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;6-3-broader-implications&quot;&gt;6.3 Broader Implications&lt;&#x2F;h3&gt;
&lt;p&gt;ExecuGen represents a significant step toward bridging the gap between technical documentation and functional implementation. This approach has several broader implications:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Educational Impact&lt;&#x2F;strong&gt;: By enabling immediate experimentation with described techniques, ExecuGen can enhance technical education and reduce barriers to learning new technologies.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation Practices&lt;&#x2F;strong&gt;: The system may influence how technical content is created, encouraging more precise and implementation-focused documentation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Developer Productivity&lt;&#x2F;strong&gt;: By automating the translation from concept to implementation, ExecuGen could significantly enhance developer productivity, particularly for exploration and prototyping activities.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Knowledge Transfer&lt;&#x2F;strong&gt;: The system facilitates more effective knowledge transfer within organizations by making it easier to implement techniques described in internal documentation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These implications suggest that systems like ExecuGen may play an increasingly important role in the software development ecosystem, complementing traditional development approaches with automated content-to-code transformation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;7-conclusion&quot;&gt;7. Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this paper, we presented ExecuGen, an end-to-end agent system that transforms technical blog content into executable applications. By bridging the gap between technical documentation and functional implementation, ExecuGen redefines the traditional &amp;quot;What You See Is What You Get&amp;quot; paradigm—providing users with more than what they initially see.&lt;&#x2F;p&gt;
&lt;p&gt;Our comprehensive evaluation demonstrated ExecuGen&#x27;s effectiveness across diverse technical domains, achieving an 86% completion rate and 81% functional correctness score on a dataset of 300 technical blog posts. The system&#x27;s innovative Docker pool and container preheating mechanism significantly improves performance, reducing application deployment time by 72% compared to standard approaches.&lt;&#x2F;p&gt;
&lt;p&gt;ExecuGen represents a significant advancement in how developers interact with technical content, transforming passive reading into active experimentation and learning. While limitations remain, the system demonstrates the potential for agent-based approaches to bridge the gap between documentation and implementation, enhancing both technical education and developer productivity.&lt;&#x2F;p&gt;
&lt;p&gt;As the line between natural language and code continues to blur, systems like ExecuGen point toward a future where the boundary between reading about technology and implementing it becomes increasingly seamless—a future where what you get is indeed much more than what you see.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;[1] Chen, M., Tworek, J., Jun, H., et al. (2023). &amp;quot;Evaluating Large Language Models Trained on Code.&amp;quot; arXiv preprint arXiv:2107.03374.&lt;&#x2F;p&gt;
&lt;p&gt;[2] Davies, A., Wang, L., Zhang, K., et al. (2024). &amp;quot;Manus: Continuous Integration for AI-Generated Software.&amp;quot; In Proceedings of the 46th International Conference on Software Engineering (ICSE &#x27;24).&lt;&#x2F;p&gt;
&lt;p&gt;[3] Li, Y., Choi, D., Chung, J., et al. (2023). &amp;quot;Structured Code Generation using Large Language Models.&amp;quot; In Proceedings of the 38th IEEE&#x2F;ACM International Conference on Automated Software Engineering.&lt;&#x2F;p&gt;
&lt;p&gt;[4] Nijkamp, E., Pang, B., Hayashi, H., et al. (2023). &amp;quot;CodeGen: An Open Large Language Model for Code with Multi-Turn Program Synthesis.&amp;quot; In International Conference on Learning Representations.&lt;&#x2F;p&gt;
&lt;p&gt;[5] Bragdon, A., Zeleznik, R., et al. (2023). &amp;quot;Code, Query, and Annotations: A Unified Approach to Developer Productivity.&amp;quot; In CHI Conference on Human Factors in Computing Systems.&lt;&#x2F;p&gt;
&lt;p&gt;[6] Miller, G., Zheng, K., Gupta, R. (2024). &amp;quot;Seamless Navigation in Software Documentation using Browser Extensions.&amp;quot; In Web Conference 2024 (WWW &#x27;24).&lt;&#x2F;p&gt;
&lt;p&gt;[7] Johnson, T., Hassan, S., Gibson, P. (2023). &amp;quot;Interactive Code Examples in Technical Documentation.&amp;quot; In 2023 IEEE Symposium on Visual Languages and Human-Centric Computing.&lt;&#x2F;p&gt;
&lt;p&gt;[8] Wang, X., Chang, S., Peng, M. (2024). &amp;quot;Living Documentation: Embedding Executable Examples in Technical Content.&amp;quot; In Proceedings of the 2024 CHI Conference on Human Factors in Computing Systems.&lt;&#x2F;p&gt;
&lt;p&gt;[9] Burns, B., Grant, B., Oppenheimer, D., et al. (2016). &amp;quot;Borg, Omega, and Kubernetes: Lessons Learned from Three Container-Management Systems Over a Decade.&amp;quot; ACM Queue, 14(1), 70-93.&lt;&#x2F;p&gt;
&lt;p&gt;[10] Kim, Y., Lin, J., Park, Y. (2023). &amp;quot;Predictive Autoscaling in Kubernetes Using Machine Learning.&amp;quot; IEEE Transactions on Cloud Computing.&lt;&#x2F;p&gt;
&lt;p&gt;[11] Williams, P., Jamshidi, P., Shahin, M. (2024). &amp;quot;Service Mesh Architecture Patterns for Microservice Communication.&amp;quot; IEEE Software.&lt;&#x2F;p&gt;
&lt;p&gt;[12] Zhang, T., Chen, L., Liu, X. (2023). &amp;quot;Resource-Aware Container Scheduling in Kubernetes Clusters.&amp;quot; In IEEE International Conference on Cloud Computing.&lt;&#x2F;p&gt;
&lt;p&gt;[13] Martinez, J., Clement, M., Kistijantoro, A. (2023). &amp;quot;Container Preheating for Serverless Computing: A Predictive Approach.&amp;quot; In Proceedings of the 14th ACM Symposium on Cloud Computing.&lt;&#x2F;p&gt;
&lt;p&gt;[14] Nguyen, H., Wang, Z., Chang, R. (2024). &amp;quot;Reducing Cold Start Latency in Serverless Computing through Container Pool Management.&amp;quot; IEEE Transactions on Services Computing.&lt;&#x2F;p&gt;
&lt;p&gt;[15] Thompson, C., Zhu, M., Li, Y. (2023). &amp;quot;Agent-Based Requirements Analysis for Software Systems.&amp;quot; In 2023 IEEE International Requirements Engineering Conference.&lt;&#x2F;p&gt;
&lt;p&gt;[16] Adams, J., Xiao, S., White, T. (2024). &amp;quot;Autonomous Testing Agents for Complex Software Systems.&amp;quot; In 2024 IEEE&#x2F;ACM International Conference on Software Testing.&lt;&#x2F;p&gt;
&lt;p&gt;[17] Garcia, R., Patel, N., Kumar, S. (2023). &amp;quot;Deployment Agents for Continuous Delivery Pipelines.&amp;quot; In 2023 IEEE International Conference on Software Architecture.&lt;&#x2F;p&gt;
&lt;p&gt;[18] Wilson, K., Tan, M., Zhong, V. (2023). &amp;quot;Autonomous Coding Agents: A Framework for Self-Improving Code Generation.&amp;quot; In Advances in Neural Information Processing Systems 36.&lt;&#x2F;p&gt;
&lt;p&gt;[19] Peterson, A., Singh, R., Gupta, N. (2024). &amp;quot;Multi-Agent Collaboration for Software Development Tasks.&amp;quot; In 2024 IEEE&#x2F;ACM International Conference on Automated Software Engineering.&lt;&#x2F;p&gt;
&lt;p&gt;[20] Chen, X., Brown, J., Patel, S. (2024). &amp;quot;Understanding Documentation-to-Implementation Gaps in Software Development.&amp;quot; In 2024 IEEE Symposium on Visual Languages and Human-Centric Computing.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>深度解析 OpenHands CodeActAgent: 智能代理的核心架构</title>
        <published>2025-03-12T00:00:00+00:00</published>
        <updated>2025-03-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-codeactagent-deep-dive/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-codeactagent-deep-dive/</id>
        
        <content type="html">&lt;p&gt;CodeActAgent 是 OpenHands 框架中的核心组件，旨在通过统一的代码操作空间（CodeAct）简化和增强 LLM（大语言模型）代理的功能。本文将详细解析 CodeActAgent 的组成、功能和运作方式，并结合一个具体案例（TODO 应用）展示其工作流程。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;codeactagent-de-he-xin-zu-cheng&quot;&gt;CodeActAgent 的核心组成&lt;&#x2F;h2&gt;
&lt;p&gt;CodeActAgent 是一个高度模块化的代理，其核心组成部分包括 Profile、Prompt 和 Memory。这些模块共同协作，确保代理能够高效地分解任务、调用工具并与用户交互。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-profile&quot;&gt;1. Profile&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;profile-shi-shi-yao&quot;&gt;Profile 是什么&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Profile&lt;&#x2F;strong&gt; 是 CodeActAgent 的配置文件，定义了代理的行为、工具支持、内存管理等。&lt;&#x2F;li&gt;
&lt;li&gt;它通过 &lt;code&gt;AgentConfig&lt;&#x2F;code&gt; 类进行配置，包含以下关键参数：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;codeact_enable_browsing&lt;&#x2F;code&gt;：是否启用浏览器工具。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;codeact_enable_jupyter&lt;&#x2F;code&gt;：是否启用 IPython 工具。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;codeact_enable_llm_editor&lt;&#x2F;code&gt;：是否启用基于 LLM 的文件编辑工具。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;condenser&lt;&#x2F;code&gt;：事件压缩器的配置，用于优化内存中的历史记录。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enable_prompt_extensions&lt;&#x2F;code&gt;：是否启用扩展提示（Prompt）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;profile-de-jie-gou&quot;&gt;Profile 的结构&lt;&#x2F;h4&gt;
&lt;p&gt;Profile 是一个字典或对象，包含以下关键参数：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;config = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AgentConfig&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_browsing&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_jupyter&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_llm_editor&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;condenser&lt;&#x2F;span&gt;&lt;span&gt;={&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;max_events&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enable_prompt_extensions&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled_microagents&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;profile-de-zuo-yong&quot;&gt;Profile 的作用&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Profile 决定了 CodeActAgent 的能力范围和行为模式。&lt;&#x2F;li&gt;
&lt;li&gt;例如：
&lt;ul&gt;
&lt;li&gt;如果启用 &lt;code&gt;codeact_enable_browsing&lt;&#x2F;code&gt;，代理可以使用浏览器工具与网页交互。&lt;&#x2F;li&gt;
&lt;li&gt;如果启用 &lt;code&gt;codeact_enable_jupyter&lt;&#x2F;code&gt;，代理可以运行 Python 代码来完成任务。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;2-prompt&quot;&gt;2. Prompt&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;prompt-shi-shi-yao&quot;&gt;Prompt 是什么&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prompt&lt;&#x2F;strong&gt; 是 CodeActAgent 与 LLM 交互的输入内容，定义了任务的上下文、目标和约束。&lt;&#x2F;li&gt;
&lt;li&gt;它通过 &lt;code&gt;PromptManager&lt;&#x2F;code&gt; 动态生成，包含以下部分：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统消息&lt;&#x2F;strong&gt;：定义代理的角色和目标。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;用户消息&lt;&#x2F;strong&gt;：用户输入的任务描述。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;工具调用消息&lt;&#x2F;strong&gt;：代理调用工具的记录。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;观察消息&lt;&#x2F;strong&gt;：工具返回的结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;prompt-de-jie-gou&quot;&gt;Prompt 的结构&lt;&#x2F;h4&gt;
&lt;p&gt;Prompt 是一个消息列表，包含以下类型的消息：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统消息&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;plaintext&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-plaintext &quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span&gt;System: You are CodeActAgent, a highly capable assistant designed to perform tasks by executing code and interacting with tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户消息&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;plaintext&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-plaintext &quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span&gt;User: 创建一个 TODO 应用，支持添加、删除和查看任务。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工具调用消息&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;plaintext&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-plaintext &quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span&gt;Assistant: Calling tool: execute_ipython_cell
&lt;&#x2F;span&gt;&lt;span&gt;Tool arguments: {&amp;quot;code&amp;quot;: &amp;quot;tasks = []&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;观察消息&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;plaintext&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-plaintext &quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span&gt;Observation: Tool returned: &amp;quot;Initialized an empty task list.&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;prompt-de-sheng-cheng-luo-ji&quot;&gt;Prompt 的生成逻辑&lt;&#x2F;h4&gt;
&lt;p&gt;Prompt 的生成是 CodeActAgent 与 LLM 交互的关键步骤，以下是其详细逻辑：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统消息初始化&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeActAgent 使用 &lt;code&gt;PromptManager&lt;&#x2F;code&gt; 添加系统消息，定义代理的角色和目标。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户消息处理&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户输入的任务描述被添加到消息列表中。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工具调用与观察消息&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeActAgent 从 &lt;code&gt;ConversationMemory&lt;&#x2F;code&gt; 中提取工具调用记录和观察结果，并将其添加到 Prompt。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;消息增强&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;PromptManager&lt;&#x2F;code&gt; 为用户消息添加上下文信息（如示例或扩展信息）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-memory&quot;&gt;3. Memory&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;memory-de-zuo-yong&quot;&gt;Memory 的作用&lt;&#x2F;h4&gt;
&lt;p&gt;Memory 是 CodeActAgent 的会话内存模块，负责记录代理的对话历史、工具调用记录以及观察结果。它通过 &lt;code&gt;ConversationMemory&lt;&#x2F;code&gt; 和 &lt;code&gt;Condenser&lt;&#x2F;code&gt; 协同工作，确保代理能够在多轮交互中保持上下文一致性。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;memory-de-jie-gou&quot;&gt;Memory 的结构&lt;&#x2F;h4&gt;
&lt;p&gt;Memory 包含以下几个关键部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;事件历史&lt;&#x2F;strong&gt;：存储所有的动作和观察，完整记录代理的交互过程。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;压缩历史&lt;&#x2F;strong&gt;：通过 &lt;code&gt;Condenser&lt;&#x2F;code&gt; 压缩后的关键事件，优化存储空间并提高检索效率。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;&#x2F;strong&gt;：用于特定 LLM 的提示缓存，减少重复计算并提高响应速度。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;memory-de-gong-zuo-liu-cheng&quot;&gt;Memory 的工作流程&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件记录&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;每次工具调用或用户交互都会生成一个事件，并存储到事件历史中。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;event = {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tool_call&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tool&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;execute_ipython_cell&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Initialized task list.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;memory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_event&lt;&#x2F;span&gt;&lt;span&gt;(event)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事件压缩&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Condenser&lt;&#x2F;code&gt; 对事件历史进行压缩，提取关键事件以减少冗余。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;condensed_events = memory.condenser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;condensed_history&lt;&#x2F;span&gt;&lt;span&gt;(state)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下文检索&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在生成 Prompt 时，Memory 提供上下文信息以确保对话的连贯性。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;messages = memory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;process_events&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;condensed_history&lt;&#x2F;span&gt;&lt;span&gt;=condensed_events)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;zai-todo-ying-yong-zhong-de-zuo-yong&quot;&gt;在 TODO 应用中的作用&lt;&#x2F;h4&gt;
&lt;p&gt;在实现 TODO 应用时，Memory 的主要作用包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;记录任务分解过程&lt;&#x2F;strong&gt;：存储每个子任务的工具调用记录和结果。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;维护上下文一致性&lt;&#x2F;strong&gt;：确保代理能够根据用户的后续输入调整任务。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;优化交互效率&lt;&#x2F;strong&gt;：通过事件压缩减少冗余信息，提高响应速度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;memory-shi-shi-yao&quot;&gt;Memory 是什么&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;&#x2F;strong&gt; 是代理的会话内存，用于存储对话历史、工具调用记录和观察结果。&lt;&#x2F;li&gt;
&lt;li&gt;它通过 &lt;code&gt;ConversationMemory&lt;&#x2F;code&gt; 管理，支持事件压缩和历史记录的动态更新。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;memory-de-jie-gou-1&quot;&gt;Memory 的结构&lt;&#x2F;h4&gt;
&lt;p&gt;Memory 包含以下部分：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;事件历史&lt;&#x2F;strong&gt;：存储所有的动作和观察。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;压缩历史&lt;&#x2F;strong&gt;：通过 &lt;code&gt;Condenser&lt;&#x2F;code&gt; 压缩后的关键事件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;&#x2F;strong&gt;：用于特定 LLM 的提示缓存。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;memory-de-zuo-yong-1&quot;&gt;Memory 的作用&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Memory 记录了任务的分解过程和工具调用结果，确保代理能够在多轮对话中保持上下文一致。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;jie-he-an-li-shi-xian-yi-ge-todo-ying-yong&quot;&gt;结合案例：实现一个 TODO 应用&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ren-wu-miao-shu&quot;&gt;任务描述&lt;&#x2F;h3&gt;
&lt;p&gt;用户输入任务：“创建一个 TODO 应用，支持添加、删除和查看任务。”&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ren-wu-fen-jie&quot;&gt;任务分解&lt;&#x2F;h3&gt;
&lt;p&gt;CodeActAgent 的任务分解通过与 LLM 的交互实现，以下是具体流程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户输入任务&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户输入任务描述：“创建一个 TODO 应用，支持添加、删除和查看任务。”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构建 Prompt&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeActAgent 构建消息列表并发送给 LLM。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解析 LLM 响应&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;LLM 返回的响应被解析为一系列子任务：
&lt;ul&gt;
&lt;li&gt;初始化任务列表。&lt;&#x2F;li&gt;
&lt;li&gt;实现添加任务功能。&lt;&#x2F;li&gt;
&lt;li&gt;实现删除任务功能。&lt;&#x2F;li&gt;
&lt;li&gt;实现查看任务功能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;zi-ren-wu-fen-fa&quot;&gt;子任务分发&lt;&#x2F;h3&gt;
&lt;p&gt;CodeActAgent 的子任务分发通过工具调用实现，以下是具体流程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工具调用&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;根据子任务调用相应的工具（如执行 Python 代码、编辑文件）。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;action = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CmdRunAction&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tasks = []&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;result = action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结果存储&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;工具返回的结果被存储为观察消息。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;observation_message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;observation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Tool returned: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Initialized an empty task list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_observation&lt;&#x2F;span&gt;&lt;span&gt;(observation_message)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;反馈给用户&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CodeActAgent 将工具调用结果反馈给用户。&lt;&#x2F;li&gt;
&lt;li&gt;示例：&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;final_message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assistant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TODO 应用已创建，支持添加、删除和查看任务。&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_message&lt;&#x2F;span&gt;&lt;span&gt;(final_message)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;wan-zheng-shi-xian-shi-li&quot;&gt;完整实现示例&lt;&#x2F;h2&gt;
&lt;p&gt;以下是一个完整的实现示例，展示如何使用 CodeActAgent 创建一个 TODO 应用：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.core.config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;AgentConfig
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.llm.llm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LLM
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.agenthub.codeact_agent.codeact_agent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;CodeActAgent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.controller.state.state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;State
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openhands.core.message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Message
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 配置代理
&lt;&#x2F;span&gt;&lt;span&gt;config = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AgentConfig&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_browsing&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_jupyter&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;codeact_enable_llm_editor&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;condenser&lt;&#x2F;span&gt;&lt;span&gt;={&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;max_events&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enable_prompt_extensions&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled_microagents&lt;&#x2F;span&gt;&lt;span&gt;=[],
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 初始化 LLM 和代理
&lt;&#x2F;span&gt;&lt;span&gt;llm = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LLM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model_name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gpt-4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;agent = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CodeActAgent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;llm&lt;&#x2F;span&gt;&lt;span&gt;=llm, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;=config)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建初始状态
&lt;&#x2F;span&gt;&lt;span&gt;state = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 用户输入任务
&lt;&#x2F;span&gt;&lt;span&gt;user_message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;创建一个 TODO 应用，支持添加、删除和查看任务。&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_message&lt;&#x2F;span&gt;&lt;span&gt;(user_message)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 构建 Prompt 并与 LLM 交互
&lt;&#x2F;span&gt;&lt;span&gt;messages = agent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_get_messages&lt;&#x2F;span&gt;&lt;span&gt;(state)
&lt;&#x2F;span&gt;&lt;span&gt;response = llm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;completion&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;=agent.llm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format_messages_for_llm&lt;&#x2F;span&gt;&lt;span&gt;(messages))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 解析 LLM 响应
&lt;&#x2F;span&gt;&lt;span&gt;actions = agent.tools.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response_to_actions&lt;&#x2F;span&gt;&lt;span&gt;(response)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 执行子任务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;actions:
&lt;&#x2F;span&gt;&lt;span&gt;    result = action.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    observation_message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;observation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Tool returned: &lt;&#x2F;span&gt;&lt;span&gt;{result}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_observation&lt;&#x2F;span&gt;&lt;span&gt;(observation_message)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 反馈结果
&lt;&#x2F;span&gt;&lt;span&gt;final_message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assistant&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TODO 应用已创建，支持添加、删除和查看任务。&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_message&lt;&#x2F;span&gt;&lt;span&gt;(final_message)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 输出对话历史
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;state.history:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{msg.role}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{msg.content}&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;通过上述分析和实现示例，我们可以清晰地了解 CodeActAgent 的 Prompt 和 Profile，以及它们在任务分解和子任务分发中的作用。您可以根据这些信息手动实现一个类似的代理，并根据任务需求动态生成 Prompt 和配置 Profile。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>让AI成为你的分身：Polly AI Agent的诞生</title>
        <published>2025-02-27T00:00:00+00:00</published>
        <updated>2025-02-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/build-ai-agent-polly-with-ai-tools/" type="text/html"/>
        <id>https://polly2014.github.io/build-ai-agent-polly-with-ai-tools/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;build-ai-agent-polly-with-ai-tools&#x2F;AI_Agent_Polly_Done.png&quot; alt=&quot;AI_Agent_Polly_Done&quot; &#x2F;&gt;
在人工智能快速发展的今天，如何高效构建自己的AI Agent成为了开发者们关注的焦点。本文将详细介绍如何利用GitHub Copilot和OpenHands工具快速构建一个基于DeepSeek的AI助手 - Polly。整个过程不仅高效，而且能够体验到 AI 辅助编程的强大能力。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yi-shi-yong-openhands-fang-an-jia-gou-she-ji&quot;&gt;一、使用 OpenHands 方案架构设计&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-1-cong-ideadao-planbu-dao-yi-fen-zhong&quot;&gt;1.1 从Idea到Plan不到一分钟&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;polly2014.github.io&#x2F;build-ai-agent-polly-with-ai-tools&#x2F;AI_Agent_Polly_Idea_To_Plan.png&quot; alt=&quot;AI_Agent_Polly&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;关于界面:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;你的设计思路非常清晰，以下是我的一些建议和扩展想法：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 基本设计
&lt;&#x2F;span&gt;&lt;span&gt;1. **标题**：`&amp;quot;You can talk with Polly&amp;quot;` 是一个很好的标题，简洁明了。
&lt;&#x2F;span&gt;&lt;span&gt;2. **输入框和发送按钮**：用户可以通过输入框输入问题，点击发送按钮后，向后端的 LLM Service 发送请求并展示回复。
&lt;&#x2F;span&gt;&lt;span&gt;3. **回复展示**：在输入框下方动态展示 Polly 的回复。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 更加 Fancy 的想法
&lt;&#x2F;span&gt;&lt;span&gt;1. **对话气泡**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 将用户输入和 Polly 的回复以对话气泡的形式展示，类似于聊天应用的界面。
&lt;&#x2F;span&gt;&lt;span&gt;   - 用户的输入在右侧显示，Polly 的回复在左侧显示。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;2. **Polly 的头像**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 在每条 Polly 的回复旁边显示一个虚拟数字人的头像，增加互动感。
&lt;&#x2F;span&gt;&lt;span&gt;   - 头像可以是一个动态的 3D 模型或 GIF，模拟 Polly 的表情变化。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;3. **语音交互**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 增加语音输入功能，用户可以通过语音与 Polly 交流。
&lt;&#x2F;span&gt;&lt;span&gt;   - Polly 的回复可以通过语音合成（TTS）播放出来。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;4. **动画效果**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 在 Polly 回复时，显示一个“正在输入...”的动画，增加真实感。
&lt;&#x2F;span&gt;&lt;span&gt;   - Polly 的头像可以在回复时做出一些动态效果，比如眨眼或点头。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;5. **主题切换**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 提供一个按钮，用户可以切换 Polly 的主题，比如“专业模式”、“幽默模式”或“科幻模式”，以改变 Polly 的回复风格。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;6. **知识图谱展示**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 如果 Polly 的回复涉及到某些知识点，可以在右侧动态生成一个知识图谱，帮助用户更直观地理解。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;7. **多语言支持**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 提供语言切换功能，用户可以选择与 Polly 用不同的语言交流。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;8. **历史记录**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 在页面上保留对话历史，用户可以随时回顾之前的对话。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;9. **个性化设置**：
&lt;&#x2F;span&gt;&lt;span&gt;   - 用户可以自定义 Polly 的名字、头像、语音风格等，增加个性化体验。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 技术实现
&lt;&#x2F;span&gt;&lt;span&gt;- **前端**：
&lt;&#x2F;span&gt;&lt;span&gt;  - 使用 JavaScript（如 Vue.js 或 React）动态更新对话内容。
&lt;&#x2F;span&gt;&lt;span&gt;  - 使用 CSS 实现对话气泡和动画效果。
&lt;&#x2F;span&gt;&lt;span&gt;- **后端**：
&lt;&#x2F;span&gt;&lt;span&gt;  - 通过 AJAX 或 WebSocket 与 LLM Service 通信，实时获取 Polly 的回复。
&lt;&#x2F;span&gt;&lt;span&gt;- **LLM Service**：
&lt;&#x2F;span&gt;&lt;span&gt;  - Polly 的回复可以通过调用 LLM Service 的 API 实现，支持上下文对话。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;如果你觉得这些想法不错，我可以帮你实现基础功能，或者进一步设计和实现更 Fancy 的功能！你怎么看？
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;关于Agent设计：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;你的想法非常有创意！通过构建一个 **Polly Profile**，结合 DeepSeek 的服务，可以实现一个高度个性化的数字人。以下是一些改进和扩展的建议，帮助你打造一个更智能、更真实的数字人 Polly：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 1. **Polly Profile 的设计**
&lt;&#x2F;span&gt;&lt;span&gt;Polly Profile 是数字人的核心，应该包含以下几个方面的信息：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **1.1 基础信息**
&lt;&#x2F;span&gt;&lt;span&gt;- **身份**: Polly 的背景信息，例如职业、兴趣、技能等。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;我是Polly，一个热爱技术的博主，擅长编程、写作和摄影。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;- **语气和风格**: 定义 Polly 的说话风格（幽默、正式、友好等）。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;我喜欢用轻松幽默的方式与人交流。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **1.2 知识领域**
&lt;&#x2F;span&gt;&lt;span&gt;- **专业知识**: 定义 Polly 擅长的领域，例如编程、设计、心理学等。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;我对Python编程、前端开发和人工智能有深入了解。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;- **个性化知识**: 包括你的个人经历、观点和兴趣。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;我喜欢旅行，尤其是探索自然风光。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **1.3 行为规则**
&lt;&#x2F;span&gt;&lt;span&gt;- **回答策略**: 定义 Polly 如何回答问题。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;如果我不知道答案，我会坦诚告诉你，并尝试提供相关资源。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;- **情感模拟**: Polly 如何表现情感，例如高兴、同情、幽默等。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **1.4 动态学习**
&lt;&#x2F;span&gt;&lt;span&gt;- **记忆功能**: Polly 可以记住用户的偏好和历史对话。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: &amp;quot;记住用户喜欢的主题，下次对话时主动提及。&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;- **实时更新**: 通过 DeepSeek 的服务，动态获取最新知识。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 2. **技术实现建议**
&lt;&#x2F;span&gt;&lt;span&gt;为了让 Polly 更加智能和真实，可以从以下几个方面优化技术实现：
&lt;&#x2F;span&gt;&lt;span&gt;#### **2.1 Prompt Engineering**
&lt;&#x2F;span&gt;&lt;span&gt;- **多层Prompt设计**: 
&lt;&#x2F;span&gt;&lt;span&gt;  - **背景Prompt**: 定义 Polly 的身份和行为规则。
&lt;&#x2F;span&gt;&lt;span&gt;  - **上下文Prompt**: 根据用户的输入动态生成上下文。
&lt;&#x2F;span&gt;&lt;span&gt;  - **任务Prompt**: 针对特定任务（如技术支持、写作建议）生成专用Prompt。
&lt;&#x2F;span&gt;&lt;span&gt;- **示例Prompt**:
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;gt; [毛坯版]你是Polly，一个热爱技术的数字人。你擅长编程、写作和摄影。用友好和幽默的语气回答问题。如果你不知道答案，请坦诚告知并提供相关资源。 用户问题: {用户输入}. Polly的回答:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **2.2 DeepSeek 服务集成**
&lt;&#x2F;span&gt;&lt;span&gt;- **知识扩展**: 利用 DeepSeek 的服务，实时获取最新的知识和数据。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: 用户提问 &amp;quot;最近的AI技术趋势是什么？&amp;quot;，Polly 可以通过 DeepSeek 获取最新的技术文章并总结回答。
&lt;&#x2F;span&gt;&lt;span&gt;- **多模态支持**: 如果 DeepSeek 支持图片、视频等多模态数据，可以让 Polly 提供更丰富的回答形式。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **2.3 个性化记忆**
&lt;&#x2F;span&gt;&lt;span&gt;- **用户偏好存储**: 使用数据库或文件系统存储用户的偏好和历史对话。
&lt;&#x2F;span&gt;&lt;span&gt;- **动态调整**: 根据用户的反馈调整 Polly 的行为和回答风格。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **2.4 多轮对话**
&lt;&#x2F;span&gt;&lt;span&gt;- **上下文管理**: 通过对话历史，保持多轮对话的连贯性。
&lt;&#x2F;span&gt;&lt;span&gt;  - 示例: 用户问 &amp;quot;你喜欢什么电影？&amp;quot; 后，接着问 &amp;quot;为什么？&amp;quot;，Polly 能理解上下文并回答。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 3. **用户体验优化**
&lt;&#x2F;span&gt;&lt;span&gt;为了让用户与 Polly 的互动更加自然，可以从以下方面优化用户体验：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **3.1 视觉呈现**
&lt;&#x2F;span&gt;&lt;span&gt;- **数字人形象**: 使用 3D 模型或动画，打造一个可视化的 Polly。
&lt;&#x2F;span&gt;&lt;span&gt;- **表情和动作**: 根据对话内容动态调整 Polly 的表情和动作。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **3.2 多渠道支持**
&lt;&#x2F;span&gt;&lt;span&gt;- **跨平台交互**: 将 Polly 集成到多个平台，例如网站、移动应用、社交媒体等。
&lt;&#x2F;span&gt;&lt;span&gt;- **语音交互**: 支持语音输入和输出，让用户可以通过语音与 Polly 交流。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### **3.3 个性化推荐**
&lt;&#x2F;span&gt;&lt;span&gt;- **内容推荐**: 根据用户的兴趣，主动推荐文章、视频或工具。
&lt;&#x2F;span&gt;&lt;span&gt;- **互动游戏**: 提供一些轻松的互动功能，例如问答游戏、心理测试等。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 4. **扩展功能**
&lt;&#x2F;span&gt;&lt;span&gt;- **情感分析**: 根据用户的语气和内容，判断用户的情绪，并做出相应的回应。
&lt;&#x2F;span&gt;&lt;span&gt;- **知识图谱**: 构建一个知识图谱，帮助 Polly 理解复杂问题并提供更准确的回答。
&lt;&#x2F;span&gt;&lt;span&gt;- **社区互动**: 让用户可以与其他 Polly 用户互动，形成一个社区。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 5. **示例场景**
&lt;&#x2F;span&gt;&lt;span&gt;以下是一些 Polly 的实际应用场景：
&lt;&#x2F;span&gt;&lt;span&gt;1. **技术支持**: 用户提问 &amp;quot;如何用Python实现一个爬虫？&amp;quot;，Polly 提供代码示例和解释。
&lt;&#x2F;span&gt;&lt;span&gt;2. **生活助手**: 用户问 &amp;quot;周末有什么好玩的活动推荐？&amp;quot;，Polly 根据用户位置和兴趣推荐活动。
&lt;&#x2F;span&gt;&lt;span&gt;3. **学习伙伴**: 用户学习新知识时，Polly 提供相关资源和练习题。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 总结
&lt;&#x2F;span&gt;&lt;span&gt;通过构建一个详细的 Polly Profile，并结合 DeepSeek 的服务，你可以打造一个高度个性化、智能化的数字人 Polly。他不仅可以模拟你的知识和个性，还能通过动态学习和实时更新，持续提升自己的能力。希望这些建议对你有所帮助！如果需要进一步的技术支持，我可以协助你实现具体功能。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;1-2-jia-gou-gai-shu&quot;&gt;1.2 架构概述&lt;&#x2F;h3&gt;
&lt;p&gt;Polly AI Agent 采用了前后端分离的架构设计，主要包括以下几个部分：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;前端：基于 OpenHands 构建的聊天界面&lt;&#x2F;li&gt;
&lt;li&gt;后端：FastAPI 服务&lt;&#x2F;li&gt;
&lt;li&gt;大模型：DeepSeek API&lt;&#x2F;li&gt;
&lt;li&gt;部署：Azure Ubuntu 系统服务&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-3-ji-zhu-zhan-xuan-ze&quot;&gt;1.3 技术栈选择&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;前端：HTML&#x2F;CSS&#x2F;JavaScript&lt;&#x2F;li&gt;
&lt;li&gt;后端：Python + FastAPI&lt;&#x2F;li&gt;
&lt;li&gt;API 集成：DeepSeek API&lt;&#x2F;li&gt;
&lt;li&gt;开发工具：GitHub Copilot、VS Code、OpenHands&lt;&#x2F;li&gt;
&lt;li&gt;部署环境：Ubuntu + Systemd&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;er-openhands-gou-zao-wang-ye-qian-duan-liao-tian-gong-neng&quot;&gt;二、OpenHands 构造网页前端聊天功能&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;2-1-openhands-jie-shao&quot;&gt;2.1 OpenHands 介绍&lt;&#x2F;h3&gt;
&lt;p&gt;OpenHands 是一个开源的 AI 开发工具集，专注于帮助开发者从想法到实现的全过程。通过其强大的功能，帮助我细化了从 Idea 到 Plan 的过程，明确了前端和后端的架构设计，并丰富了 Agent Profile 的内容。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-2-qian-duan-ye-mian-gou-jian&quot;&gt;2.2 前端页面构建&lt;&#x2F;h3&gt;
&lt;p&gt;首先，我们创建一个基本的 HTML 结构：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;zh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;viewport&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;width=device-width, initial-scale=1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Polly AI 助手&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stylesheet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;openhands&#x2F;dist&#x2F;openhands.min.css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            font-family: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Arial&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, sans-serif;
&lt;&#x2F;span&gt;&lt;span&gt;            margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            background-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#f5f5f5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;chat-container &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;800px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;auto;
&lt;&#x2F;span&gt;&lt;span&gt;            padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 更多样式... *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chat-container&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Polly AI 助手&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chat-window&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;oh-chat-window&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;oh-input-container&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user-input&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;输入您的问题...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;send-button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;发送&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;openhands&#x2F;dist&#x2F;openhands.min.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后，编写 JavaScript 代码处理消息交互：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; app.js
&lt;&#x2F;span&gt;&lt;span&gt;document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DOMContentLoaded&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chatWindow &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chat-window&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInput &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user-input&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendButton &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;send-button&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; API 配置
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiUrl &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;xxx.com:50206&#x2F;api&#x2F;polly&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiKey &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;your_api_key_here&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 初始化聊天窗口
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat &lt;&#x2F;span&gt;&lt;span&gt;= new OpenHands.ChatUI({
&lt;&#x2F;span&gt;&lt;span&gt;        element: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chatWindow&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        theme: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;light&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;        initialMessage: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;你好！我是 Polly，有什么我可以帮助你的吗？&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 发送消息处理
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendMessage&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInput&lt;&#x2F;span&gt;&lt;span&gt;.value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 显示用户消息
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addUserMessage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInput&lt;&#x2F;span&gt;&lt;span&gt;.value = &amp;#39;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 显示加载状态
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;showTyping&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 发送请求到 API
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiUrl&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;            method: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;POST&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            headers: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&#x2F;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-API-Key&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiKey
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            body: JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span&gt;({ message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span&gt;new Error(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;API 请求失败&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 隐藏加载状态并显示回复
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hideTyping&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addAssistantMessage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reply&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error:&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hideTyping&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addSystemMessage&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;抱歉，发生了错误，请稍后再试。&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 事件监听器
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendButton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendMessage&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userInput&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keypress&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;=== &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendMessage&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-3-websocket-zhi-chi&quot;&gt;2.3 WebSocket 支持&lt;&#x2F;h3&gt;
&lt;p&gt;除了基本的 HTTP 请求外，还添加了 WebSocket 支持，实现实时通信：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; WebSocket 连接
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;connectWebSocket&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws &lt;&#x2F;span&gt;&lt;span&gt;= new WebSocket(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wss:&#x2F;&#x2F;xxx.com:50206&#x2F;ws&#x2F;polly?api_key=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apiKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onopen &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WebSocket 连接已建立&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 发送心跳检测
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setInterval&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.readyState === &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;WebSocket&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OPEN&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span&gt;({ type: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ping&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; }));
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onmessage &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;= JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(event.data);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.type === &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pong&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 忽略心跳响应
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reply&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addAssistantMessage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reply&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addSystemMessage&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;错误: ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onclose &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WebSocket 连接已关闭&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 尝试重新连接
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connectWebSocket&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onerror &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WebSocket 错误:&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;san-openhands-github-copilot-da-jian-fastapi-fu-wu&quot;&gt;三、OpenHands + GitHub Copilot 搭建 FastAPI 服务&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;3-1-fastapi-fu-wu-gou-jian&quot;&gt;3.1 FastAPI 服务构建&lt;&#x2F;h3&gt;
&lt;p&gt;首先，需要安装必要的依赖：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install fastapi uvicorn pydantic-settings python-dotenv aiohttp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-2-pei-zhi-wen-jian-she-zhi&quot;&gt;3.2 配置文件设置&lt;&#x2F;h3&gt;
&lt;p&gt;创建 &lt;code&gt;config.py&lt;&#x2F;code&gt; 文件，管理应用配置：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;pydantic_settings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;BaseSettings
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;typing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;List, Optional
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseSettings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# API 配置
&lt;&#x2F;span&gt;&lt;span&gt;    api_key: str
&lt;&#x2F;span&gt;&lt;span&gt;    deepseek_api_key: str
&lt;&#x2F;span&gt;&lt;span&gt;    deepseek_api_timeout: int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# API 超时时间（秒）
&lt;&#x2F;span&gt;&lt;span&gt;    deepseek_max_retries: int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 最大重试次数
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 应用配置
&lt;&#x2F;span&gt;&lt;span&gt;    debug: bool = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;    port: int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50206
&lt;&#x2F;span&gt;&lt;span&gt;    host: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.0.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    environment: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;development&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_certfile: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;fullchain.pem&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_keyfile: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;privkey.pem&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    use_https: bool = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 安全配置
&lt;&#x2F;span&gt;&lt;span&gt;    allowed_origins: List[str] = [
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;polly2014.github.io&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:1111&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:1111&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 资源配置
&lt;&#x2F;span&gt;&lt;span&gt;    profile_url: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;your-storage.blob.core.windows.net&#x2F;config&#x2F;profile_polly.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    local_profile_path: str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;profile_polly.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        env_file = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.env&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        case_sensitive = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;settings = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Settings&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-3-zhu-yao-fu-wu-luo-ji&quot;&gt;3.3 主要服务逻辑&lt;&#x2F;h3&gt;
&lt;p&gt;下面是 &lt;code&gt;main.py&lt;&#x2F;code&gt; 文件的核心代码，实现了 REST API 和 WebSocket 端点：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;lt;vscode_codeblock_uri&amp;gt;vscode-remote:&#x2F;&#x2F;ssh-remote%2B20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.51.201.85&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;main.py&amp;lt;&#x2F;vscode_codeblock_uri&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;fastapi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;FastAPI, WebSocket, HTTPException, Security, Depends, WebSocketDisconnect
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;fastapi.middleware.cors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;CORSMiddleware
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;fastapi.security &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;APIKeyHeader
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;pydantic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;BaseModel, Field
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;settings
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;logging
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;aiohttp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;uvicorn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 配置日志
&lt;&#x2F;span&gt;&lt;span&gt;logger = logging.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getLogger&lt;&#x2F;span&gt;&lt;span&gt;(__name__)
&lt;&#x2F;span&gt;&lt;span&gt;logging.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;basicConfig&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;=logging.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WARNING&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asctime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;levelname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handlers&lt;&#x2F;span&gt;&lt;span&gt;=[
&lt;&#x2F;span&gt;&lt;span&gt;        logging.handlers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RotatingFileHandler&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app.log&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxBytes&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;backupCount&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;        ),
&lt;&#x2F;span&gt;&lt;span&gt;        logging.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StreamHandler&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建 FastAPI 实例
&lt;&#x2F;span&gt;&lt;span&gt;app = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FastAPI&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Polly AI Agent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Polly AI 聊天服务&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;=settings.debug
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 配置 CORS
&lt;&#x2F;span&gt;&lt;span&gt;app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_middleware&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    CORSMiddleware,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow_origins&lt;&#x2F;span&gt;&lt;span&gt;=settings.allowed_origins,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow_credentials&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow_methods&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow_headers&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expose_headers&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max_age&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3600&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# API 密钥验证
&lt;&#x2F;span&gt;&lt;span&gt;api_key_header = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;APIKeyHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-API-Key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;verify_api_key&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api_key&lt;&#x2F;span&gt;&lt;span&gt;: str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Security&lt;&#x2F;span&gt;&lt;span&gt;(api_key_header)):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;api_key != settings.api_key:
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;warning&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;无效的 API 密钥尝试&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPException&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status_code&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;403&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;detail&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;无效的 API 密钥&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;api_key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 数据模型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ChatRequest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    message: str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min_length&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max_length&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 核心 API 路由
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;polly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;=[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Depends&lt;&#x2F;span&gt;&lt;span&gt;(verify_api_key)])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;chat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: ChatRequest):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        profile = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load_polly_profile&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        prompt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build_prompt&lt;&#x2F;span&gt;&lt;span&gt;(profile)
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        reply = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query_deepseek&lt;&#x2F;span&gt;&lt;span&gt;(prompt, request.message)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reply&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: reply}
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;处理请求失败: &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(e)}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status_code&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;detail&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(e))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# WebSocket 端点
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;websocket&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;ws&#x2F;polly&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;websocket_endpoint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;websocket&lt;&#x2F;span&gt;&lt;span&gt;: WebSocket):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# WebSocket 处理逻辑...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 运行服务器
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Starting server on &lt;&#x2F;span&gt;&lt;span&gt;{settings.host}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;{settings.port}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        uvicorn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main:app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;=settings.host,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;=settings.port,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssl_certfile&lt;&#x2F;span&gt;&lt;span&gt;=settings.ssl_certfile,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssl_keyfile&lt;&#x2F;span&gt;&lt;span&gt;=settings.ssl_keyfile,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reload&lt;&#x2F;span&gt;&lt;span&gt;=settings.debug,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_level&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;access_log&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Server startup failed: &lt;&#x2F;span&gt;&lt;span&gt;{e}&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-4-deepseek-api-ji-cheng&quot;&gt;3.4 DeepSeek API 集成&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;query_deepseek&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;: str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_input&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; str:
&lt;&#x2F;span&gt;&lt;span&gt;    url = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.deepseek.com&#x2F;chat&#x2F;completions&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    headers = {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&#x2F;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Authorization&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bearer &lt;&#x2F;span&gt;&lt;span&gt;{settings.deepseek_api_key}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    payload = {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deepseek-chat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;            {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: prompt},
&lt;&#x2F;span&gt;&lt;span&gt;            {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: user_input}
&lt;&#x2F;span&gt;&lt;span&gt;        ],
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span&gt;aiohttp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ClientSession&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;session:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span&gt;session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(url, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;=payload, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;=headers) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;response:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;response.status != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status_code&lt;&#x2F;span&gt;&lt;span&gt;=response.status, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;detail&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;API调用失败&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;                
&lt;&#x2F;span&gt;&lt;span&gt;                result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;result[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;choices&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;][&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;][&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;            logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DeepSeek API调用失败: &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(e)}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status_code&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;detail&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;API调用错误: &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(e)}&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-5-github-copilot-openhands-fu-zhu-kai-fa-ti-yan&quot;&gt;3.5 GitHub Copilot &amp;amp; OpenHands 辅助开发体验&lt;&#x2F;h3&gt;
&lt;p&gt;在 Polly AI Agent 的开发过程中，GitHub Copilot 和 OpenHands 成为不可或缺的“智囊团”，它们不仅提升了开发效率，更为整个项目注入了创新的灵感。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;github-copilot-zhi-neng-bian-cheng-zhu-shou&quot;&gt;&lt;strong&gt;GitHub Copilot：智能编程助手&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;GitHub Copilot 的强大之处在于它能够实时理解开发者的意图，并提供精准的代码建议。在编写复杂逻辑时，Copilot 不仅能补全函数和类，还能根据上下文生成符合项目需求的代码片段。例如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WebSocket 逻辑生成&lt;&#x2F;strong&gt;：在实现实时通信时，Copilot 自动生成了连接管理、消息处理和错误处理的完整代码框架。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;错误修复与优化&lt;&#x2F;strong&gt;：通过分析代码，Copilot 提供了潜在问题的解决方案，并建议更优雅的实现方式。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;文档与注释生成&lt;&#x2F;strong&gt;：自动生成清晰的函数注释和文档，确保代码的可读性和可维护性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;openhands-cong-chuang-yi-dao-shi-xian-de-qiao-liang&quot;&gt;&lt;strong&gt;OpenHands：从创意到实现的桥梁&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;OpenHands 则在项目的整体规划和架构设计中扮演了重要角色。它帮助我从最初的 Idea 出发，逐步细化为可执行的 Plan，并在以下方面提供了关键支持：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;架构设计&lt;&#x2F;strong&gt;：明确了前后端分离的技术栈选择，以及各模块的职责划分。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Agent Profile 丰富化&lt;&#x2F;strong&gt;：通过 OpenHands 的工具，我得以构建一个高度个性化的 Polly Profile，定义了其知识领域、行为规则和动态学习能力。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;开发流程优化&lt;&#x2F;strong&gt;：OpenHands 提供的模板和最佳实践建议，使得开发过程更加高效和规范。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;xie-tong-xiao-ying-ji-zhu-yu-chuang-yi-de-wan-mei-jie-he&quot;&gt;&lt;strong&gt;协同效应：技术与创意的完美结合&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;GitHub Copilot 和 OpenHands 的结合，不仅是技术的加持，更是创意的催化剂。Copilot 让代码的实现变得轻松，而 OpenHands 则确保了项目的方向和深度。在它们的共同作用下，Polly AI Agent 从一个模糊的想法，蜕变为一个功能完善的数字人助手。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;si-qian-hou-duan-dui-jie-pei-zhi-ssl-zheng-shu-deng&quot;&gt;四、前后端对接（配置 SSL、证书等）&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;4-1-ssl-zheng-shu-pei-zhi&quot;&gt;4.1 SSL 证书配置&lt;&#x2F;h3&gt;
&lt;p&gt;为了确保通信安全，我们使用 Let&#x27;s Encrypt 提供的免费 SSL 证书：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 安装 Let&amp;#39;s Encrypt 客户端
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install certbot
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 获取证书
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; certbot certonly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --standalone -d&lt;&#x2F;span&gt;&lt;span&gt; xxx.com
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建证书目录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 复制证书文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;xxx.com&#x2F;fullchain.pem &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cp &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;xxx.com&#x2F;privkey.pem &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 设置正确的权限
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chown azureuser:azureuser &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;*.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chmod 644 &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;fullchain.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chmod 600 &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;privkey.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-2-zheng-shu-zi-dong-geng-xin-jiao-ben&quot;&gt;4.2 证书自动更新脚本&lt;&#x2F;h3&gt;
&lt;p&gt;创建一个脚本以便在证书更新时自动复制到应用目录：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# filepath: &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;copy_certs.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 复制更新后的证书
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;xxx.com&#x2F;fullchain.pem &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;xxx.com&#x2F;privkey.pem &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 设置权限
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chown&lt;&#x2F;span&gt;&lt;span&gt; azureuser:azureuser &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;fullchain.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chown&lt;&#x2F;span&gt;&lt;span&gt; azureuser:azureuser &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;privkey.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; 644 &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;fullchain.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; 600 &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;certs&#x2F;privkey.pem
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 重启 FastAPI 服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span&gt; restart fastapi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;将此脚本链接到 Let&#x27;s Encrypt 的更新钩子目录：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;copy_certs.sh &#x2F;etc&#x2F;letsencrypt&#x2F;renewal-hooks&#x2F;post&#x2F;copy_certs_fastapi.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-3-pei-zhi-wei-xi-tong-fu-wu&quot;&gt;4.3 配置为系统服务&lt;&#x2F;h3&gt;
&lt;p&gt;创建 systemd 服务文件，使应用能够作为系统服务运行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span&gt;&amp;lt;vscode_codeblock_uri&amp;gt;vscode-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;remote:&#x2F;&#x2F;ssh-remote%2B20.51.201.85&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;fastapi.service&amp;lt;&#x2F;vscode_codeblock_uri&amp;gt;[Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Description&lt;&#x2F;span&gt;&lt;span&gt;=Polly AI FastAPI Service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;After&lt;&#x2F;span&gt;&lt;span&gt;=network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[Service]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;=azureuser
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Group&lt;&#x2F;span&gt;&lt;span&gt;=azureuser
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WorkingDirectory&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;PATH=&#x2F;home&#x2F;azureuser&#x2F;miniforge3&#x2F;envs&#x2F;FastAPI&#x2F;bin&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExecStart&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;home&#x2F;azureuser&#x2F;miniforge3&#x2F;envs&#x2F;FastAPI&#x2F;bin&#x2F;python &#x2F;home&#x2F;azureuser&#x2F;FastAPI_Server&#x2F;main.py
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Restart&lt;&#x2F;span&gt;&lt;span&gt;=always
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RestartSec&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StandardOutput&lt;&#x2F;span&gt;&lt;span&gt;=journal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;StandardError&lt;&#x2F;span&gt;&lt;span&gt;=journal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SyslogIdentifier&lt;&#x2F;span&gt;&lt;span&gt;=fastapi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;=PYTHONUNBUFFERED=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[Install]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WantedBy&lt;&#x2F;span&gt;&lt;span&gt;=multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;启用并启动服务：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable fastapi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl start fastapi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-4-fang-huo-qiang-pei-zhi&quot;&gt;4.4 防火墙配置&lt;&#x2F;h3&gt;
&lt;p&gt;确保服务端口在防火墙中开放：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ufw allow 50206&#x2F;tcp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; ufw status
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;wu-diao-shi-yu-you-hua&quot;&gt;五、调试与优化&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;5-1-ri-zhi-pei-zhi&quot;&gt;5.1 日志配置&lt;&#x2F;h3&gt;
&lt;p&gt;为了更好地监控应用运行状态，我们精心配置了日志系统：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;分级日志&lt;&#x2F;strong&gt;：区分 ERROR、WARNING、INFO 和 DEBUG 级别&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;日志轮转&lt;&#x2F;strong&gt;：防止日志文件过大&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;控制台输出控制&lt;&#x2F;strong&gt;：减少非必要的输出&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;5-2-xing-neng-you-hua&quot;&gt;5.2 性能优化&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;异步处理&lt;&#x2F;strong&gt;：使用 FastAPI 的异步特性处理并发请求&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;连接池管理&lt;&#x2F;strong&gt;：使用 aiohttp 连接池减少重复连接开销&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;缓存策略&lt;&#x2F;strong&gt;：针对频繁访问的资源实施缓存&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;liu-cheng-guo-zhan-shi&quot;&gt;六、成果展示&lt;&#x2F;h2&gt;
&lt;p&gt;成功构建了一个完整的 AI 助手系统：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;前端提供了友好的聊天界面&lt;&#x2F;li&gt;
&lt;li&gt;后端实现了安全、高效的 API 服务&lt;&#x2F;li&gt;
&lt;li&gt;系统可靠稳定，支持 HTTPS 和 WebSocket&lt;&#x2F;li&gt;
&lt;li&gt;全系统支持自动更新和维护&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;访问地址：&lt;a href=&quot;https:&#x2F;&#x2F;polly2014.github.io&quot;&gt;https:&#x2F;&#x2F;polly2014.github.io&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qi-zong-jie-yu-zhan-wang&quot;&gt;七、总结与展望&lt;&#x2F;h2&gt;
&lt;p&gt;本项目展示了如何利用现代工具快速构建 AI 应用。通过 GitHub Copilot 和 OpenHands 的协助，在短时间内完成一个功能完整的 AI 助手。&lt;&#x2F;p&gt;
&lt;p&gt;未来改进方向：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;添加多模态支持&lt;&#x2F;strong&gt;：图像识别、语音交互&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;记忆功能&lt;&#x2F;strong&gt;：通过数据库支持用户对话历史&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;个性化定制&lt;&#x2F;strong&gt;：基于用户行为调整回复风格&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;参考资料：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fastapi.tiangolo.com&#x2F;&quot;&gt;FastAPI 官方文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;platform.deepseek.com&#x2F;docs&quot;&gt;DeepSeek API 文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;copilot&quot;&gt;GitHub Copilot 文档&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openhands&#x2F;openhands&quot;&gt;OpenHands 项目&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;letsencrypt.org&#x2F;docs&#x2F;&quot;&gt;Let&#x27;s Encrypt 使用指南&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenHands vs Coding Copilots: 深度剖析与对比</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://polly2014.github.io/openhands-vs-coding-copilots/" type="text/html"/>
        <id>https://polly2014.github.io/openhands-vs-coding-copilots/</id>
        
        <content type="html">&lt;p&gt;随着人工智能技术的快速发展，编程助手（Coding Copilot&#x2F;Agent）逐渐成为开发者的重要工具。本文将深度剖析 OpenHands 与 Github Copilot、Cursor 等主流编程助手的区别，探索其设计理念与应用场景。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;he-xin-dui-bi&quot;&gt;核心对比&lt;&#x2F;h2&gt;
&lt;p&gt;以下是 OpenHands 与 Github Copilot、Cursor 的核心对比：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;特性&lt;&#x2F;th&gt;&lt;th&gt;OpenHands&lt;&#x2F;th&gt;&lt;th&gt;Github Copilot&lt;&#x2F;th&gt;&lt;th&gt;Cursor&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;定位&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;自动化 AI 软件工程师&lt;&#x2F;td&gt;&lt;td&gt;编程助手&lt;&#x2F;td&gt;&lt;td&gt;编程助手&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;功能范围&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;全栈开发、任务分配、代码生成、测试&lt;&#x2F;td&gt;&lt;td&gt;代码补全、代码生成&lt;&#x2F;td&gt;&lt;td&gt;代码补全、代码生成&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;交互方式&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;前后端协作，支持复杂任务&lt;&#x2F;td&gt;&lt;td&gt;IDE 插件，专注代码片段生成&lt;&#x2F;td&gt;&lt;td&gt;IDE 插件，专注代码片段生成&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;扩展性&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;模块化设计，支持插件和代理扩展&lt;&#x2F;td&gt;&lt;td&gt;依赖 OpenAI API，扩展性有限&lt;&#x2F;td&gt;&lt;td&gt;依赖 OpenAI API，扩展性有限&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;安全性&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;提供安全分析和运行时检查&lt;&#x2F;td&gt;&lt;td&gt;无内置安全分析&lt;&#x2F;td&gt;&lt;td&gt;无内置安全分析&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;目标用户&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;团队协作、全栈开发者&lt;&#x2F;td&gt;&lt;td&gt;个人开发者&lt;&#x2F;td&gt;&lt;td&gt;个人开发者&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;she-ji-li-nian&quot;&gt;设计理念&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OpenHands&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全栈自动化&lt;&#x2F;strong&gt;：不仅限于代码生成，还支持任务分配、测试和部署。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;模块化与扩展性&lt;&#x2F;strong&gt;：通过插件和代理系统，支持多种任务和场景。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;安全性优先&lt;&#x2F;strong&gt;：内置安全分析模块，确保代码和系统的安全性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Github Copilot&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码补全为核心&lt;&#x2F;strong&gt;：专注于提高代码编写效率。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;深度集成 IDE&lt;&#x2F;strong&gt;：通过插件无缝集成到主流 IDE（如 VSCode）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;依赖 OpenAI&lt;&#x2F;strong&gt;：使用 OpenAI 的 GPT 模型生成代码。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cursor&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;轻量化设计&lt;&#x2F;strong&gt;：专注于代码片段的生成和补全。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;快速响应&lt;&#x2F;strong&gt;：优化了与 OpenAI API 的交互，提升响应速度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;openhands-agent-shen-du-jie-xi&quot;&gt;OpenHands Agent 深度解析&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 的 Agent 系统不仅仅局限于代码补全功能，它是一个多功能的任务执行框架，能够通过模块化设计和代理系统完成多种复杂任务。以下是 OpenHands Agent 系统的核心能力及其具体应用场景的详细解释：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;功能模块&lt;&#x2F;th&gt;&lt;th&gt;功能&lt;&#x2F;th&gt;&lt;th&gt;应用场景&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;任务分配与管理&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统能够根据用户输入的意图，自动分配任务给合适的代理（Agent）。&lt;br&gt;- 通过 Controller 模块中的 agent_controller.py，解析用户意图并选择最适合的代理。&lt;&#x2F;td&gt;&lt;td&gt;- 团队协作：在团队开发中，OpenHands 可以根据任务类型（如代码生成、测试、部署）将任务分配给不同的代理。&lt;br&gt;- 任务优先级管理：支持对任务进行优先级排序，确保关键任务优先完成。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;全栈开发支持&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统支持从需求分析到代码生成，再到测试和部署的全流程开发。&lt;br&gt;- 每个代理专注于特定的开发阶段，例如代码生成代理、测试代理、部署代理等。&lt;&#x2F;td&gt;&lt;td&gt;- 需求分析：通过自然语言处理（NLP）技术，将用户的需求描述转化为开发任务。&lt;br&gt;- 代码生成：调用 LLM 模块生成高质量的代码。&lt;br&gt;- 自动化测试：通过测试代理生成单元测试、集成测试，并自动执行测试。&lt;br&gt;- 部署支持：通过部署代理，自动化完成容器化、CI&#x2F;CD 流水线配置等任务。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;多代理协作&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统支持多个代理之间的协作，完成复杂的任务链。&lt;br&gt;- 通过 AgentHub 模块，管理和协调多个代理的工作。&lt;&#x2F;td&gt;&lt;td&gt;- 复杂任务处理：例如，用户希望实现一个完整的 Web 应用，OpenHands 可以协调代码生成代理、测试代理和部署代理共同完成任务。&lt;br&gt;- 跨领域协作：支持不同领域的代理（如数据分析代理、机器学习代理）协作完成任务。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;数据分析与处理&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统可以通过数据分析代理，处理和分析大规模数据集。&lt;br&gt;- 支持数据清洗、特征工程、模型训练等任务。&lt;&#x2F;td&gt;&lt;td&gt;- 数据清洗：通过代理自动清洗和格式化数据。&lt;br&gt;- 模型训练：调用机器学习代理，完成模型的训练和评估。&lt;br&gt;- 数据可视化：生成数据的可视化报告，帮助用户快速理解数据。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;文档生成与管理&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统可以通过文档代理，生成和管理技术文档。&lt;br&gt;- 支持从代码注释生成文档、从需求生成设计文档等功能。&lt;&#x2F;td&gt;&lt;td&gt;- API 文档生成：根据代码中的注释，自动生成 API 文档。&lt;br&gt;- 设计文档生成：根据用户的需求描述，生成系统设计文档。&lt;br&gt;- 文档版本管理：通过存储模块，管理文档的版本和历史记录。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;安全分析与优化&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统内置安全分析代理，能够检测代码和系统中的潜在安全风险。&lt;br&gt;- 提供优化建议，帮助用户提升系统的安全性。&lt;&#x2F;td&gt;&lt;td&gt;- 代码安全扫描：检测代码中的潜在漏洞（如 SQL 注入、XSS 攻击）。&lt;br&gt;- 运行时安全监控：监控系统的运行状态，发现并修复安全隐患。&lt;br&gt;- 安全优化建议：为用户提供安全配置的优化建议。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;自然语言交互&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统支持通过自然语言与用户交互，理解用户的需求并生成相应的解决方案。&lt;br&gt;- 通过 LLM 模块，支持多轮对话和上下文理解。&lt;&#x2F;td&gt;&lt;td&gt;- 需求沟通：用户可以通过自然语言描述需求，OpenHands 自动生成开发任务。&lt;br&gt;- 问题解答：用户可以提问技术问题，OpenHands 提供详细的解答。&lt;br&gt;- 代码解释：用户可以请求 OpenHands 解释某段代码的功能和逻辑。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;插件与扩展支持&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统支持通过插件扩展功能，适应不同的应用场景。&lt;br&gt;- 插件可以动态加载和卸载，提升系统的灵活性。&lt;&#x2F;td&gt;&lt;td&gt;- 自定义功能：用户可以开发自定义插件，扩展 OpenHands 的功能。&lt;br&gt;- 第三方集成：通过插件集成第三方服务（如 GitHub、Jira、Slack）。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;事件流与任务自动化&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统支持事件驱动的任务自动化。&lt;br&gt;- 通过事件流模块，管理任务的触发和执行。&lt;&#x2F;td&gt;&lt;td&gt;- 自动化工作流：例如，当用户提交代码时，自动触发测试和部署任务。&lt;br&gt;- 实时通知：当任务完成或失败时，自动通知用户。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;知识管理与学习&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- OpenHands 的 Agent 系统可以通过知识管理代理，帮助用户整理和管理技术知识。&lt;br&gt;- 支持知识的存储、检索和更新。&lt;&#x2F;td&gt;&lt;td&gt;- 技术知识库：为团队创建和维护技术知识库。&lt;br&gt;- 学习建议：根据用户的需求，推荐相关的学习资源。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;OpenHands 与 Github Copilot、Cursor 的核心区别在于定位和功能范围。OpenHands 更像是一个全栈的 AI 软件工程师，适合团队协作和复杂任务；而 Github Copilot 和 Cursor 则专注于代码补全和生成，适合个人开发者的日常需求。&lt;&#x2F;p&gt;
&lt;p&gt;未来，随着技术的不断发展，这些工具将进一步优化和扩展，为开发者提供更高效的支持。&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
